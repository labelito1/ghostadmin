<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ICSharpCode.SharpZipLib.Fakes</name>
    </assembly>
    <members>
        <member name="T:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.BZip2.BZip2</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2.#ctor(ICSharpCode.SharpZipLib.BZip2.BZip2)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2.CompressStreamStreamInt32">
            <summary>Establecer el shim de BZip2.Compress(Stream inStream, Stream outStream, Int32 blockSize)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2.Constructor">
            <summary>Establecer el shim de BZip2.BZip2()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2.DecompressStreamStream">
            <summary>Establecer el shim de BZip2.Decompress(Stream inStream, Stream outStream)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2Exception">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.BZip2.BZip2Exception</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2Exception.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2Exception.#ctor(ICSharpCode.SharpZipLib.BZip2.BZip2Exception)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2Exception.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2Exception.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2Exception.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Asocia los miembros de la interfaz a las correcciones de compatibilidad (shim).</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2Exception.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2Exception.Constructor">
            <summary>Establecer el shim de BZip2Exception.BZip2Exception()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2Exception.ConstructorSerializationInfoStreamingContext">
            <summary>Establecer el shim de BZip2Exception.BZip2Exception(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2Exception.ConstructorString">
            <summary>Establecer el shim de BZip2Exception.BZip2Exception(String message)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2Exception.ConstructorStringException">
            <summary>Establecer el shim de BZip2Exception.BZip2Exception(String message, Exception exception)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2Exception.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.BZip2.BZip2InputStream</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.#ctor(ICSharpCode.SharpZipLib.BZip2.BZip2InputStream)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.Bind(System.IDisposable)">
            <summary>Asocia los miembros de la interfaz a las correcciones de compatibilidad (shim).</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.BadBlockHeader">
            <summary>Establecer el shim de BZip2InputStream.BadBlockHeader()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.BlockOverrun">
            <summary>Establecer el shim de BZip2InputStream.BlockOverrun()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.BsGetInt32">
            <summary>Establecer el shim de BZip2InputStream.BsGetInt32()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.BsGetIntVSInt32">
            <summary>Establecer el shim de BZip2InputStream.BsGetIntVS(Int32 numBits)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.BsGetUChar">
            <summary>Establecer el shim de BZip2InputStream.BsGetUChar()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.BsRInt32">
            <summary>Establecer el shim de BZip2InputStream.BsR(Int32 n)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.BsSetStreamStream">
            <summary>Establecer el shim de BZip2InputStream.BsSetStream(Stream stream)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.CanReadGet">
            <summary>Establecer el shim de BZip2InputStream.get_CanRead()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.CanSeekGet">
            <summary>Establecer el shim de BZip2InputStream.get_CanSeek()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.CanWriteGet">
            <summary>Establecer el shim de BZip2InputStream.get_CanWrite()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.Close">
            <summary>Establecer el shim de BZip2InputStream.Close()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.Complete">
            <summary>Establecer el shim de BZip2InputStream.Complete()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.CompressedStreamEOF">
            <summary>Establecer el shim de BZip2InputStream.CompressedStreamEOF()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.ConstructorStream">
            <summary>Establecer el shim de BZip2InputStream.BZip2InputStream(Stream stream)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.CrcError">
            <summary>Establecer el shim de BZip2InputStream.CrcError()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.EndBlock">
            <summary>Establecer el shim de BZip2InputStream.EndBlock()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.FillBuffer">
            <summary>Establecer el shim de BZip2InputStream.FillBuffer()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.Flush">
            <summary>Establecer el shim de BZip2InputStream.Flush()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.GetAndMoveToFrontDecode">
            <summary>Establecer el shim de BZip2InputStream.GetAndMoveToFrontDecode()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.HbCreateDecodeTablesInt32ArrayInt32ArrayInt32ArrayCharArrayInt32Int32Int32">
            <summary>Establecer el shim de BZip2InputStream.HbCreateDecodeTables(Int32[] limit, Int32[] baseArray, Int32[] perm, Char[] length, Int32 minLen, Int32 maxLen, Int32 alphaSize)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.InitBlock">
            <summary>Establecer el shim de BZip2InputStream.InitBlock()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.Initialize">
            <summary>Establecer el shim de BZip2InputStream.Initialize()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.IsStreamOwnerGet">
            <summary>Establecer el shim de BZip2InputStream.get_IsStreamOwner()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.IsStreamOwnerSetBoolean">
            <summary>Establecer el shim de BZip2InputStream.set_IsStreamOwner(Boolean value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.LengthGet">
            <summary>Establecer el shim de BZip2InputStream.get_Length()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.MakeMaps">
            <summary>Establecer el shim de BZip2InputStream.MakeMaps()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.PositionGet">
            <summary>Establecer el shim de BZip2InputStream.get_Position()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.PositionSetInt64">
            <summary>Establecer el shim de BZip2InputStream.set_Position(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.ReadByte">
            <summary>Establecer el shim de BZip2InputStream.ReadByte()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.ReadByteArrayInt32Int32">
            <summary>Establecer el shim de BZip2InputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.RecvDecodingTables">
            <summary>Establecer el shim de BZip2InputStream.RecvDecodingTables()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.SeekInt64SeekOrigin">
            <summary>Establecer el shim de BZip2InputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.SetDecompressStructureSizesInt32">
            <summary>Establecer el shim de BZip2InputStream.SetDecompressStructureSizes(Int32 newSize100k)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.SetLengthInt64">
            <summary>Establecer el shim de BZip2InputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.SetupBlock">
            <summary>Establecer el shim de BZip2InputStream.SetupBlock()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.SetupNoRandPartA">
            <summary>Establecer el shim de BZip2InputStream.SetupNoRandPartA()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.SetupNoRandPartB">
            <summary>Establecer el shim de BZip2InputStream.SetupNoRandPartB()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.SetupNoRandPartC">
            <summary>Establecer el shim de BZip2InputStream.SetupNoRandPartC()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.SetupRandPartA">
            <summary>Establecer el shim de BZip2InputStream.SetupRandPartA()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.SetupRandPartB">
            <summary>Establecer el shim de BZip2InputStream.SetupRandPartB()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.SetupRandPartC">
            <summary>Establecer el shim de BZip2InputStream.SetupRandPartC()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.WriteByteArrayInt32Int32">
            <summary>Establecer el shim de BZip2InputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.WriteByteByte">
            <summary>Establecer el shim de BZip2InputStream.WriteByte(Byte value)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.AllInstances.BsGetInt32">
            <summary>Establecer el shim de BZip2InputStream.BsGetInt32()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.AllInstances.BsGetIntVSInt32">
            <summary>Establecer el shim de BZip2InputStream.BsGetIntVS(Int32 numBits)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.AllInstances.BsGetUChar">
            <summary>Establecer el shim de BZip2InputStream.BsGetUChar()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.AllInstances.BsRInt32">
            <summary>Establecer el shim de BZip2InputStream.BsR(Int32 n)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.AllInstances.BsSetStreamStream">
            <summary>Establecer el shim de BZip2InputStream.BsSetStream(Stream stream)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.AllInstances.CanReadGet">
            <summary>Establecer el shim de BZip2InputStream.get_CanRead()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.AllInstances.CanSeekGet">
            <summary>Establecer el shim de BZip2InputStream.get_CanSeek()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.AllInstances.CanWriteGet">
            <summary>Establecer el shim de BZip2InputStream.get_CanWrite()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.AllInstances.Close">
            <summary>Establecer el shim de BZip2InputStream.Close()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.AllInstances.Complete">
            <summary>Establecer el shim de BZip2InputStream.Complete()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.AllInstances.EndBlock">
            <summary>Establecer el shim de BZip2InputStream.EndBlock()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.AllInstances.FillBuffer">
            <summary>Establecer el shim de BZip2InputStream.FillBuffer()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.AllInstances.Flush">
            <summary>Establecer el shim de BZip2InputStream.Flush()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.AllInstances.GetAndMoveToFrontDecode">
            <summary>Establecer el shim de BZip2InputStream.GetAndMoveToFrontDecode()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.AllInstances.InitBlock">
            <summary>Establecer el shim de BZip2InputStream.InitBlock()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.AllInstances.Initialize">
            <summary>Establecer el shim de BZip2InputStream.Initialize()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.AllInstances.IsStreamOwnerGet">
            <summary>Establecer el shim de BZip2InputStream.get_IsStreamOwner()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.AllInstances.IsStreamOwnerSetBoolean">
            <summary>Establecer el shim de BZip2InputStream.set_IsStreamOwner(Boolean value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.AllInstances.LengthGet">
            <summary>Establecer el shim de BZip2InputStream.get_Length()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.AllInstances.MakeMaps">
            <summary>Establecer el shim de BZip2InputStream.MakeMaps()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.AllInstances.PositionGet">
            <summary>Establecer el shim de BZip2InputStream.get_Position()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.AllInstances.PositionSetInt64">
            <summary>Establecer el shim de BZip2InputStream.set_Position(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.AllInstances.ReadByte">
            <summary>Establecer el shim de BZip2InputStream.ReadByte()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.AllInstances.ReadByteArrayInt32Int32">
            <summary>Establecer el shim de BZip2InputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.AllInstances.RecvDecodingTables">
            <summary>Establecer el shim de BZip2InputStream.RecvDecodingTables()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.AllInstances.SeekInt64SeekOrigin">
            <summary>Establecer el shim de BZip2InputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.AllInstances.SetDecompressStructureSizesInt32">
            <summary>Establecer el shim de BZip2InputStream.SetDecompressStructureSizes(Int32 newSize100k)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.AllInstances.SetLengthInt64">
            <summary>Establecer el shim de BZip2InputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.AllInstances.SetupBlock">
            <summary>Establecer el shim de BZip2InputStream.SetupBlock()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.AllInstances.SetupNoRandPartA">
            <summary>Establecer el shim de BZip2InputStream.SetupNoRandPartA()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.AllInstances.SetupNoRandPartB">
            <summary>Establecer el shim de BZip2InputStream.SetupNoRandPartB()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.AllInstances.SetupNoRandPartC">
            <summary>Establecer el shim de BZip2InputStream.SetupNoRandPartC()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.AllInstances.SetupRandPartA">
            <summary>Establecer el shim de BZip2InputStream.SetupRandPartA()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.AllInstances.SetupRandPartB">
            <summary>Establecer el shim de BZip2InputStream.SetupRandPartB()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.AllInstances.SetupRandPartC">
            <summary>Establecer el shim de BZip2InputStream.SetupRandPartC()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.AllInstances.WriteByteArrayInt32Int32">
            <summary>Establecer el shim de BZip2InputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2InputStream.AllInstances.WriteByteByte">
            <summary>Establecer el shim de BZip2InputStream.WriteByte(Byte value)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.#ctor(ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.Bind(System.IDisposable)">
            <summary>Asocia los miembros de la interfaz a las correcciones de compatibilidad (shim).</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.AllocateCompressStructures">
            <summary>Establecer el shim de BZip2OutputStream.AllocateCompressStructures()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.BsFinishedWithStream">
            <summary>Establecer el shim de BZip2OutputStream.BsFinishedWithStream()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.BsPutIntVSInt32Int32">
            <summary>Establecer el shim de BZip2OutputStream.BsPutIntVS(Int32 numBits, Int32 c)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.BsPutUCharInt32">
            <summary>Establecer el shim de BZip2OutputStream.BsPutUChar(Int32 c)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.BsPutintInt32">
            <summary>Establecer el shim de BZip2OutputStream.BsPutint(Int32 u)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.BsSetStreamStream">
            <summary>Establecer el shim de BZip2OutputStream.BsSetStream(Stream stream)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.BsWInt32Int32">
            <summary>Establecer el shim de BZip2OutputStream.BsW(Int32 n, Int32 v)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.BytesWrittenGet">
            <summary>Establecer el shim de BZip2OutputStream.get_BytesWritten()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.CanReadGet">
            <summary>Establecer el shim de BZip2OutputStream.get_CanRead()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.CanSeekGet">
            <summary>Establecer el shim de BZip2OutputStream.get_CanSeek()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.CanWriteGet">
            <summary>Establecer el shim de BZip2OutputStream.get_CanWrite()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.Close">
            <summary>Establecer el shim de BZip2OutputStream.Close()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.ConstructorStream">
            <summary>Establecer el shim de BZip2OutputStream.BZip2OutputStream(Stream stream)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.ConstructorStreamInt32">
            <summary>Establecer el shim de BZip2OutputStream.BZip2OutputStream(Stream stream, Int32 blockSize)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.DisposeBoolean">
            <summary>Establecer el shim de BZip2OutputStream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.DoReversibleTransformation">
            <summary>Establecer el shim de BZip2OutputStream.DoReversibleTransformation()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.EndBlock">
            <summary>Establecer el shim de BZip2OutputStream.EndBlock()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.EndCompression">
            <summary>Establecer el shim de BZip2OutputStream.EndCompression()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.Flush">
            <summary>Establecer el shim de BZip2OutputStream.Flush()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.FullGtUInt32Int32">
            <summary>Establecer el shim de BZip2OutputStream.FullGtU(Int32 i1, Int32 i2)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.GenerateMTFValues">
            <summary>Establecer el shim de BZip2OutputStream.GenerateMTFValues()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.HbAssignCodesInt32ArrayCharArrayInt32Int32Int32">
            <summary>Establecer el shim de BZip2OutputStream.HbAssignCodes(Int32[] code, Char[] length, Int32 minLen, Int32 maxLen, Int32 alphaSize)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.HbMakeCodeLengthsCharArrayInt32ArrayInt32Int32">
            <summary>Establecer el shim de BZip2OutputStream.HbMakeCodeLengths(Char[] len, Int32[] freq, Int32 alphaSize, Int32 maxLen)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.InitBlock">
            <summary>Establecer el shim de BZip2OutputStream.InitBlock()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.Initialize">
            <summary>Establecer el shim de BZip2OutputStream.Initialize()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.IsStreamOwnerGet">
            <summary>Establecer el shim de BZip2OutputStream.get_IsStreamOwner()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.IsStreamOwnerSetBoolean">
            <summary>Establecer el shim de BZip2OutputStream.set_IsStreamOwner(Boolean value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.LengthGet">
            <summary>Establecer el shim de BZip2OutputStream.get_Length()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.MainSort">
            <summary>Establecer el shim de BZip2OutputStream.MainSort()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.MakeMaps">
            <summary>Establecer el shim de BZip2OutputStream.MakeMaps()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.Med3ByteByteByte">
            <summary>Establecer el shim de BZip2OutputStream.Med3(Byte a, Byte b, Byte c)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.MoveToFrontCodeAndSend">
            <summary>Establecer el shim de BZip2OutputStream.MoveToFrontCodeAndSend()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.Panic">
            <summary>Establecer el shim de BZip2OutputStream.Panic()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.PositionGet">
            <summary>Establecer el shim de BZip2OutputStream.get_Position()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.PositionSetInt64">
            <summary>Establecer el shim de BZip2OutputStream.set_Position(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.QSort3Int32Int32Int32">
            <summary>Establecer el shim de BZip2OutputStream.QSort3(Int32 loSt, Int32 hiSt, Int32 dSt)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.RandomiseBlock">
            <summary>Establecer el shim de BZip2OutputStream.RandomiseBlock()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.ReadByte">
            <summary>Establecer el shim de BZip2OutputStream.ReadByte()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.ReadByteArrayInt32Int32">
            <summary>Establecer el shim de BZip2OutputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.SeekInt64SeekOrigin">
            <summary>Establecer el shim de BZip2OutputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.SendMTFValues">
            <summary>Establecer el shim de BZip2OutputStream.SendMTFValues()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.SetLengthInt64">
            <summary>Establecer el shim de BZip2OutputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.SimpleSortInt32Int32Int32">
            <summary>Establecer el shim de BZip2OutputStream.SimpleSort(Int32 lo, Int32 hi, Int32 d)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.VswapInt32Int32Int32">
            <summary>Establecer el shim de BZip2OutputStream.Vswap(Int32 p1, Int32 p2, Int32 n)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.WriteByteArrayInt32Int32">
            <summary>Establecer el shim de BZip2OutputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.WriteByteByte">
            <summary>Establecer el shim de BZip2OutputStream.WriteByte(Byte value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.WriteRun">
            <summary>Establecer el shim de BZip2OutputStream.WriteRun()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.AllocateCompressStructures">
            <summary>Establecer el shim de BZip2OutputStream.AllocateCompressStructures()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.BsFinishedWithStream">
            <summary>Establecer el shim de BZip2OutputStream.BsFinishedWithStream()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.BsPutIntVSInt32Int32">
            <summary>Establecer el shim de BZip2OutputStream.BsPutIntVS(Int32 numBits, Int32 c)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.BsPutUCharInt32">
            <summary>Establecer el shim de BZip2OutputStream.BsPutUChar(Int32 c)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.BsPutintInt32">
            <summary>Establecer el shim de BZip2OutputStream.BsPutint(Int32 u)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.BsSetStreamStream">
            <summary>Establecer el shim de BZip2OutputStream.BsSetStream(Stream stream)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.BsWInt32Int32">
            <summary>Establecer el shim de BZip2OutputStream.BsW(Int32 n, Int32 v)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.BytesWrittenGet">
            <summary>Establecer el shim de BZip2OutputStream.get_BytesWritten()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.CanReadGet">
            <summary>Establecer el shim de BZip2OutputStream.get_CanRead()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.CanSeekGet">
            <summary>Establecer el shim de BZip2OutputStream.get_CanSeek()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.CanWriteGet">
            <summary>Establecer el shim de BZip2OutputStream.get_CanWrite()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.Close">
            <summary>Establecer el shim de BZip2OutputStream.Close()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.DisposeBoolean">
            <summary>Establecer el shim de BZip2OutputStream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.DoReversibleTransformation">
            <summary>Establecer el shim de BZip2OutputStream.DoReversibleTransformation()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.EndBlock">
            <summary>Establecer el shim de BZip2OutputStream.EndBlock()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.EndCompression">
            <summary>Establecer el shim de BZip2OutputStream.EndCompression()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.Flush">
            <summary>Establecer el shim de BZip2OutputStream.Flush()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.FullGtUInt32Int32">
            <summary>Establecer el shim de BZip2OutputStream.FullGtU(Int32 i1, Int32 i2)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.GenerateMTFValues">
            <summary>Establecer el shim de BZip2OutputStream.GenerateMTFValues()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.InitBlock">
            <summary>Establecer el shim de BZip2OutputStream.InitBlock()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.Initialize">
            <summary>Establecer el shim de BZip2OutputStream.Initialize()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.IsStreamOwnerGet">
            <summary>Establecer el shim de BZip2OutputStream.get_IsStreamOwner()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.IsStreamOwnerSetBoolean">
            <summary>Establecer el shim de BZip2OutputStream.set_IsStreamOwner(Boolean value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.LengthGet">
            <summary>Establecer el shim de BZip2OutputStream.get_Length()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.MainSort">
            <summary>Establecer el shim de BZip2OutputStream.MainSort()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.MakeMaps">
            <summary>Establecer el shim de BZip2OutputStream.MakeMaps()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.MoveToFrontCodeAndSend">
            <summary>Establecer el shim de BZip2OutputStream.MoveToFrontCodeAndSend()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.PositionGet">
            <summary>Establecer el shim de BZip2OutputStream.get_Position()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.PositionSetInt64">
            <summary>Establecer el shim de BZip2OutputStream.set_Position(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.QSort3Int32Int32Int32">
            <summary>Establecer el shim de BZip2OutputStream.QSort3(Int32 loSt, Int32 hiSt, Int32 dSt)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.RandomiseBlock">
            <summary>Establecer el shim de BZip2OutputStream.RandomiseBlock()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.ReadByte">
            <summary>Establecer el shim de BZip2OutputStream.ReadByte()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.ReadByteArrayInt32Int32">
            <summary>Establecer el shim de BZip2OutputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.SeekInt64SeekOrigin">
            <summary>Establecer el shim de BZip2OutputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.SendMTFValues">
            <summary>Establecer el shim de BZip2OutputStream.SendMTFValues()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.SetLengthInt64">
            <summary>Establecer el shim de BZip2OutputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.SimpleSortInt32Int32Int32">
            <summary>Establecer el shim de BZip2OutputStream.SimpleSort(Int32 lo, Int32 hi, Int32 d)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.VswapInt32Int32Int32">
            <summary>Establecer el shim de BZip2OutputStream.Vswap(Int32 p1, Int32 p2, Int32 n)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.WriteByteArrayInt32Int32">
            <summary>Establecer el shim de BZip2OutputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.WriteByteByte">
            <summary>Establecer el shim de BZip2OutputStream.WriteByte(Byte value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.WriteRun">
            <summary>Establecer el shim de BZip2OutputStream.WriteRun()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2Exception">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.BZip2.BZip2Exception</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2Exception.#ctor">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2Exception.#ctor(System.String)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2Exception.#ctor(System.String,System.Exception)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2Exception.AttachBackingFieldToHelpLink">
            <summary>Asocia delegados para emular StubBZip2Exception.HelpLink como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2Exception.AttachBackingFieldToSource">
            <summary>Asocia delegados para emular StubBZip2Exception.Source como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2Exception.DataGet">
            <summary>Establecer el stub de Exception.get_Data()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2Exception.GetBaseException">
            <summary>Establecer el stub de Exception.GetBaseException()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2Exception.GetBaseException01">
            <summary>Establecer el stub de Exception.GetBaseException()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Establecer el stub de Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2Exception.GetObjectDataSerializationInfoStreamingContext">
            <summary>Establecer el stub de Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2Exception.HelpLinkGet">
            <summary>Establecer el stub de Exception.get_HelpLink()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2Exception.HelpLinkSetString">
            <summary>Establecer el stub de Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2Exception.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubBZip2Exception</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2Exception.MessageGet">
            <summary>Establecer el stub de Exception.get_Message()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2Exception.SourceGet">
            <summary>Establecer el stub de Exception.get_Source()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2Exception.SourceSetString">
            <summary>Establecer el stub de Exception.set_Source(String value)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2Exception.StackTraceGet">
            <summary>Establecer el stub de Exception.get_StackTrace()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2Exception.ToString">
            <summary>Establecer el stub de Exception.ToString()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2Exception.ToString01">
            <summary>Establecer el stub de Exception.ToString()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2Exception.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2Exception.Data">
            <summary>Establecer el stub de Exception.get_Data()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2Exception.HelpLink">
            <summary>Establecer el stub de Exception.get_HelpLink()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2Exception.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2Exception.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2Exception.Message">
            <summary>Establecer el stub de Exception.get_Message()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2Exception.Source">
            <summary>Establecer el stub de Exception.get_Source()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2Exception.StackTrace">
            <summary>Establecer el stub de Exception.get_StackTrace()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.BZip2.BZip2InputStream</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.#ctor(System.IO.Stream)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.AttachBackingFieldToPosition">
            <summary>Asocia delegados para emular StubBZip2InputStream.Position como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.AttachBackingFieldToReadTimeout">
            <summary>Asocia delegados para emular StubBZip2InputStream.ReadTimeout como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.AttachBackingFieldToWriteTimeout">
            <summary>Asocia delegados para emular StubBZip2InputStream.WriteTimeout como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Establecer el stub de Stream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.BeginReadByteArrayInt32Int32AsyncCallbackObject">
            <summary>Establecer el stub de Stream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Establecer el stub de Stream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.BeginWriteByteArrayInt32Int32AsyncCallbackObject">
            <summary>Establecer el stub de Stream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.CanReadGet">
            <summary>Establecer el stub de BZip2InputStream.get_CanRead()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.CanSeekGet">
            <summary>Establecer el stub de BZip2InputStream.get_CanSeek()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.CanTimeoutGet">
            <summary>Establecer el stub de Stream.get_CanTimeout()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.CanWriteGet">
            <summary>Establecer el stub de BZip2InputStream.get_CanWrite()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.Close">
            <summary>Establecer el stub de BZip2InputStream.Close()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.Close01">
            <summary>Establecer el stub de BZip2InputStream.Close()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.CreateWaitHandle">
            <summary>Establecer el stub de Stream.CreateWaitHandle()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.CreateWaitHandle01">
            <summary>Establecer el stub de Stream.CreateWaitHandle()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.Dispose(System.Boolean)">
            <summary>Establecer el stub de Stream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.DisposeBoolean">
            <summary>Establecer el stub de Stream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.EndRead(System.IAsyncResult)">
            <summary>Establecer el stub de Stream.EndRead(IAsyncResult asyncResult)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.EndReadIAsyncResult">
            <summary>Establecer el stub de Stream.EndRead(IAsyncResult asyncResult)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.EndWrite(System.IAsyncResult)">
            <summary>Establecer el stub de Stream.EndWrite(IAsyncResult asyncResult)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.EndWriteIAsyncResult">
            <summary>Establecer el stub de Stream.EndWrite(IAsyncResult asyncResult)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.Flush">
            <summary>Establecer el stub de BZip2InputStream.Flush()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.Flush01">
            <summary>Establecer el stub de BZip2InputStream.Flush()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubBZip2InputStream</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.LengthGet">
            <summary>Establecer el stub de BZip2InputStream.get_Length()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.ObjectInvariant">
            <summary>Establecer el stub de Stream.ObjectInvariant()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.ObjectInvariant01">
            <summary>Establecer el stub de Stream.ObjectInvariant()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.PositionGet">
            <summary>Establecer el stub de BZip2InputStream.get_Position()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.PositionSetInt64">
            <summary>Establecer el stub de BZip2InputStream.set_Position(Int64 value)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>Establecer el stub de BZip2InputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.ReadByte">
            <summary>Establecer el stub de BZip2InputStream.ReadByte()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.ReadByte01">
            <summary>Establecer el stub de BZip2InputStream.ReadByte()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.ReadByteArrayInt32Int32">
            <summary>Establecer el stub de BZip2InputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.ReadTimeoutGet">
            <summary>Establecer el stub de Stream.get_ReadTimeout()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.ReadTimeoutSetInt32">
            <summary>Establecer el stub de Stream.set_ReadTimeout(Int32 value)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>Establecer el stub de BZip2InputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.SeekInt64SeekOrigin">
            <summary>Establecer el stub de BZip2InputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.SetLength(System.Int64)">
            <summary>Establecer el stub de BZip2InputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.SetLengthInt64">
            <summary>Establecer el stub de BZip2InputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Establecer el stub de BZip2InputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.WriteByte(System.Byte)">
            <summary>Establecer el stub de BZip2InputStream.WriteByte(Byte value)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.WriteByteArrayInt32Int32">
            <summary>Establecer el stub de BZip2InputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.WriteByteByte">
            <summary>Establecer el stub de BZip2InputStream.WriteByte(Byte value)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.WriteTimeoutGet">
            <summary>Establecer el stub de Stream.get_WriteTimeout()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.WriteTimeoutSetInt32">
            <summary>Establecer el stub de Stream.set_WriteTimeout(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.CanRead">
            <summary>Establecer el stub de BZip2InputStream.get_CanRead()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.CanSeek">
            <summary>Establecer el stub de BZip2InputStream.get_CanSeek()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.CanTimeout">
            <summary>Establecer el stub de Stream.get_CanTimeout()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.CanWrite">
            <summary>Establecer el stub de BZip2InputStream.get_CanWrite()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.Length">
            <summary>Establecer el stub de BZip2InputStream.get_Length()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.Position">
            <summary>Establecer el stub de BZip2InputStream.get_Position()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.ReadTimeout">
            <summary>Establecer el stub de Stream.get_ReadTimeout()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2InputStream.WriteTimeout">
            <summary>Establecer el stub de Stream.get_WriteTimeout()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.#ctor(System.IO.Stream)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.AttachBackingFieldToPosition">
            <summary>Asocia delegados para emular StubBZip2OutputStream.Position como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.AttachBackingFieldToReadTimeout">
            <summary>Asocia delegados para emular StubBZip2OutputStream.ReadTimeout como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.AttachBackingFieldToWriteTimeout">
            <summary>Asocia delegados para emular StubBZip2OutputStream.WriteTimeout como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Establecer el stub de Stream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.BeginReadByteArrayInt32Int32AsyncCallbackObject">
            <summary>Establecer el stub de Stream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Establecer el stub de Stream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.BeginWriteByteArrayInt32Int32AsyncCallbackObject">
            <summary>Establecer el stub de Stream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.CanReadGet">
            <summary>Establecer el stub de BZip2OutputStream.get_CanRead()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.CanSeekGet">
            <summary>Establecer el stub de BZip2OutputStream.get_CanSeek()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.CanTimeoutGet">
            <summary>Establecer el stub de Stream.get_CanTimeout()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.CanWriteGet">
            <summary>Establecer el stub de BZip2OutputStream.get_CanWrite()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.Close">
            <summary>Establecer el stub de BZip2OutputStream.Close()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.Close01">
            <summary>Establecer el stub de BZip2OutputStream.Close()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.CreateWaitHandle">
            <summary>Establecer el stub de Stream.CreateWaitHandle()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.CreateWaitHandle01">
            <summary>Establecer el stub de Stream.CreateWaitHandle()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.Dispose(System.Boolean)">
            <summary>Establecer el stub de BZip2OutputStream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.DisposeBoolean">
            <summary>Establecer el stub de BZip2OutputStream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.EndRead(System.IAsyncResult)">
            <summary>Establecer el stub de Stream.EndRead(IAsyncResult asyncResult)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.EndReadIAsyncResult">
            <summary>Establecer el stub de Stream.EndRead(IAsyncResult asyncResult)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.EndWrite(System.IAsyncResult)">
            <summary>Establecer el stub de Stream.EndWrite(IAsyncResult asyncResult)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.EndWriteIAsyncResult">
            <summary>Establecer el stub de Stream.EndWrite(IAsyncResult asyncResult)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.Flush">
            <summary>Establecer el stub de BZip2OutputStream.Flush()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.Flush01">
            <summary>Establecer el stub de BZip2OutputStream.Flush()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubBZip2OutputStream</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.LengthGet">
            <summary>Establecer el stub de BZip2OutputStream.get_Length()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.ObjectInvariant">
            <summary>Establecer el stub de Stream.ObjectInvariant()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.ObjectInvariant01">
            <summary>Establecer el stub de Stream.ObjectInvariant()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.PositionGet">
            <summary>Establecer el stub de BZip2OutputStream.get_Position()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.PositionSetInt64">
            <summary>Establecer el stub de BZip2OutputStream.set_Position(Int64 value)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>Establecer el stub de BZip2OutputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.ReadByte">
            <summary>Establecer el stub de BZip2OutputStream.ReadByte()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.ReadByte01">
            <summary>Establecer el stub de BZip2OutputStream.ReadByte()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.ReadByteArrayInt32Int32">
            <summary>Establecer el stub de BZip2OutputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.ReadTimeoutGet">
            <summary>Establecer el stub de Stream.get_ReadTimeout()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.ReadTimeoutSetInt32">
            <summary>Establecer el stub de Stream.set_ReadTimeout(Int32 value)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>Establecer el stub de BZip2OutputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.SeekInt64SeekOrigin">
            <summary>Establecer el stub de BZip2OutputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.SetLength(System.Int64)">
            <summary>Establecer el stub de BZip2OutputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.SetLengthInt64">
            <summary>Establecer el stub de BZip2OutputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Establecer el stub de BZip2OutputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.WriteByte(System.Byte)">
            <summary>Establecer el stub de BZip2OutputStream.WriteByte(Byte value)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.WriteByteArrayInt32Int32">
            <summary>Establecer el stub de BZip2OutputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.WriteByteByte">
            <summary>Establecer el stub de BZip2OutputStream.WriteByte(Byte value)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.WriteTimeoutGet">
            <summary>Establecer el stub de Stream.get_WriteTimeout()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.WriteTimeoutSetInt32">
            <summary>Establecer el stub de Stream.set_WriteTimeout(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.CanRead">
            <summary>Establecer el stub de BZip2OutputStream.get_CanRead()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.CanSeek">
            <summary>Establecer el stub de BZip2OutputStream.get_CanSeek()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.CanTimeout">
            <summary>Establecer el stub de Stream.get_CanTimeout()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.CanWrite">
            <summary>Establecer el stub de BZip2OutputStream.get_CanWrite()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.Length">
            <summary>Establecer el stub de BZip2OutputStream.get_Length()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.Position">
            <summary>Establecer el stub de BZip2OutputStream.get_Position()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.ReadTimeout">
            <summary>Establecer el stub de Stream.get_ReadTimeout()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.Fakes.StubBZip2OutputStream.WriteTimeout">
            <summary>Establecer el stub de Stream.get_WriteTimeout()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimAdler32">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Checksums.Adler32</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimAdler32.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimAdler32.#ctor(ICSharpCode.SharpZipLib.Checksums.Adler32)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimAdler32.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimAdler32.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimAdler32.Bind(ICSharpCode.SharpZipLib.Checksums.IChecksum)">
            <summary>Asocia los miembros de la interfaz a las correcciones de compatibilidad (shim).</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimAdler32.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimAdler32.Constructor">
            <summary>Establecer el shim de Adler32.Adler32()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimAdler32.Reset">
            <summary>Establecer el shim de Adler32.Reset()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimAdler32.UpdateByteArray">
            <summary>Establecer el shim de Adler32.Update(Byte[] buffer)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimAdler32.UpdateByteArrayInt32Int32">
            <summary>Establecer el shim de Adler32.Update(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimAdler32.UpdateInt32">
            <summary>Establecer el shim de Adler32.Update(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimAdler32.ValueGet">
            <summary>Establecer el shim de Adler32.get_Value()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimAdler32.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimAdler32.AllInstances.Reset">
            <summary>Establecer el shim de Adler32.Reset()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimAdler32.AllInstances.UpdateByteArray">
            <summary>Establecer el shim de Adler32.Update(Byte[] buffer)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimAdler32.AllInstances.UpdateByteArrayInt32Int32">
            <summary>Establecer el shim de Adler32.Update(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimAdler32.AllInstances.UpdateInt32">
            <summary>Establecer el shim de Adler32.Update(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimAdler32.AllInstances.ValueGet">
            <summary>Establecer el shim de Adler32.get_Value()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimCrc32">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Checksums.Crc32</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimCrc32.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimCrc32.#ctor(ICSharpCode.SharpZipLib.Checksums.Crc32)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimCrc32.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimCrc32.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimCrc32.Bind(ICSharpCode.SharpZipLib.Checksums.IChecksum)">
            <summary>Asocia los miembros de la interfaz a las correcciones de compatibilidad (shim).</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimCrc32.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimCrc32.ComputeCrc32UInt32Byte">
            <summary>Establecer el shim de Crc32.ComputeCrc32(UInt32 oldCrc, Byte value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimCrc32.Constructor">
            <summary>Establecer el shim de Crc32.Crc32()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimCrc32.Reset">
            <summary>Establecer el shim de Crc32.Reset()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimCrc32.StaticConstructor">
            <summary>Establecer el shim de Crc32.Crc32()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimCrc32.UpdateByteArray">
            <summary>Establecer el shim de Crc32.Update(Byte[] buffer)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimCrc32.UpdateByteArrayInt32Int32">
            <summary>Establecer el shim de Crc32.Update(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimCrc32.UpdateInt32">
            <summary>Establecer el shim de Crc32.Update(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimCrc32.ValueGet">
            <summary>Establecer el shim de Crc32.get_Value()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimCrc32.ValueSetInt64">
            <summary>Establecer el shim de Crc32.set_Value(Int64 value)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimCrc32.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimCrc32.AllInstances.Reset">
            <summary>Establecer el shim de Crc32.Reset()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimCrc32.AllInstances.UpdateByteArray">
            <summary>Establecer el shim de Crc32.Update(Byte[] buffer)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimCrc32.AllInstances.UpdateByteArrayInt32Int32">
            <summary>Establecer el shim de Crc32.Update(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimCrc32.AllInstances.UpdateInt32">
            <summary>Establecer el shim de Crc32.Update(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimCrc32.AllInstances.ValueGet">
            <summary>Establecer el shim de Crc32.get_Value()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimCrc32.AllInstances.ValueSetInt64">
            <summary>Establecer el shim de Crc32.set_Value(Int64 value)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimStrangeCRC">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Checksums.StrangeCRC</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimStrangeCRC.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimStrangeCRC.#ctor(ICSharpCode.SharpZipLib.Checksums.StrangeCRC)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimStrangeCRC.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimStrangeCRC.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimStrangeCRC.Bind(ICSharpCode.SharpZipLib.Checksums.IChecksum)">
            <summary>Asocia los miembros de la interfaz a las correcciones de compatibilidad (shim).</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimStrangeCRC.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimStrangeCRC.Constructor">
            <summary>Establecer el shim de StrangeCRC.StrangeCRC()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimStrangeCRC.Reset">
            <summary>Establecer el shim de StrangeCRC.Reset()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimStrangeCRC.StaticConstructor">
            <summary>Establecer el shim de StrangeCRC.StrangeCRC()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimStrangeCRC.UpdateByteArray">
            <summary>Establecer el shim de StrangeCRC.Update(Byte[] buffer)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimStrangeCRC.UpdateByteArrayInt32Int32">
            <summary>Establecer el shim de StrangeCRC.Update(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimStrangeCRC.UpdateInt32">
            <summary>Establecer el shim de StrangeCRC.Update(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimStrangeCRC.ValueGet">
            <summary>Establecer el shim de StrangeCRC.get_Value()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimStrangeCRC.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimStrangeCRC.AllInstances.Reset">
            <summary>Establecer el shim de StrangeCRC.Reset()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimStrangeCRC.AllInstances.UpdateByteArray">
            <summary>Establecer el shim de StrangeCRC.Update(Byte[] buffer)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimStrangeCRC.AllInstances.UpdateByteArrayInt32Int32">
            <summary>Establecer el shim de StrangeCRC.Update(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimStrangeCRC.AllInstances.UpdateInt32">
            <summary>Establecer el shim de StrangeCRC.Update(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Fakes.ShimStrangeCRC.AllInstances.ValueGet">
            <summary>Establecer el shim de StrangeCRC.get_Value()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Checksums.Fakes.StubIChecksum">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Checksums.IChecksum</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Fakes.StubIChecksum.#ctor">
            <summary>Inicializa una nueva instancia de type StubIChecksum</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Fakes.StubIChecksum.icscszl::ICSharpCode#SharpZipLib#Checksums#IChecksum#Reset">
            <summary>Establecer el stub de IChecksum.Reset()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Fakes.StubIChecksum.icscszl::ICSharpCode#SharpZipLib#Checksums#IChecksum#Update(System.Byte[])">
            <summary>Establecer el stub de IChecksum.Update(Byte[] buffer)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Fakes.StubIChecksum.icscszl::ICSharpCode#SharpZipLib#Checksums#IChecksum#Update(System.Int32)">
            <summary>Establecer el stub de IChecksum.Update(Int32 value)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Fakes.StubIChecksum.icscszl::ICSharpCode#SharpZipLib#Checksums#IChecksum#Update(System.Byte[],System.Int32,System.Int32)">
            <summary>Establecer el stub de IChecksum.Update(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Checksums.Fakes.StubIChecksum.Reset">
            <summary>Establecer el stub de IChecksum.Reset()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Checksums.Fakes.StubIChecksum.UpdateByteArray">
            <summary>Establecer el stub de IChecksum.Update(Byte[] buffer)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Checksums.Fakes.StubIChecksum.UpdateByteArrayInt32Int32">
            <summary>Establecer el stub de IChecksum.Update(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Checksums.Fakes.StubIChecksum.UpdateInt32">
            <summary>Establecer el stub de IChecksum.Update(Int32 value)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Checksums.Fakes.StubIChecksum.ValueGet">
            <summary>Establecer el stub de IChecksum.get_Value()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Fakes.StubIChecksum.icscszl::ICSharpCode#SharpZipLib#Checksums#IChecksum#Value">
            <summary>Establecer el stub de IChecksum.get_Value()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Checksums.Fakes.StubStrangeCRC">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Checksums.StrangeCRC</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Fakes.StubStrangeCRC.#ctor">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Fakes.StubStrangeCRC.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubStrangeCRC</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Fakes.StubStrangeCRC.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Fakes.StubStrangeCRC.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Fakes.StubStrangeCRC.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.Fakes.ShimDirectoryEventArgs">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Core.DirectoryEventArgs</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.ShimDirectoryEventArgs.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.ShimDirectoryEventArgs.#ctor(ICSharpCode.SharpZipLib.Core.DirectoryEventArgs)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.ShimDirectoryEventArgs.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.ShimDirectoryEventArgs.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimDirectoryEventArgs.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimDirectoryEventArgs.ConstructorStringBoolean">
            <summary>Establecer el shim de DirectoryEventArgs.DirectoryEventArgs(String name, Boolean hasMatchingFiles)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimDirectoryEventArgs.HasMatchingFilesGet">
            <summary>Establecer el shim de DirectoryEventArgs.get_HasMatchingFiles()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.Fakes.ShimDirectoryEventArgs.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimDirectoryEventArgs.AllInstances.HasMatchingFilesGet">
            <summary>Establecer el shim de DirectoryEventArgs.get_HasMatchingFiles()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.Fakes.ShimExtendedPathFilter">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Core.ExtendedPathFilter</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.ShimExtendedPathFilter.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.ShimExtendedPathFilter.#ctor(ICSharpCode.SharpZipLib.Core.ExtendedPathFilter)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.ShimExtendedPathFilter.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.ShimExtendedPathFilter.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.ShimExtendedPathFilter.Bind(ICSharpCode.SharpZipLib.Core.IScanFilter)">
            <summary>Asocia los miembros de la interfaz a las correcciones de compatibilidad (shim).</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimExtendedPathFilter.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimExtendedPathFilter.ConstructorStringDateTimeDateTime">
            <summary>Establecer el shim de ExtendedPathFilter.ExtendedPathFilter(String filter, DateTime minDate, DateTime maxDate)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimExtendedPathFilter.ConstructorStringInt64Int64">
            <summary>Establecer el shim de ExtendedPathFilter.ExtendedPathFilter(String filter, Int64 minSize, Int64 maxSize)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimExtendedPathFilter.ConstructorStringInt64Int64DateTimeDateTime">
            <summary>Establecer el shim de ExtendedPathFilter.ExtendedPathFilter(String filter, Int64 minSize, Int64 maxSize, DateTime minDate, DateTime maxDate)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimExtendedPathFilter.IsMatchString">
            <summary>Establecer el shim de ExtendedPathFilter.IsMatch(String name)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimExtendedPathFilter.MaxDateGet">
            <summary>Establecer el shim de ExtendedPathFilter.get_MaxDate()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimExtendedPathFilter.MaxDateSetDateTime">
            <summary>Establecer el shim de ExtendedPathFilter.set_MaxDate(DateTime value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimExtendedPathFilter.MaxSizeGet">
            <summary>Establecer el shim de ExtendedPathFilter.get_MaxSize()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimExtendedPathFilter.MaxSizeSetInt64">
            <summary>Establecer el shim de ExtendedPathFilter.set_MaxSize(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimExtendedPathFilter.MinDateGet">
            <summary>Establecer el shim de ExtendedPathFilter.get_MinDate()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimExtendedPathFilter.MinDateSetDateTime">
            <summary>Establecer el shim de ExtendedPathFilter.set_MinDate(DateTime value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimExtendedPathFilter.MinSizeGet">
            <summary>Establecer el shim de ExtendedPathFilter.get_MinSize()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimExtendedPathFilter.MinSizeSetInt64">
            <summary>Establecer el shim de ExtendedPathFilter.set_MinSize(Int64 value)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.Fakes.ShimExtendedPathFilter.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimExtendedPathFilter.AllInstances.IsMatchString">
            <summary>Establecer el shim de ExtendedPathFilter.IsMatch(String name)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimExtendedPathFilter.AllInstances.MaxDateGet">
            <summary>Establecer el shim de ExtendedPathFilter.get_MaxDate()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimExtendedPathFilter.AllInstances.MaxDateSetDateTime">
            <summary>Establecer el shim de ExtendedPathFilter.set_MaxDate(DateTime value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimExtendedPathFilter.AllInstances.MaxSizeGet">
            <summary>Establecer el shim de ExtendedPathFilter.get_MaxSize()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimExtendedPathFilter.AllInstances.MaxSizeSetInt64">
            <summary>Establecer el shim de ExtendedPathFilter.set_MaxSize(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimExtendedPathFilter.AllInstances.MinDateGet">
            <summary>Establecer el shim de ExtendedPathFilter.get_MinDate()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimExtendedPathFilter.AllInstances.MinDateSetDateTime">
            <summary>Establecer el shim de ExtendedPathFilter.set_MinDate(DateTime value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimExtendedPathFilter.AllInstances.MinSizeGet">
            <summary>Establecer el shim de ExtendedPathFilter.get_MinSize()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimExtendedPathFilter.AllInstances.MinSizeSetInt64">
            <summary>Establecer el shim de ExtendedPathFilter.set_MinSize(Int64 value)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.Fakes.ShimFileSystemScanner">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Core.FileSystemScanner</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.ShimFileSystemScanner.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.ShimFileSystemScanner.#ctor(ICSharpCode.SharpZipLib.Core.FileSystemScanner)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.ShimFileSystemScanner.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.ShimFileSystemScanner.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimFileSystemScanner.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimFileSystemScanner.ConstructorIScanFilter">
            <summary>Establecer el shim de FileSystemScanner.FileSystemScanner(IScanFilter fileFilter)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimFileSystemScanner.ConstructorIScanFilterIScanFilter">
            <summary>Establecer el shim de FileSystemScanner.FileSystemScanner(IScanFilter fileFilter, IScanFilter directoryFilter)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimFileSystemScanner.ConstructorString">
            <summary>Establecer el shim de FileSystemScanner.FileSystemScanner(String filter)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimFileSystemScanner.ConstructorStringString">
            <summary>Establecer el shim de FileSystemScanner.FileSystemScanner(String fileFilter, String directoryFilter)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimFileSystemScanner.OnCompleteFileString">
            <summary>Establecer el shim de FileSystemScanner.OnCompleteFile(String file)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimFileSystemScanner.OnDirectoryFailureStringException">
            <summary>Establecer el shim de FileSystemScanner.OnDirectoryFailure(String directory, Exception e)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimFileSystemScanner.OnFileFailureStringException">
            <summary>Establecer el shim de FileSystemScanner.OnFileFailure(String file, Exception e)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimFileSystemScanner.OnProcessDirectoryStringBoolean">
            <summary>Establecer el shim de FileSystemScanner.OnProcessDirectory(String directory, Boolean hasMatchingFiles)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimFileSystemScanner.OnProcessFileString">
            <summary>Establecer el shim de FileSystemScanner.OnProcessFile(String file)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimFileSystemScanner.ScanDirStringBoolean">
            <summary>Establecer el shim de FileSystemScanner.ScanDir(String directory, Boolean recurse)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimFileSystemScanner.ScanStringBoolean">
            <summary>Establecer el shim de FileSystemScanner.Scan(String directory, Boolean recurse)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.Fakes.ShimFileSystemScanner.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimFileSystemScanner.AllInstances.OnCompleteFileString">
            <summary>Establecer el shim de FileSystemScanner.OnCompleteFile(String file)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimFileSystemScanner.AllInstances.OnDirectoryFailureStringException">
            <summary>Establecer el shim de FileSystemScanner.OnDirectoryFailure(String directory, Exception e)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimFileSystemScanner.AllInstances.OnFileFailureStringException">
            <summary>Establecer el shim de FileSystemScanner.OnFileFailure(String file, Exception e)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimFileSystemScanner.AllInstances.OnProcessDirectoryStringBoolean">
            <summary>Establecer el shim de FileSystemScanner.OnProcessDirectory(String directory, Boolean hasMatchingFiles)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimFileSystemScanner.AllInstances.OnProcessFileString">
            <summary>Establecer el shim de FileSystemScanner.OnProcessFile(String file)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimFileSystemScanner.AllInstances.ScanDirStringBoolean">
            <summary>Establecer el shim de FileSystemScanner.ScanDir(String directory, Boolean recurse)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimFileSystemScanner.AllInstances.ScanStringBoolean">
            <summary>Establecer el shim de FileSystemScanner.Scan(String directory, Boolean recurse)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.Fakes.ShimNameFilter">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Core.NameFilter</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.ShimNameFilter.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.ShimNameFilter.#ctor(ICSharpCode.SharpZipLib.Core.NameFilter)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.ShimNameFilter.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.ShimNameFilter.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.ShimNameFilter.Bind(ICSharpCode.SharpZipLib.Core.IScanFilter)">
            <summary>Asocia los miembros de la interfaz a las correcciones de compatibilidad (shim).</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimNameFilter.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimNameFilter.Compile">
            <summary>Establecer el shim de NameFilter.Compile()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimNameFilter.ConstructorString">
            <summary>Establecer el shim de NameFilter.NameFilter(String filter)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimNameFilter.IsExcludedString">
            <summary>Establecer el shim de NameFilter.IsExcluded(String name)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimNameFilter.IsIncludedString">
            <summary>Establecer el shim de NameFilter.IsIncluded(String name)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimNameFilter.IsMatchString">
            <summary>Establecer el shim de NameFilter.IsMatch(String name)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimNameFilter.IsValidExpressionString">
            <summary>Establecer el shim de NameFilter.IsValidExpression(String expression)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimNameFilter.IsValidFilterExpressionString">
            <summary>Establecer el shim de NameFilter.IsValidFilterExpression(String toTest)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimNameFilter.SplitQuotedString">
            <summary>Establecer el shim de NameFilter.SplitQuoted(String original)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimNameFilter.ToString">
            <summary>Establecer el shim de NameFilter.ToString()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.Fakes.ShimNameFilter.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimNameFilter.AllInstances.Compile">
            <summary>Establecer el shim de NameFilter.Compile()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimNameFilter.AllInstances.IsExcludedString">
            <summary>Establecer el shim de NameFilter.IsExcluded(String name)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimNameFilter.AllInstances.IsIncludedString">
            <summary>Establecer el shim de NameFilter.IsIncluded(String name)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimNameFilter.AllInstances.IsMatchString">
            <summary>Establecer el shim de NameFilter.IsMatch(String name)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimNameFilter.AllInstances.ToString01">
            <summary>Establecer el shim de NameFilter.ToString()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.Fakes.ShimPathFilter">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Core.PathFilter</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.ShimPathFilter.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.ShimPathFilter.#ctor(ICSharpCode.SharpZipLib.Core.PathFilter)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.ShimPathFilter.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.ShimPathFilter.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.ShimPathFilter.Bind(ICSharpCode.SharpZipLib.Core.IScanFilter)">
            <summary>Asocia los miembros de la interfaz a las correcciones de compatibilidad (shim).</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimPathFilter.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimPathFilter.ConstructorString">
            <summary>Establecer el shim de PathFilter.PathFilter(String filter)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimPathFilter.IsMatchString">
            <summary>Establecer el shim de PathFilter.IsMatch(String name)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.Fakes.ShimPathFilter.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimPathFilter.AllInstances.IsMatchString">
            <summary>Establecer el shim de PathFilter.IsMatch(String name)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.Fakes.ShimProgressEventArgs">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Core.ProgressEventArgs</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.ShimProgressEventArgs.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.ShimProgressEventArgs.#ctor(ICSharpCode.SharpZipLib.Core.ProgressEventArgs)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.ShimProgressEventArgs.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.ShimProgressEventArgs.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimProgressEventArgs.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimProgressEventArgs.ConstructorStringInt64Int64">
            <summary>Establecer el shim de ProgressEventArgs.ProgressEventArgs(String name, Int64 processed, Int64 target)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimProgressEventArgs.ContinueRunningGet">
            <summary>Establecer el shim de ProgressEventArgs.get_ContinueRunning()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimProgressEventArgs.ContinueRunningSetBoolean">
            <summary>Establecer el shim de ProgressEventArgs.set_ContinueRunning(Boolean value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimProgressEventArgs.NameGet">
            <summary>Establecer el shim de ProgressEventArgs.get_Name()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimProgressEventArgs.PercentCompleteGet">
            <summary>Establecer el shim de ProgressEventArgs.get_PercentComplete()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimProgressEventArgs.ProcessedGet">
            <summary>Establecer el shim de ProgressEventArgs.get_Processed()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimProgressEventArgs.TargetGet">
            <summary>Establecer el shim de ProgressEventArgs.get_Target()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.Fakes.ShimProgressEventArgs.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimProgressEventArgs.AllInstances.ContinueRunningGet">
            <summary>Establecer el shim de ProgressEventArgs.get_ContinueRunning()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimProgressEventArgs.AllInstances.ContinueRunningSetBoolean">
            <summary>Establecer el shim de ProgressEventArgs.set_ContinueRunning(Boolean value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimProgressEventArgs.AllInstances.NameGet">
            <summary>Establecer el shim de ProgressEventArgs.get_Name()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimProgressEventArgs.AllInstances.PercentCompleteGet">
            <summary>Establecer el shim de ProgressEventArgs.get_PercentComplete()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimProgressEventArgs.AllInstances.ProcessedGet">
            <summary>Establecer el shim de ProgressEventArgs.get_Processed()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimProgressEventArgs.AllInstances.TargetGet">
            <summary>Establecer el shim de ProgressEventArgs.get_Target()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.Fakes.ShimScanEventArgs">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Core.ScanEventArgs</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.ShimScanEventArgs.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.ShimScanEventArgs.#ctor(ICSharpCode.SharpZipLib.Core.ScanEventArgs)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.ShimScanEventArgs.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.ShimScanEventArgs.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimScanEventArgs.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimScanEventArgs.ConstructorString">
            <summary>Establecer el shim de ScanEventArgs.ScanEventArgs(String name)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimScanEventArgs.ContinueRunningGet">
            <summary>Establecer el shim de ScanEventArgs.get_ContinueRunning()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimScanEventArgs.ContinueRunningSetBoolean">
            <summary>Establecer el shim de ScanEventArgs.set_ContinueRunning(Boolean value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimScanEventArgs.NameGet">
            <summary>Establecer el shim de ScanEventArgs.get_Name()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.Fakes.ShimScanEventArgs.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimScanEventArgs.AllInstances.ContinueRunningGet">
            <summary>Establecer el shim de ScanEventArgs.get_ContinueRunning()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimScanEventArgs.AllInstances.ContinueRunningSetBoolean">
            <summary>Establecer el shim de ScanEventArgs.set_ContinueRunning(Boolean value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimScanEventArgs.AllInstances.NameGet">
            <summary>Establecer el shim de ScanEventArgs.get_Name()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.Fakes.ShimScanFailureEventArgs">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.ShimScanFailureEventArgs.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.ShimScanFailureEventArgs.#ctor(ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.ShimScanFailureEventArgs.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.ShimScanFailureEventArgs.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimScanFailureEventArgs.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimScanFailureEventArgs.ConstructorStringException">
            <summary>Establecer el shim de ScanFailureEventArgs.ScanFailureEventArgs(String name, Exception e)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimScanFailureEventArgs.ContinueRunningGet">
            <summary>Establecer el shim de ScanFailureEventArgs.get_ContinueRunning()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimScanFailureEventArgs.ContinueRunningSetBoolean">
            <summary>Establecer el shim de ScanFailureEventArgs.set_ContinueRunning(Boolean value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimScanFailureEventArgs.ExceptionGet">
            <summary>Establecer el shim de ScanFailureEventArgs.get_Exception()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimScanFailureEventArgs.NameGet">
            <summary>Establecer el shim de ScanFailureEventArgs.get_Name()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.Fakes.ShimScanFailureEventArgs.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimScanFailureEventArgs.AllInstances.ContinueRunningGet">
            <summary>Establecer el shim de ScanFailureEventArgs.get_ContinueRunning()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimScanFailureEventArgs.AllInstances.ContinueRunningSetBoolean">
            <summary>Establecer el shim de ScanFailureEventArgs.set_ContinueRunning(Boolean value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimScanFailureEventArgs.AllInstances.ExceptionGet">
            <summary>Establecer el shim de ScanFailureEventArgs.get_Exception()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimScanFailureEventArgs.AllInstances.NameGet">
            <summary>Establecer el shim de ScanFailureEventArgs.get_Name()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.Fakes.ShimStreamUtils">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Core.StreamUtils</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.ShimStreamUtils.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.ShimStreamUtils.#ctor(ICSharpCode.SharpZipLib.Core.StreamUtils)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.ShimStreamUtils.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.ShimStreamUtils.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimStreamUtils.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimStreamUtils.Constructor">
            <summary>Establecer el shim de StreamUtils.StreamUtils()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimStreamUtils.CopyStreamStreamByteArray">
            <summary>Establecer el shim de StreamUtils.Copy(Stream source, Stream destination, Byte[] buffer)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimStreamUtils.CopyStreamStreamByteArrayProgressHandlerTimeSpanObjectString">
            <summary>Establecer el shim de StreamUtils.Copy(Stream source, Stream destination, Byte[] buffer, ProgressHandler progressHandler, TimeSpan updateInterval, Object sender, String name)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimStreamUtils.CopyStreamStreamByteArrayProgressHandlerTimeSpanObjectStringInt64">
            <summary>Establecer el shim de StreamUtils.Copy(Stream source, Stream destination, Byte[] buffer, ProgressHandler progressHandler, TimeSpan updateInterval, Object sender, String name, Int64 fixedTarget)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimStreamUtils.ReadFullyStreamByteArray">
            <summary>Establecer el shim de StreamUtils.ReadFully(Stream stream, Byte[] buffer)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimStreamUtils.ReadFullyStreamByteArrayInt32Int32">
            <summary>Establecer el shim de StreamUtils.ReadFully(Stream stream, Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.Fakes.ShimStreamUtils.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.Fakes.ShimWindowsPathUtils">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Core.WindowsPathUtils</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.ShimWindowsPathUtils.#ctor(ICSharpCode.SharpZipLib.Core.WindowsPathUtils)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.ShimWindowsPathUtils.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.ShimWindowsPathUtils.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimWindowsPathUtils.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimWindowsPathUtils.Constructor">
            <summary>Establecer el shim de WindowsPathUtils.WindowsPathUtils()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.ShimWindowsPathUtils.DropPathRootString">
            <summary>Establecer el shim de WindowsPathUtils.DropPathRoot(String path)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.Fakes.ShimWindowsPathUtils.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.Fakes.StubDirectoryEventArgs">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Core.DirectoryEventArgs</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.StubDirectoryEventArgs.#ctor(System.String,System.Boolean)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.StubDirectoryEventArgs.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubDirectoryEventArgs</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.StubDirectoryEventArgs.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.StubDirectoryEventArgs.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.StubDirectoryEventArgs.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.Fakes.StubExtendedPathFilter">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Core.ExtendedPathFilter</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.StubExtendedPathFilter.#ctor(System.String,System.DateTime,System.DateTime)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.StubExtendedPathFilter.#ctor(System.String,System.Int64,System.Int64)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.StubExtendedPathFilter.#ctor(System.String,System.Int64,System.Int64,System.DateTime,System.DateTime)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.StubExtendedPathFilter.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubExtendedPathFilter</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.StubExtendedPathFilter.IsMatch(System.String)">
            <summary>Establecer el stub de ExtendedPathFilter.IsMatch(String name)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Core.Fakes.StubExtendedPathFilter.IsMatchString">
            <summary>Establecer el stub de ExtendedPathFilter.IsMatch(String name)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.StubExtendedPathFilter.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.StubExtendedPathFilter.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.StubExtendedPathFilter.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.Fakes.StubFileSystemScanner">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Core.FileSystemScanner</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.StubFileSystemScanner.#ctor(ICSharpCode.SharpZipLib.Core.IScanFilter)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.StubFileSystemScanner.#ctor(System.String)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.StubFileSystemScanner.#ctor(ICSharpCode.SharpZipLib.Core.IScanFilter,ICSharpCode.SharpZipLib.Core.IScanFilter)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.StubFileSystemScanner.#ctor(System.String,System.String)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.StubFileSystemScanner.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubFileSystemScanner</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.StubFileSystemScanner.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.StubFileSystemScanner.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.StubFileSystemScanner.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.Fakes.StubINameTransform">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Core.INameTransform</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.StubINameTransform.#ctor">
            <summary>Inicializa una nueva instancia de type StubINameTransform</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.StubINameTransform.icscszl::ICSharpCode#SharpZipLib#Core#INameTransform#TransformDirectory(System.String)">
            <summary>Establecer el stub de INameTransform.TransformDirectory(String name)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.StubINameTransform.icscszl::ICSharpCode#SharpZipLib#Core#INameTransform#TransformFile(System.String)">
            <summary>Establecer el stub de INameTransform.TransformFile(String name)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Core.Fakes.StubINameTransform.TransformDirectoryString">
            <summary>Establecer el stub de INameTransform.TransformDirectory(String name)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Core.Fakes.StubINameTransform.TransformFileString">
            <summary>Establecer el stub de INameTransform.TransformFile(String name)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.Fakes.StubIScanFilter">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Core.IScanFilter</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.StubIScanFilter.#ctor">
            <summary>Inicializa una nueva instancia de type StubIScanFilter</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.StubIScanFilter.icscszl::ICSharpCode#SharpZipLib#Core#IScanFilter#IsMatch(System.String)">
            <summary>Establecer el stub de IScanFilter.IsMatch(String name)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Core.Fakes.StubIScanFilter.IsMatchString">
            <summary>Establecer el stub de IScanFilter.IsMatch(String name)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.Fakes.StubNameFilter">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Core.NameFilter</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.StubNameFilter.#ctor(System.String)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.StubNameFilter.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubNameFilter</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.StubNameFilter.ToString">
            <summary>Establecer el stub de NameFilter.ToString()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Core.Fakes.StubNameFilter.ToString01">
            <summary>Establecer el stub de NameFilter.ToString()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.StubNameFilter.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.StubNameFilter.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.StubNameFilter.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.Fakes.StubPathFilter">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Core.PathFilter</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.StubPathFilter.#ctor(System.String)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.StubPathFilter.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubPathFilter</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.StubPathFilter.IsMatch(System.String)">
            <summary>Establecer el stub de PathFilter.IsMatch(String name)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Core.Fakes.StubPathFilter.IsMatchString">
            <summary>Establecer el stub de PathFilter.IsMatch(String name)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.StubPathFilter.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.StubPathFilter.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.StubPathFilter.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.Fakes.StubProgressEventArgs">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Core.ProgressEventArgs</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.StubProgressEventArgs.#ctor(System.String,System.Int64,System.Int64)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.StubProgressEventArgs.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubProgressEventArgs</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.StubProgressEventArgs.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.StubProgressEventArgs.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.StubProgressEventArgs.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.Fakes.StubScanEventArgs">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Core.ScanEventArgs</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.StubScanEventArgs.#ctor(System.String)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.StubScanEventArgs.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubScanEventArgs</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.StubScanEventArgs.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.StubScanEventArgs.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.StubScanEventArgs.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.Fakes.StubScanFailureEventArgs">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.StubScanFailureEventArgs.#ctor(System.String,System.Exception)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.Fakes.StubScanFailureEventArgs.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubScanFailureEventArgs</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.StubScanFailureEventArgs.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.StubScanFailureEventArgs.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.Fakes.StubScanFailureEventArgs.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Encryption.Fakes.ShimPkzipClassic">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Encryption.PkzipClassic</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.Fakes.ShimPkzipClassic.#ctor(ICSharpCode.SharpZipLib.Encryption.PkzipClassic)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.Fakes.ShimPkzipClassic.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.Fakes.ShimPkzipClassic.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.Fakes.ShimPkzipClassic.Bind(System.IDisposable)">
            <summary>Asocia los miembros de la interfaz a las correcciones de compatibilidad (shim).</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.Fakes.ShimPkzipClassic.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.Fakes.ShimPkzipClassic.Constructor">
            <summary>Establecer el shim de PkzipClassic.PkzipClassic()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.Fakes.ShimPkzipClassic.GenerateKeysByteArray">
            <summary>Establecer el shim de PkzipClassic.GenerateKeys(Byte[] seed)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Encryption.Fakes.ShimPkzipClassic.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Encryption.Fakes.ShimPkzipClassicManaged">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.Fakes.ShimPkzipClassicManaged.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.Fakes.ShimPkzipClassicManaged.#ctor(ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.Fakes.ShimPkzipClassicManaged.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.Fakes.ShimPkzipClassicManaged.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.Fakes.ShimPkzipClassicManaged.Bind(System.IDisposable)">
            <summary>Asocia los miembros de la interfaz a las correcciones de compatibilidad (shim).</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.Fakes.ShimPkzipClassicManaged.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.Fakes.ShimPkzipClassicManaged.BlockSizeGet">
            <summary>Establecer el shim de PkzipClassicManaged.get_BlockSize()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.Fakes.ShimPkzipClassicManaged.BlockSizeSetInt32">
            <summary>Establecer el shim de PkzipClassicManaged.set_BlockSize(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.Fakes.ShimPkzipClassicManaged.Constructor">
            <summary>Establecer el shim de PkzipClassicManaged.PkzipClassicManaged()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.Fakes.ShimPkzipClassicManaged.CreateDecryptorByteArrayByteArray">
            <summary>Establecer el shim de PkzipClassicManaged.CreateDecryptor(Byte[] rgbKey, Byte[] rgbIV)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.Fakes.ShimPkzipClassicManaged.CreateEncryptorByteArrayByteArray">
            <summary>Establecer el shim de PkzipClassicManaged.CreateEncryptor(Byte[] rgbKey, Byte[] rgbIV)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.Fakes.ShimPkzipClassicManaged.GenerateIV">
            <summary>Establecer el shim de PkzipClassicManaged.GenerateIV()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.Fakes.ShimPkzipClassicManaged.GenerateKey">
            <summary>Establecer el shim de PkzipClassicManaged.GenerateKey()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.Fakes.ShimPkzipClassicManaged.KeyGet">
            <summary>Establecer el shim de PkzipClassicManaged.get_Key()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.Fakes.ShimPkzipClassicManaged.KeySetByteArray">
            <summary>Establecer el shim de PkzipClassicManaged.set_Key(Byte[] value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.Fakes.ShimPkzipClassicManaged.LegalBlockSizesGet">
            <summary>Establecer el shim de PkzipClassicManaged.get_LegalBlockSizes()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.Fakes.ShimPkzipClassicManaged.LegalKeySizesGet">
            <summary>Establecer el shim de PkzipClassicManaged.get_LegalKeySizes()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Encryption.Fakes.ShimPkzipClassicManaged.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.Fakes.ShimPkzipClassicManaged.AllInstances.BlockSizeGet">
            <summary>Establecer el shim de PkzipClassicManaged.get_BlockSize()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.Fakes.ShimPkzipClassicManaged.AllInstances.BlockSizeSetInt32">
            <summary>Establecer el shim de PkzipClassicManaged.set_BlockSize(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.Fakes.ShimPkzipClassicManaged.AllInstances.CreateDecryptorByteArrayByteArray">
            <summary>Establecer el shim de PkzipClassicManaged.CreateDecryptor(Byte[] rgbKey, Byte[] rgbIV)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.Fakes.ShimPkzipClassicManaged.AllInstances.CreateEncryptorByteArrayByteArray">
            <summary>Establecer el shim de PkzipClassicManaged.CreateEncryptor(Byte[] rgbKey, Byte[] rgbIV)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.Fakes.ShimPkzipClassicManaged.AllInstances.GenerateIV">
            <summary>Establecer el shim de PkzipClassicManaged.GenerateIV()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.Fakes.ShimPkzipClassicManaged.AllInstances.GenerateKey">
            <summary>Establecer el shim de PkzipClassicManaged.GenerateKey()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.Fakes.ShimPkzipClassicManaged.AllInstances.KeyGet">
            <summary>Establecer el shim de PkzipClassicManaged.get_Key()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.Fakes.ShimPkzipClassicManaged.AllInstances.KeySetByteArray">
            <summary>Establecer el shim de PkzipClassicManaged.set_Key(Byte[] value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.Fakes.ShimPkzipClassicManaged.AllInstances.LegalBlockSizesGet">
            <summary>Establecer el shim de PkzipClassicManaged.get_LegalBlockSizes()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.Fakes.ShimPkzipClassicManaged.AllInstances.LegalKeySizesGet">
            <summary>Establecer el shim de PkzipClassicManaged.get_LegalKeySizes()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Encryption.PkzipClassic</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.#ctor">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.AttachBackingFieldToBlockSize">
            <summary>Asocia delegados para emular StubPkzipClassic.BlockSize como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.AttachBackingFieldToFeedbackSize">
            <summary>Asocia delegados para emular StubPkzipClassic.FeedbackSize como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.AttachBackingFieldToIV">
            <summary>Asocia delegados para emular StubPkzipClassic.IV como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.AttachBackingFieldToKey">
            <summary>Asocia delegados para emular StubPkzipClassic.Key como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.AttachBackingFieldToKeySize">
            <summary>Asocia delegados para emular StubPkzipClassic.KeySize como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.AttachBackingFieldToMode">
            <summary>Asocia delegados para emular StubPkzipClassic.Mode como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.AttachBackingFieldToPadding">
            <summary>Asocia delegados para emular StubPkzipClassic.Padding como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.BlockSizeGet">
            <summary>Establecer el stub de SymmetricAlgorithm.get_BlockSize()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.BlockSizeSetInt32">
            <summary>Establecer el stub de SymmetricAlgorithm.set_BlockSize(Int32 value)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.CreateDecryptor">
            <summary>Establecer el stub de SymmetricAlgorithm.CreateDecryptor()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary>Establecer el stub de SymmetricAlgorithm.CreateDecryptor(Byte[] rgbKey, Byte[] rgbIV)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.CreateDecryptor01">
            <summary>Establecer el stub de SymmetricAlgorithm.CreateDecryptor()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.CreateDecryptorByteArrayByteArray">
            <summary>Establecer el stub de SymmetricAlgorithm.CreateDecryptor(Byte[] rgbKey, Byte[] rgbIV)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.CreateEncryptor">
            <summary>Establecer el stub de SymmetricAlgorithm.CreateEncryptor()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary>Establecer el stub de SymmetricAlgorithm.CreateEncryptor(Byte[] rgbKey, Byte[] rgbIV)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.CreateEncryptor01">
            <summary>Establecer el stub de SymmetricAlgorithm.CreateEncryptor()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.CreateEncryptorByteArrayByteArray">
            <summary>Establecer el stub de SymmetricAlgorithm.CreateEncryptor(Byte[] rgbKey, Byte[] rgbIV)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.Dispose(System.Boolean)">
            <summary>Establecer el stub de SymmetricAlgorithm.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.DisposeBoolean">
            <summary>Establecer el stub de SymmetricAlgorithm.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.FeedbackSizeGet">
            <summary>Establecer el stub de SymmetricAlgorithm.get_FeedbackSize()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.FeedbackSizeSetInt32">
            <summary>Establecer el stub de SymmetricAlgorithm.set_FeedbackSize(Int32 value)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.GenerateIV">
            <summary>Establecer el stub de SymmetricAlgorithm.GenerateIV()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.GenerateIV01">
            <summary>Establecer el stub de SymmetricAlgorithm.GenerateIV()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.GenerateKey">
            <summary>Establecer el stub de SymmetricAlgorithm.GenerateKey()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.GenerateKey01">
            <summary>Establecer el stub de SymmetricAlgorithm.GenerateKey()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.IVGet">
            <summary>Establecer el stub de SymmetricAlgorithm.get_IV()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.IVSetByteArray">
            <summary>Establecer el stub de SymmetricAlgorithm.set_IV(Byte[] value)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubPkzipClassic</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.KeyGet">
            <summary>Establecer el stub de SymmetricAlgorithm.get_Key()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.KeySetByteArray">
            <summary>Establecer el stub de SymmetricAlgorithm.set_Key(Byte[] value)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.KeySizeGet">
            <summary>Establecer el stub de SymmetricAlgorithm.get_KeySize()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.KeySizeSetInt32">
            <summary>Establecer el stub de SymmetricAlgorithm.set_KeySize(Int32 value)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.LegalBlockSizesGet">
            <summary>Establecer el stub de SymmetricAlgorithm.get_LegalBlockSizes()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.LegalKeySizesGet">
            <summary>Establecer el stub de SymmetricAlgorithm.get_LegalKeySizes()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.ModeGet">
            <summary>Establecer el stub de SymmetricAlgorithm.get_Mode()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.ModeSetCipherMode">
            <summary>Establecer el stub de SymmetricAlgorithm.set_Mode(CipherMode value)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.PaddingGet">
            <summary>Establecer el stub de SymmetricAlgorithm.get_Padding()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.PaddingSetPaddingMode">
            <summary>Establecer el stub de SymmetricAlgorithm.set_Padding(PaddingMode value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.BlockSize">
            <summary>Establecer el stub de SymmetricAlgorithm.get_BlockSize()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.FeedbackSize">
            <summary>Establecer el stub de SymmetricAlgorithm.get_FeedbackSize()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.IV">
            <summary>Establecer el stub de SymmetricAlgorithm.get_IV()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.Key">
            <summary>Establecer el stub de SymmetricAlgorithm.get_Key()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.KeySize">
            <summary>Establecer el stub de SymmetricAlgorithm.get_KeySize()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.LegalBlockSizes">
            <summary>Establecer el stub de SymmetricAlgorithm.get_LegalBlockSizes()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.LegalKeySizes">
            <summary>Establecer el stub de SymmetricAlgorithm.get_LegalKeySizes()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.Mode">
            <summary>Establecer el stub de SymmetricAlgorithm.get_Mode()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.Fakes.StubPkzipClassic.Padding">
            <summary>Establecer el stub de SymmetricAlgorithm.get_Padding()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Fakes.ShimSharpZipBaseException">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.SharpZipBaseException</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Fakes.ShimSharpZipBaseException.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Fakes.ShimSharpZipBaseException.#ctor(ICSharpCode.SharpZipLib.SharpZipBaseException)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Fakes.ShimSharpZipBaseException.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Fakes.ShimSharpZipBaseException.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Fakes.ShimSharpZipBaseException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Asocia los miembros de la interfaz a las correcciones de compatibilidad (shim).</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Fakes.ShimSharpZipBaseException.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Fakes.ShimSharpZipBaseException.Constructor">
            <summary>Establecer el shim de SharpZipBaseException.SharpZipBaseException()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Fakes.ShimSharpZipBaseException.ConstructorSerializationInfoStreamingContext">
            <summary>Establecer el shim de SharpZipBaseException.SharpZipBaseException(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Fakes.ShimSharpZipBaseException.ConstructorString">
            <summary>Establecer el shim de SharpZipBaseException.SharpZipBaseException(String message)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Fakes.ShimSharpZipBaseException.ConstructorStringException">
            <summary>Establecer el shim de SharpZipBaseException.SharpZipBaseException(String message, Exception innerException)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Fakes.ShimSharpZipBaseException.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Fakes.StubSharpZipBaseException">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.SharpZipBaseException</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Fakes.StubSharpZipBaseException.#ctor">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Fakes.StubSharpZipBaseException.#ctor(System.String)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Fakes.StubSharpZipBaseException.#ctor(System.String,System.Exception)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Fakes.StubSharpZipBaseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Fakes.StubSharpZipBaseException.AttachBackingFieldToHelpLink">
            <summary>Asocia delegados para emular StubSharpZipBaseException.HelpLink como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Fakes.StubSharpZipBaseException.AttachBackingFieldToSource">
            <summary>Asocia delegados para emular StubSharpZipBaseException.Source como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Fakes.StubSharpZipBaseException.DataGet">
            <summary>Establecer el stub de Exception.get_Data()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Fakes.StubSharpZipBaseException.GetBaseException">
            <summary>Establecer el stub de Exception.GetBaseException()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Fakes.StubSharpZipBaseException.GetBaseException01">
            <summary>Establecer el stub de Exception.GetBaseException()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Fakes.StubSharpZipBaseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Establecer el stub de Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Fakes.StubSharpZipBaseException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Establecer el stub de Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Fakes.StubSharpZipBaseException.HelpLinkGet">
            <summary>Establecer el stub de Exception.get_HelpLink()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Fakes.StubSharpZipBaseException.HelpLinkSetString">
            <summary>Establecer el stub de Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Fakes.StubSharpZipBaseException.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubSharpZipBaseException</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Fakes.StubSharpZipBaseException.MessageGet">
            <summary>Establecer el stub de Exception.get_Message()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Fakes.StubSharpZipBaseException.SourceGet">
            <summary>Establecer el stub de Exception.get_Source()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Fakes.StubSharpZipBaseException.SourceSetString">
            <summary>Establecer el stub de Exception.set_Source(String value)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Fakes.StubSharpZipBaseException.StackTraceGet">
            <summary>Establecer el stub de Exception.get_StackTrace()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Fakes.StubSharpZipBaseException.ToString">
            <summary>Establecer el stub de Exception.ToString()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Fakes.StubSharpZipBaseException.ToString01">
            <summary>Establecer el stub de Exception.ToString()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Fakes.StubSharpZipBaseException.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Fakes.StubSharpZipBaseException.Data">
            <summary>Establecer el stub de Exception.get_Data()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Fakes.StubSharpZipBaseException.HelpLink">
            <summary>Establecer el stub de Exception.get_HelpLink()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Fakes.StubSharpZipBaseException.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Fakes.StubSharpZipBaseException.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Fakes.StubSharpZipBaseException.Message">
            <summary>Establecer el stub de Exception.get_Message()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Fakes.StubSharpZipBaseException.Source">
            <summary>Establecer el stub de Exception.get_Source()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Fakes.StubSharpZipBaseException.StackTrace">
            <summary>Establecer el stub de Exception.get_StackTrace()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipConstants">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.GZip.GZipConstants</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipConstants.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipConstants.#ctor(ICSharpCode.SharpZipLib.GZip.GZipConstants)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipConstants.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipConstants.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipConstants.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipConstants.Constructor">
            <summary>Establecer el shim de GZipConstants.GZipConstants()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipConstants.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipException">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.GZip.GZipException</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipException.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipException.#ctor(ICSharpCode.SharpZipLib.GZip.GZipException)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipException.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipException.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Asocia los miembros de la interfaz a las correcciones de compatibilidad (shim).</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipException.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipException.Constructor">
            <summary>Establecer el shim de GZipException.GZipException()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipException.ConstructorSerializationInfoStreamingContext">
            <summary>Establecer el shim de GZipException.GZipException(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipException.ConstructorString">
            <summary>Establecer el shim de GZipException.GZipException(String message)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipException.ConstructorStringException">
            <summary>Establecer el shim de GZipException.GZipException(String message, Exception innerException)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipException.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipInputStream">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.GZip.GZipInputStream</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipInputStream.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipInputStream.#ctor(ICSharpCode.SharpZipLib.GZip.GZipInputStream)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipInputStream.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipInputStream.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipInputStream.Bind(System.IDisposable)">
            <summary>Asocia los miembros de la interfaz a las correcciones de compatibilidad (shim).</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipInputStream.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipInputStream.ConstructorStream">
            <summary>Establecer el shim de GZipInputStream.GZipInputStream(Stream baseInputStream)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipInputStream.ConstructorStreamInt32">
            <summary>Establecer el shim de GZipInputStream.GZipInputStream(Stream baseInputStream, Int32 size)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipInputStream.ReadByteArrayInt32Int32">
            <summary>Establecer el shim de GZipInputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipInputStream.ReadFooter">
            <summary>Establecer el shim de GZipInputStream.ReadFooter()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipInputStream.ReadHeader">
            <summary>Establecer el shim de GZipInputStream.ReadHeader()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipInputStream.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipInputStream.AllInstances.ReadByteArrayInt32Int32">
            <summary>Establecer el shim de GZipInputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipInputStream.AllInstances.ReadFooter">
            <summary>Establecer el shim de GZipInputStream.ReadFooter()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipInputStream.AllInstances.ReadHeader">
            <summary>Establecer el shim de GZipInputStream.ReadHeader()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipOutputStream">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.GZip.GZipOutputStream</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipOutputStream.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipOutputStream.#ctor(ICSharpCode.SharpZipLib.GZip.GZipOutputStream)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipOutputStream.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipOutputStream.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipOutputStream.Bind(System.IDisposable)">
            <summary>Asocia los miembros de la interfaz a las correcciones de compatibilidad (shim).</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipOutputStream.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipOutputStream.Close">
            <summary>Establecer el shim de GZipOutputStream.Close()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipOutputStream.ConstructorStream">
            <summary>Establecer el shim de GZipOutputStream.GZipOutputStream(Stream baseOutputStream)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipOutputStream.ConstructorStreamInt32">
            <summary>Establecer el shim de GZipOutputStream.GZipOutputStream(Stream baseOutputStream, Int32 size)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipOutputStream.Finish">
            <summary>Establecer el shim de GZipOutputStream.Finish()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipOutputStream.GetLevel">
            <summary>Establecer el shim de GZipOutputStream.GetLevel()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipOutputStream.SetLevelInt32">
            <summary>Establecer el shim de GZipOutputStream.SetLevel(Int32 level)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipOutputStream.WriteByteArrayInt32Int32">
            <summary>Establecer el shim de GZipOutputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipOutputStream.WriteHeader">
            <summary>Establecer el shim de GZipOutputStream.WriteHeader()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipOutputStream.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipOutputStream.AllInstances.Close">
            <summary>Establecer el shim de GZipOutputStream.Close()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipOutputStream.AllInstances.Finish">
            <summary>Establecer el shim de GZipOutputStream.Finish()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipOutputStream.AllInstances.GetLevel">
            <summary>Establecer el shim de GZipOutputStream.GetLevel()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipOutputStream.AllInstances.SetLevelInt32">
            <summary>Establecer el shim de GZipOutputStream.SetLevel(Int32 level)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipOutputStream.AllInstances.WriteByteArrayInt32Int32">
            <summary>Establecer el shim de GZipOutputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.ShimGZipOutputStream.AllInstances.WriteHeader">
            <summary>Establecer el shim de GZipOutputStream.WriteHeader()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipException">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.GZip.GZipException</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipException.#ctor">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipException.#ctor(System.String)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipException.#ctor(System.String,System.Exception)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipException.AttachBackingFieldToHelpLink">
            <summary>Asocia delegados para emular StubGZipException.HelpLink como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipException.AttachBackingFieldToSource">
            <summary>Asocia delegados para emular StubGZipException.Source como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipException.DataGet">
            <summary>Establecer el stub de Exception.get_Data()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipException.GetBaseException">
            <summary>Establecer el stub de Exception.GetBaseException()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipException.GetBaseException01">
            <summary>Establecer el stub de Exception.GetBaseException()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Establecer el stub de Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Establecer el stub de Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipException.HelpLinkGet">
            <summary>Establecer el stub de Exception.get_HelpLink()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipException.HelpLinkSetString">
            <summary>Establecer el stub de Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipException.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubGZipException</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipException.MessageGet">
            <summary>Establecer el stub de Exception.get_Message()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipException.SourceGet">
            <summary>Establecer el stub de Exception.get_Source()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipException.SourceSetString">
            <summary>Establecer el stub de Exception.set_Source(String value)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipException.StackTraceGet">
            <summary>Establecer el stub de Exception.get_StackTrace()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipException.ToString">
            <summary>Establecer el stub de Exception.ToString()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipException.ToString01">
            <summary>Establecer el stub de Exception.ToString()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipException.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipException.Data">
            <summary>Establecer el stub de Exception.get_Data()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipException.HelpLink">
            <summary>Establecer el stub de Exception.get_HelpLink()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipException.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipException.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipException.Message">
            <summary>Establecer el stub de Exception.get_Message()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipException.Source">
            <summary>Establecer el stub de Exception.get_Source()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipException.StackTrace">
            <summary>Establecer el stub de Exception.get_StackTrace()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.GZip.GZipInputStream</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.#ctor(System.IO.Stream)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.AttachBackingFieldToPosition">
            <summary>Asocia delegados para emular StubGZipInputStream.Position como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.AttachBackingFieldToReadTimeout">
            <summary>Asocia delegados para emular StubGZipInputStream.ReadTimeout como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.AttachBackingFieldToWriteTimeout">
            <summary>Asocia delegados para emular StubGZipInputStream.WriteTimeout como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.AvailableGet">
            <summary>Establecer el stub de InflaterInputStream.get_Available()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Establecer el stub de Stream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.BeginReadByteArrayInt32Int32AsyncCallbackObject">
            <summary>Establecer el stub de Stream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Establecer el stub de InflaterInputStream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.BeginWriteByteArrayInt32Int32AsyncCallbackObject">
            <summary>Establecer el stub de InflaterInputStream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.CanReadGet">
            <summary>Establecer el stub de InflaterInputStream.get_CanRead()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.CanSeekGet">
            <summary>Establecer el stub de InflaterInputStream.get_CanSeek()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.CanTimeoutGet">
            <summary>Establecer el stub de Stream.get_CanTimeout()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.CanWriteGet">
            <summary>Establecer el stub de InflaterInputStream.get_CanWrite()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.Close">
            <summary>Establecer el stub de InflaterInputStream.Close()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.Close01">
            <summary>Establecer el stub de InflaterInputStream.Close()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.CreateWaitHandle">
            <summary>Establecer el stub de Stream.CreateWaitHandle()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.CreateWaitHandle01">
            <summary>Establecer el stub de Stream.CreateWaitHandle()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.Dispose(System.Boolean)">
            <summary>Establecer el stub de Stream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.DisposeBoolean">
            <summary>Establecer el stub de Stream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.EndRead(System.IAsyncResult)">
            <summary>Establecer el stub de Stream.EndRead(IAsyncResult asyncResult)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.EndReadIAsyncResult">
            <summary>Establecer el stub de Stream.EndRead(IAsyncResult asyncResult)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.EndWrite(System.IAsyncResult)">
            <summary>Establecer el stub de Stream.EndWrite(IAsyncResult asyncResult)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.EndWriteIAsyncResult">
            <summary>Establecer el stub de Stream.EndWrite(IAsyncResult asyncResult)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.Flush">
            <summary>Establecer el stub de InflaterInputStream.Flush()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.Flush01">
            <summary>Establecer el stub de InflaterInputStream.Flush()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubGZipInputStream</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.LengthGet">
            <summary>Establecer el stub de InflaterInputStream.get_Length()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.ObjectInvariant">
            <summary>Establecer el stub de Stream.ObjectInvariant()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.ObjectInvariant01">
            <summary>Establecer el stub de Stream.ObjectInvariant()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.PositionGet">
            <summary>Establecer el stub de InflaterInputStream.get_Position()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.PositionSetInt64">
            <summary>Establecer el stub de InflaterInputStream.set_Position(Int64 value)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>Establecer el stub de GZipInputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.ReadByte">
            <summary>Establecer el stub de Stream.ReadByte()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.ReadByte01">
            <summary>Establecer el stub de Stream.ReadByte()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.ReadByteArrayInt32Int32">
            <summary>Establecer el stub de GZipInputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.ReadTimeoutGet">
            <summary>Establecer el stub de Stream.get_ReadTimeout()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.ReadTimeoutSetInt32">
            <summary>Establecer el stub de Stream.set_ReadTimeout(Int32 value)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>Establecer el stub de InflaterInputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.SeekInt64SeekOrigin">
            <summary>Establecer el stub de InflaterInputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.SetLength(System.Int64)">
            <summary>Establecer el stub de InflaterInputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.SetLengthInt64">
            <summary>Establecer el stub de InflaterInputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Establecer el stub de InflaterInputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.WriteByte(System.Byte)">
            <summary>Establecer el stub de InflaterInputStream.WriteByte(Byte value)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.WriteByteArrayInt32Int32">
            <summary>Establecer el stub de InflaterInputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.WriteByteByte">
            <summary>Establecer el stub de InflaterInputStream.WriteByte(Byte value)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.WriteTimeoutGet">
            <summary>Establecer el stub de Stream.get_WriteTimeout()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.WriteTimeoutSetInt32">
            <summary>Establecer el stub de Stream.set_WriteTimeout(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.Available">
            <summary>Establecer el stub de InflaterInputStream.get_Available()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.CanRead">
            <summary>Establecer el stub de InflaterInputStream.get_CanRead()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.CanSeek">
            <summary>Establecer el stub de InflaterInputStream.get_CanSeek()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.CanTimeout">
            <summary>Establecer el stub de Stream.get_CanTimeout()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.CanWrite">
            <summary>Establecer el stub de InflaterInputStream.get_CanWrite()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.Length">
            <summary>Establecer el stub de InflaterInputStream.get_Length()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.Position">
            <summary>Establecer el stub de InflaterInputStream.get_Position()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.ReadTimeout">
            <summary>Establecer el stub de Stream.get_ReadTimeout()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipInputStream.WriteTimeout">
            <summary>Establecer el stub de Stream.get_WriteTimeout()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.GZip.GZipOutputStream</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.#ctor(System.IO.Stream)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.AttachBackingFieldToPosition">
            <summary>Asocia delegados para emular StubGZipOutputStream.Position como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.AttachBackingFieldToReadTimeout">
            <summary>Asocia delegados para emular StubGZipOutputStream.ReadTimeout como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.AttachBackingFieldToWriteTimeout">
            <summary>Asocia delegados para emular StubGZipOutputStream.WriteTimeout como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Establecer el stub de DeflaterOutputStream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.BeginReadByteArrayInt32Int32AsyncCallbackObject">
            <summary>Establecer el stub de DeflaterOutputStream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Establecer el stub de DeflaterOutputStream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.BeginWriteByteArrayInt32Int32AsyncCallbackObject">
            <summary>Establecer el stub de DeflaterOutputStream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.CanReadGet">
            <summary>Establecer el stub de DeflaterOutputStream.get_CanRead()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.CanSeekGet">
            <summary>Establecer el stub de DeflaterOutputStream.get_CanSeek()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.CanTimeoutGet">
            <summary>Establecer el stub de Stream.get_CanTimeout()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.CanWriteGet">
            <summary>Establecer el stub de DeflaterOutputStream.get_CanWrite()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.Close">
            <summary>Establecer el stub de GZipOutputStream.Close()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.Close01">
            <summary>Establecer el stub de GZipOutputStream.Close()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.CreateWaitHandle">
            <summary>Establecer el stub de Stream.CreateWaitHandle()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.CreateWaitHandle01">
            <summary>Establecer el stub de Stream.CreateWaitHandle()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.Dispose(System.Boolean)">
            <summary>Establecer el stub de Stream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.DisposeBoolean">
            <summary>Establecer el stub de Stream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.EndRead(System.IAsyncResult)">
            <summary>Establecer el stub de Stream.EndRead(IAsyncResult asyncResult)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.EndReadIAsyncResult">
            <summary>Establecer el stub de Stream.EndRead(IAsyncResult asyncResult)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.EndWrite(System.IAsyncResult)">
            <summary>Establecer el stub de Stream.EndWrite(IAsyncResult asyncResult)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.EndWriteIAsyncResult">
            <summary>Establecer el stub de Stream.EndWrite(IAsyncResult asyncResult)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.Finish">
            <summary>Establecer el stub de GZipOutputStream.Finish()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.Finish01">
            <summary>Establecer el stub de GZipOutputStream.Finish()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.Flush">
            <summary>Establecer el stub de DeflaterOutputStream.Flush()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.Flush01">
            <summary>Establecer el stub de DeflaterOutputStream.Flush()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubGZipOutputStream</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.LengthGet">
            <summary>Establecer el stub de DeflaterOutputStream.get_Length()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.ObjectInvariant">
            <summary>Establecer el stub de Stream.ObjectInvariant()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.ObjectInvariant01">
            <summary>Establecer el stub de Stream.ObjectInvariant()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.PositionGet">
            <summary>Establecer el stub de DeflaterOutputStream.get_Position()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.PositionSetInt64">
            <summary>Establecer el stub de DeflaterOutputStream.set_Position(Int64 value)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>Establecer el stub de DeflaterOutputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.ReadByte">
            <summary>Establecer el stub de DeflaterOutputStream.ReadByte()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.ReadByte01">
            <summary>Establecer el stub de DeflaterOutputStream.ReadByte()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.ReadByteArrayInt32Int32">
            <summary>Establecer el stub de DeflaterOutputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.ReadTimeoutGet">
            <summary>Establecer el stub de Stream.get_ReadTimeout()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.ReadTimeoutSetInt32">
            <summary>Establecer el stub de Stream.set_ReadTimeout(Int32 value)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>Establecer el stub de DeflaterOutputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.SeekInt64SeekOrigin">
            <summary>Establecer el stub de DeflaterOutputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.SetLength(System.Int64)">
            <summary>Establecer el stub de DeflaterOutputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.SetLengthInt64">
            <summary>Establecer el stub de DeflaterOutputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Establecer el stub de GZipOutputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.WriteByte(System.Byte)">
            <summary>Establecer el stub de DeflaterOutputStream.WriteByte(Byte value)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.WriteByteArrayInt32Int32">
            <summary>Establecer el stub de GZipOutputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.WriteByteByte">
            <summary>Establecer el stub de DeflaterOutputStream.WriteByte(Byte value)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.WriteTimeoutGet">
            <summary>Establecer el stub de Stream.get_WriteTimeout()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.WriteTimeoutSetInt32">
            <summary>Establecer el stub de Stream.set_WriteTimeout(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.CanRead">
            <summary>Establecer el stub de DeflaterOutputStream.get_CanRead()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.CanSeek">
            <summary>Establecer el stub de DeflaterOutputStream.get_CanSeek()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.CanTimeout">
            <summary>Establecer el stub de Stream.get_CanTimeout()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.CanWrite">
            <summary>Establecer el stub de DeflaterOutputStream.get_CanWrite()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.Length">
            <summary>Establecer el stub de DeflaterOutputStream.get_Length()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.Position">
            <summary>Establecer el stub de DeflaterOutputStream.get_Position()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.ReadTimeout">
            <summary>Establecer el stub de Stream.get_ReadTimeout()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.GZip.Fakes.StubGZipOutputStream.WriteTimeout">
            <summary>Establecer el stub de Stream.get_WriteTimeout()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.Fakes.ShimInvalidHeaderException">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Tar.InvalidHeaderException</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.ShimInvalidHeaderException.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.ShimInvalidHeaderException.#ctor(ICSharpCode.SharpZipLib.Tar.InvalidHeaderException)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.ShimInvalidHeaderException.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.ShimInvalidHeaderException.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.ShimInvalidHeaderException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Asocia los miembros de la interfaz a las correcciones de compatibilidad (shim).</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimInvalidHeaderException.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimInvalidHeaderException.Constructor">
            <summary>Establecer el shim de InvalidHeaderException.InvalidHeaderException()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimInvalidHeaderException.ConstructorSerializationInfoStreamingContext">
            <summary>Establecer el shim de InvalidHeaderException.InvalidHeaderException(SerializationInfo information, StreamingContext context)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimInvalidHeaderException.ConstructorString">
            <summary>Establecer el shim de InvalidHeaderException.InvalidHeaderException(String message)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimInvalidHeaderException.ConstructorStringException">
            <summary>Establecer el shim de InvalidHeaderException.InvalidHeaderException(String message, Exception exception)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.Fakes.ShimInvalidHeaderException.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Tar.TarArchive</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.#ctor(ICSharpCode.SharpZipLib.Tar.TarArchive)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.Bind(System.IDisposable)">
            <summary>Asocia los miembros de la interfaz a las correcciones de compatibilidad (shim).</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.ApplyUserInfoOverridesGet">
            <summary>Establecer el shim de TarArchive.get_ApplyUserInfoOverrides()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.ApplyUserInfoOverridesSetBoolean">
            <summary>Establecer el shim de TarArchive.set_ApplyUserInfoOverrides(Boolean value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.AsciiTranslateGet">
            <summary>Establecer el shim de TarArchive.get_AsciiTranslate()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.AsciiTranslateSetBoolean">
            <summary>Establecer el shim de TarArchive.set_AsciiTranslate(Boolean value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.Close">
            <summary>Establecer el shim de TarArchive.Close()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.CloseArchive">
            <summary>Establecer el shim de TarArchive.CloseArchive()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.Constructor">
            <summary>Establecer el shim de TarArchive.TarArchive()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.ConstructorTarInputStream">
            <summary>Establecer el shim de TarArchive.TarArchive(TarInputStream stream)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.ConstructorTarOutputStream">
            <summary>Establecer el shim de TarArchive.TarArchive(TarOutputStream stream)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.CreateInputTarArchiveStream">
            <summary>Establecer el shim de TarArchive.CreateInputTarArchive(Stream inputStream)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.CreateInputTarArchiveStreamInt32">
            <summary>Establecer el shim de TarArchive.CreateInputTarArchive(Stream inputStream, Int32 blockFactor)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.CreateOutputTarArchiveStream">
            <summary>Establecer el shim de TarArchive.CreateOutputTarArchive(Stream outputStream)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.CreateOutputTarArchiveStreamInt32">
            <summary>Establecer el shim de TarArchive.CreateOutputTarArchive(Stream outputStream, Int32 blockFactor)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.DisposeBoolean">
            <summary>Establecer el shim de TarArchive.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.EnsureDirectoryExistsString">
            <summary>Establecer el shim de TarArchive.EnsureDirectoryExists(String directoryName)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.ExtractContentsString">
            <summary>Establecer el shim de TarArchive.ExtractContents(String destinationDirectory)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.ExtractEntryStringTarEntry">
            <summary>Establecer el shim de TarArchive.ExtractEntry(String destDir, TarEntry entry)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.GroupIdGet">
            <summary>Establecer el shim de TarArchive.get_GroupId()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.GroupNameGet">
            <summary>Establecer el shim de TarArchive.get_GroupName()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.IsBinaryString">
            <summary>Establecer el shim de TarArchive.IsBinary(String filename)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.ListContents">
            <summary>Establecer el shim de TarArchive.ListContents()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.OnProgressMessageEventTarEntryString">
            <summary>Establecer el shim de TarArchive.OnProgressMessageEvent(TarEntry entry, String message)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.PathPrefixGet">
            <summary>Establecer el shim de TarArchive.get_PathPrefix()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.PathPrefixSetString">
            <summary>Establecer el shim de TarArchive.set_PathPrefix(String value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.ProgressMessageEventAddProgressMessageHandler">
            <summary>Establecer el shim de TarArchive.add_ProgressMessageEvent(ProgressMessageHandler value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.ProgressMessageEventRemoveProgressMessageHandler">
            <summary>Establecer el shim de TarArchive.remove_ProgressMessageEvent(ProgressMessageHandler value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.RecordSizeGet">
            <summary>Establecer el shim de TarArchive.get_RecordSize()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.RootPathGet">
            <summary>Establecer el shim de TarArchive.get_RootPath()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.RootPathSetString">
            <summary>Establecer el shim de TarArchive.set_RootPath(String value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.SetAsciiTranslationBoolean">
            <summary>Establecer el shim de TarArchive.SetAsciiTranslation(Boolean asciiTranslate)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.SetKeepOldFilesBoolean">
            <summary>Establecer el shim de TarArchive.SetKeepOldFiles(Boolean keepOldFiles)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.SetUserInfoInt32StringInt32String">
            <summary>Establecer el shim de TarArchive.SetUserInfo(Int32 userId, String userName, Int32 groupId, String groupName)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.SystemIDisposableDispose">
            <summary>Establecer el shim de TarArchive.System.IDisposable.Dispose()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.UserIdGet">
            <summary>Establecer el shim de TarArchive.get_UserId()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.UserNameGet">
            <summary>Establecer el shim de TarArchive.get_UserName()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.WriteEntryCoreTarEntryBoolean">
            <summary>Establecer el shim de TarArchive.WriteEntryCore(TarEntry sourceEntry, Boolean recurse)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.WriteEntryTarEntryBoolean">
            <summary>Establecer el shim de TarArchive.WriteEntry(TarEntry sourceEntry, Boolean recurse)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.AllInstances.ApplyUserInfoOverridesGet">
            <summary>Establecer el shim de TarArchive.get_ApplyUserInfoOverrides()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.AllInstances.ApplyUserInfoOverridesSetBoolean">
            <summary>Establecer el shim de TarArchive.set_ApplyUserInfoOverrides(Boolean value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.AllInstances.AsciiTranslateGet">
            <summary>Establecer el shim de TarArchive.get_AsciiTranslate()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.AllInstances.AsciiTranslateSetBoolean">
            <summary>Establecer el shim de TarArchive.set_AsciiTranslate(Boolean value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.AllInstances.Close">
            <summary>Establecer el shim de TarArchive.Close()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.AllInstances.CloseArchive">
            <summary>Establecer el shim de TarArchive.CloseArchive()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.AllInstances.DisposeBoolean">
            <summary>Establecer el shim de TarArchive.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.AllInstances.ExtractContentsString">
            <summary>Establecer el shim de TarArchive.ExtractContents(String destinationDirectory)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.AllInstances.ExtractEntryStringTarEntry">
            <summary>Establecer el shim de TarArchive.ExtractEntry(String destDir, TarEntry entry)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.AllInstances.GroupIdGet">
            <summary>Establecer el shim de TarArchive.get_GroupId()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.AllInstances.GroupNameGet">
            <summary>Establecer el shim de TarArchive.get_GroupName()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.AllInstances.ListContents">
            <summary>Establecer el shim de TarArchive.ListContents()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.AllInstances.OnProgressMessageEventTarEntryString">
            <summary>Establecer el shim de TarArchive.OnProgressMessageEvent(TarEntry entry, String message)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.AllInstances.PathPrefixGet">
            <summary>Establecer el shim de TarArchive.get_PathPrefix()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.AllInstances.PathPrefixSetString">
            <summary>Establecer el shim de TarArchive.set_PathPrefix(String value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.AllInstances.ProgressMessageEventAddProgressMessageHandler">
            <summary>Establecer el shim de TarArchive.add_ProgressMessageEvent(ProgressMessageHandler value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.AllInstances.ProgressMessageEventRemoveProgressMessageHandler">
            <summary>Establecer el shim de TarArchive.remove_ProgressMessageEvent(ProgressMessageHandler value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.AllInstances.RecordSizeGet">
            <summary>Establecer el shim de TarArchive.get_RecordSize()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.AllInstances.RootPathGet">
            <summary>Establecer el shim de TarArchive.get_RootPath()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.AllInstances.RootPathSetString">
            <summary>Establecer el shim de TarArchive.set_RootPath(String value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.AllInstances.SetAsciiTranslationBoolean">
            <summary>Establecer el shim de TarArchive.SetAsciiTranslation(Boolean asciiTranslate)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.AllInstances.SetKeepOldFilesBoolean">
            <summary>Establecer el shim de TarArchive.SetKeepOldFiles(Boolean keepOldFiles)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.AllInstances.SetUserInfoInt32StringInt32String">
            <summary>Establecer el shim de TarArchive.SetUserInfo(Int32 userId, String userName, Int32 groupId, String groupName)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.AllInstances.SystemIDisposableDispose">
            <summary>Establecer el shim de TarArchive.System.IDisposable.Dispose()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.AllInstances.UserIdGet">
            <summary>Establecer el shim de TarArchive.get_UserId()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.AllInstances.UserNameGet">
            <summary>Establecer el shim de TarArchive.get_UserName()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.AllInstances.WriteEntryCoreTarEntryBoolean">
            <summary>Establecer el shim de TarArchive.WriteEntryCore(TarEntry sourceEntry, Boolean recurse)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarArchive.AllInstances.WriteEntryTarEntryBoolean">
            <summary>Establecer el shim de TarArchive.WriteEntry(TarEntry sourceEntry, Boolean recurse)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Tar.TarBuffer</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.#ctor(ICSharpCode.SharpZipLib.Tar.TarBuffer)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.BlockFactorGet">
            <summary>Establecer el shim de TarBuffer.get_BlockFactor()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.Close">
            <summary>Establecer el shim de TarBuffer.Close()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.Constructor">
            <summary>Establecer el shim de TarBuffer.TarBuffer()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.CreateInputTarBufferStream">
            <summary>Establecer el shim de TarBuffer.CreateInputTarBuffer(Stream inputStream)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.CreateInputTarBufferStreamInt32">
            <summary>Establecer el shim de TarBuffer.CreateInputTarBuffer(Stream inputStream, Int32 blockFactor)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.CreateOutputTarBufferStream">
            <summary>Establecer el shim de TarBuffer.CreateOutputTarBuffer(Stream outputStream)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.CreateOutputTarBufferStreamInt32">
            <summary>Establecer el shim de TarBuffer.CreateOutputTarBuffer(Stream outputStream, Int32 blockFactor)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.CurrentBlockGet">
            <summary>Establecer el shim de TarBuffer.get_CurrentBlock()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.CurrentRecordGet">
            <summary>Establecer el shim de TarBuffer.get_CurrentRecord()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.Flush">
            <summary>Establecer el shim de TarBuffer.Flush()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.GetBlockFactor">
            <summary>Establecer el shim de TarBuffer.GetBlockFactor()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.GetCurrentBlockNum">
            <summary>Establecer el shim de TarBuffer.GetCurrentBlockNum()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.GetCurrentRecordNum">
            <summary>Establecer el shim de TarBuffer.GetCurrentRecordNum()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.GetRecordSize">
            <summary>Establecer el shim de TarBuffer.GetRecordSize()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.InitializeInt32">
            <summary>Establecer el shim de TarBuffer.Initialize(Int32 blockFactor)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.IsEOFBlockByteArray">
            <summary>Establecer el shim de TarBuffer.IsEOFBlock(Byte[] block)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.IsEndOfArchiveBlockByteArray">
            <summary>Establecer el shim de TarBuffer.IsEndOfArchiveBlock(Byte[] block)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.ReadBlock">
            <summary>Establecer el shim de TarBuffer.ReadBlock()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.ReadRecord">
            <summary>Establecer el shim de TarBuffer.ReadRecord()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.RecordSizeGet">
            <summary>Establecer el shim de TarBuffer.get_RecordSize()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.SkipBlock">
            <summary>Establecer el shim de TarBuffer.SkipBlock()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.WriteBlockByteArray">
            <summary>Establecer el shim de TarBuffer.WriteBlock(Byte[] block)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.WriteBlockByteArrayInt32">
            <summary>Establecer el shim de TarBuffer.WriteBlock(Byte[] buffer, Int32 offset)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.WriteRecord">
            <summary>Establecer el shim de TarBuffer.WriteRecord()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.AllInstances.BlockFactorGet">
            <summary>Establecer el shim de TarBuffer.get_BlockFactor()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.AllInstances.Close">
            <summary>Establecer el shim de TarBuffer.Close()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.AllInstances.CurrentBlockGet">
            <summary>Establecer el shim de TarBuffer.get_CurrentBlock()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.AllInstances.CurrentRecordGet">
            <summary>Establecer el shim de TarBuffer.get_CurrentRecord()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.AllInstances.Flush">
            <summary>Establecer el shim de TarBuffer.Flush()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.AllInstances.GetBlockFactor">
            <summary>Establecer el shim de TarBuffer.GetBlockFactor()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.AllInstances.GetCurrentBlockNum">
            <summary>Establecer el shim de TarBuffer.GetCurrentBlockNum()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.AllInstances.GetCurrentRecordNum">
            <summary>Establecer el shim de TarBuffer.GetCurrentRecordNum()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.AllInstances.GetRecordSize">
            <summary>Establecer el shim de TarBuffer.GetRecordSize()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.AllInstances.InitializeInt32">
            <summary>Establecer el shim de TarBuffer.Initialize(Int32 blockFactor)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.AllInstances.IsEOFBlockByteArray">
            <summary>Establecer el shim de TarBuffer.IsEOFBlock(Byte[] block)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.AllInstances.ReadBlock">
            <summary>Establecer el shim de TarBuffer.ReadBlock()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.AllInstances.ReadRecord">
            <summary>Establecer el shim de TarBuffer.ReadRecord()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.AllInstances.RecordSizeGet">
            <summary>Establecer el shim de TarBuffer.get_RecordSize()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.AllInstances.SkipBlock">
            <summary>Establecer el shim de TarBuffer.SkipBlock()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.AllInstances.WriteBlockByteArray">
            <summary>Establecer el shim de TarBuffer.WriteBlock(Byte[] block)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.AllInstances.WriteBlockByteArrayInt32">
            <summary>Establecer el shim de TarBuffer.WriteBlock(Byte[] buffer, Int32 offset)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarBuffer.AllInstances.WriteRecord">
            <summary>Establecer el shim de TarBuffer.WriteRecord()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Tar.TarEntry</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.#ctor(ICSharpCode.SharpZipLib.Tar.TarEntry)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.Bind(System.ICloneable)">
            <summary>Asocia los miembros de la interfaz a las correcciones de compatibilidad (shim).</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.AdjustEntryNameByteArrayString">
            <summary>Establecer el shim de TarEntry.AdjustEntryName(Byte[] buffer, String newName)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.Clone">
            <summary>Establecer el shim de TarEntry.Clone()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.Constructor">
            <summary>Establecer el shim de TarEntry.TarEntry()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.ConstructorByteArray">
            <summary>Establecer el shim de TarEntry.TarEntry(Byte[] headerBuffer)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.ConstructorTarHeader">
            <summary>Establecer el shim de TarEntry.TarEntry(TarHeader header)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.CreateEntryFromFileString">
            <summary>Establecer el shim de TarEntry.CreateEntryFromFile(String fileName)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.CreateTarEntryString">
            <summary>Establecer el shim de TarEntry.CreateTarEntry(String name)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.EqualsObject">
            <summary>Establecer el shim de TarEntry.Equals(Object obj)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.FileGet">
            <summary>Establecer el shim de TarEntry.get_File()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.GetDirectoryEntries">
            <summary>Establecer el shim de TarEntry.GetDirectoryEntries()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.GetFileTarHeaderTarHeaderString">
            <summary>Establecer el shim de TarEntry.GetFileTarHeader(TarHeader header, String file)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.GetHashCode">
            <summary>Establecer el shim de TarEntry.GetHashCode()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.GroupIdGet">
            <summary>Establecer el shim de TarEntry.get_GroupId()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.GroupIdSetInt32">
            <summary>Establecer el shim de TarEntry.set_GroupId(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.GroupNameGet">
            <summary>Establecer el shim de TarEntry.get_GroupName()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.GroupNameSetString">
            <summary>Establecer el shim de TarEntry.set_GroupName(String value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.IsDescendentTarEntry">
            <summary>Establecer el shim de TarEntry.IsDescendent(TarEntry toTest)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.IsDirectoryGet">
            <summary>Establecer el shim de TarEntry.get_IsDirectory()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.ModTimeGet">
            <summary>Establecer el shim de TarEntry.get_ModTime()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.ModTimeSetDateTime">
            <summary>Establecer el shim de TarEntry.set_ModTime(DateTime value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.NameGet">
            <summary>Establecer el shim de TarEntry.get_Name()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.NameSetString">
            <summary>Establecer el shim de TarEntry.set_Name(String value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.NameTarHeaderTarHeaderString">
            <summary>Establecer el shim de TarEntry.NameTarHeader(TarHeader header, String name)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.SetIdsInt32Int32">
            <summary>Establecer el shim de TarEntry.SetIds(Int32 userId, Int32 groupId)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.SetNamesStringString">
            <summary>Establecer el shim de TarEntry.SetNames(String userName, String groupName)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.SizeGet">
            <summary>Establecer el shim de TarEntry.get_Size()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.SizeSetInt64">
            <summary>Establecer el shim de TarEntry.set_Size(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.TarHeaderGet">
            <summary>Establecer el shim de TarEntry.get_TarHeader()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.UserIdGet">
            <summary>Establecer el shim de TarEntry.get_UserId()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.UserIdSetInt32">
            <summary>Establecer el shim de TarEntry.set_UserId(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.UserNameGet">
            <summary>Establecer el shim de TarEntry.get_UserName()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.UserNameSetString">
            <summary>Establecer el shim de TarEntry.set_UserName(String value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.WriteEntryHeaderByteArray">
            <summary>Establecer el shim de TarEntry.WriteEntryHeader(Byte[] outBuffer)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.AllInstances.Clone">
            <summary>Establecer el shim de TarEntry.Clone()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.AllInstances.EqualsObject">
            <summary>Establecer el shim de TarEntry.Equals(Object obj)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.AllInstances.FileGet">
            <summary>Establecer el shim de TarEntry.get_File()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.AllInstances.GetDirectoryEntries">
            <summary>Establecer el shim de TarEntry.GetDirectoryEntries()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.AllInstances.GetFileTarHeaderTarHeaderString">
            <summary>Establecer el shim de TarEntry.GetFileTarHeader(TarHeader header, String file)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.AllInstances.GetHashCode01">
            <summary>Establecer el shim de TarEntry.GetHashCode()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.AllInstances.GroupIdGet">
            <summary>Establecer el shim de TarEntry.get_GroupId()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.AllInstances.GroupIdSetInt32">
            <summary>Establecer el shim de TarEntry.set_GroupId(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.AllInstances.GroupNameGet">
            <summary>Establecer el shim de TarEntry.get_GroupName()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.AllInstances.GroupNameSetString">
            <summary>Establecer el shim de TarEntry.set_GroupName(String value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.AllInstances.IsDescendentTarEntry">
            <summary>Establecer el shim de TarEntry.IsDescendent(TarEntry toTest)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.AllInstances.IsDirectoryGet">
            <summary>Establecer el shim de TarEntry.get_IsDirectory()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.AllInstances.ModTimeGet">
            <summary>Establecer el shim de TarEntry.get_ModTime()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.AllInstances.ModTimeSetDateTime">
            <summary>Establecer el shim de TarEntry.set_ModTime(DateTime value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.AllInstances.NameGet">
            <summary>Establecer el shim de TarEntry.get_Name()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.AllInstances.NameSetString">
            <summary>Establecer el shim de TarEntry.set_Name(String value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.AllInstances.SetIdsInt32Int32">
            <summary>Establecer el shim de TarEntry.SetIds(Int32 userId, Int32 groupId)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.AllInstances.SetNamesStringString">
            <summary>Establecer el shim de TarEntry.SetNames(String userName, String groupName)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.AllInstances.SizeGet">
            <summary>Establecer el shim de TarEntry.get_Size()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.AllInstances.SizeSetInt64">
            <summary>Establecer el shim de TarEntry.set_Size(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.AllInstances.TarHeaderGet">
            <summary>Establecer el shim de TarEntry.get_TarHeader()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.AllInstances.UserIdGet">
            <summary>Establecer el shim de TarEntry.get_UserId()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.AllInstances.UserIdSetInt32">
            <summary>Establecer el shim de TarEntry.set_UserId(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.AllInstances.UserNameGet">
            <summary>Establecer el shim de TarEntry.get_UserName()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.AllInstances.UserNameSetString">
            <summary>Establecer el shim de TarEntry.set_UserName(String value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarEntry.AllInstances.WriteEntryHeaderByteArray">
            <summary>Establecer el shim de TarEntry.WriteEntryHeader(Byte[] outBuffer)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarException">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Tar.TarException</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarException.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarException.#ctor(ICSharpCode.SharpZipLib.Tar.TarException)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarException.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarException.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Asocia los miembros de la interfaz a las correcciones de compatibilidad (shim).</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarException.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarException.Constructor">
            <summary>Establecer el shim de TarException.TarException()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarException.ConstructorSerializationInfoStreamingContext">
            <summary>Establecer el shim de TarException.TarException(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarException.ConstructorString">
            <summary>Establecer el shim de TarException.TarException(String message)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarException.ConstructorStringException">
            <summary>Establecer el shim de TarException.TarException(String message, Exception exception)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarException.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Tar.TarHeader</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.#ctor(ICSharpCode.SharpZipLib.Tar.TarHeader)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.Bind(System.ICloneable)">
            <summary>Asocia los miembros de la interfaz a las correcciones de compatibilidad (shim).</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.ChecksumGet">
            <summary>Establecer el shim de TarHeader.get_Checksum()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.Clone">
            <summary>Establecer el shim de TarHeader.Clone()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.ComputeCheckSumByteArray">
            <summary>Establecer el shim de TarHeader.ComputeCheckSum(Byte[] buffer)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.Constructor">
            <summary>Establecer el shim de TarHeader.TarHeader()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.DevMajorGet">
            <summary>Establecer el shim de TarHeader.get_DevMajor()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.DevMajorSetInt32">
            <summary>Establecer el shim de TarHeader.set_DevMajor(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.DevMinorGet">
            <summary>Establecer el shim de TarHeader.get_DevMinor()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.DevMinorSetInt32">
            <summary>Establecer el shim de TarHeader.set_DevMinor(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.EqualsObject">
            <summary>Establecer el shim de TarHeader.Equals(Object obj)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.GetAsciiBytesStringInt32ByteArrayInt32Int32">
            <summary>Establecer el shim de TarHeader.GetAsciiBytes(String toAdd, Int32 nameOffset, Byte[] buffer, Int32 bufferOffset, Int32 length)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.GetCTimeDateTime">
            <summary>Establecer el shim de TarHeader.GetCTime(DateTime dateTime)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.GetCheckSumOctalBytesInt64ByteArrayInt32Int32">
            <summary>Establecer el shim de TarHeader.GetCheckSumOctalBytes(Int64 value, Byte[] buffer, Int32 offset, Int32 length)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.GetDateTimeFromCTimeInt64">
            <summary>Establecer el shim de TarHeader.GetDateTimeFromCTime(Int64 ticks)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.GetHashCode">
            <summary>Establecer el shim de TarHeader.GetHashCode()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.GetLongOctalBytesInt64ByteArrayInt32Int32">
            <summary>Establecer el shim de TarHeader.GetLongOctalBytes(Int64 value, Byte[] buffer, Int32 offset, Int32 length)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.GetName">
            <summary>Establecer el shim de TarHeader.GetName()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.GetNameBytesStringBuilderByteArrayInt32Int32">
            <summary>Establecer el shim de TarHeader.GetNameBytes(StringBuilder name, Byte[] buffer, Int32 offset, Int32 length)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.GetNameBytesStringBuilderInt32ByteArrayInt32Int32">
            <summary>Establecer el shim de TarHeader.GetNameBytes(StringBuilder name, Int32 nameOffset, Byte[] buffer, Int32 bufferOffset, Int32 length)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.GetNameBytesStringByteArrayInt32Int32">
            <summary>Establecer el shim de TarHeader.GetNameBytes(String name, Byte[] buffer, Int32 offset, Int32 length)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.GetNameBytesStringInt32ByteArrayInt32Int32">
            <summary>Establecer el shim de TarHeader.GetNameBytes(String name, Int32 nameOffset, Byte[] buffer, Int32 bufferOffset, Int32 length)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.GetOctalBytesInt64ByteArrayInt32Int32">
            <summary>Establecer el shim de TarHeader.GetOctalBytes(Int64 value, Byte[] buffer, Int32 offset, Int32 length)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.GroupIdGet">
            <summary>Establecer el shim de TarHeader.get_GroupId()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.GroupIdSetInt32">
            <summary>Establecer el shim de TarHeader.set_GroupId(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.GroupNameGet">
            <summary>Establecer el shim de TarHeader.get_GroupName()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.GroupNameSetString">
            <summary>Establecer el shim de TarHeader.set_GroupName(String value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.IsChecksumValidGet">
            <summary>Establecer el shim de TarHeader.get_IsChecksumValid()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.LinkNameGet">
            <summary>Establecer el shim de TarHeader.get_LinkName()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.LinkNameSetString">
            <summary>Establecer el shim de TarHeader.set_LinkName(String value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.MagicGet">
            <summary>Establecer el shim de TarHeader.get_Magic()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.MagicSetString">
            <summary>Establecer el shim de TarHeader.set_Magic(String value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.MakeCheckSumByteArray">
            <summary>Establecer el shim de TarHeader.MakeCheckSum(Byte[] buffer)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.ModTimeGet">
            <summary>Establecer el shim de TarHeader.get_ModTime()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.ModTimeSetDateTime">
            <summary>Establecer el shim de TarHeader.set_ModTime(DateTime value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.ModeGet">
            <summary>Establecer el shim de TarHeader.get_Mode()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.ModeSetInt32">
            <summary>Establecer el shim de TarHeader.set_Mode(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.NameGet">
            <summary>Establecer el shim de TarHeader.get_Name()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.NameSetString">
            <summary>Establecer el shim de TarHeader.set_Name(String value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.ParseBufferByteArray">
            <summary>Establecer el shim de TarHeader.ParseBuffer(Byte[] header)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.ParseNameByteArrayInt32Int32">
            <summary>Establecer el shim de TarHeader.ParseName(Byte[] header, Int32 offset, Int32 length)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.ParseOctalByteArrayInt32Int32">
            <summary>Establecer el shim de TarHeader.ParseOctal(Byte[] header, Int32 offset, Int32 length)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.RestoreSetValues">
            <summary>Establecer el shim de TarHeader.RestoreSetValues()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.SetValueDefaultsInt32StringInt32String">
            <summary>Establecer el shim de TarHeader.SetValueDefaults(Int32 userId, String userName, Int32 groupId, String groupName)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.SizeGet">
            <summary>Establecer el shim de TarHeader.get_Size()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.SizeSetInt64">
            <summary>Establecer el shim de TarHeader.set_Size(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.StaticConstructor">
            <summary>Establecer el shim de TarHeader.TarHeader()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.TypeFlagGet">
            <summary>Establecer el shim de TarHeader.get_TypeFlag()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.TypeFlagSetByte">
            <summary>Establecer el shim de TarHeader.set_TypeFlag(Byte value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.UserIdGet">
            <summary>Establecer el shim de TarHeader.get_UserId()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.UserIdSetInt32">
            <summary>Establecer el shim de TarHeader.set_UserId(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.UserNameGet">
            <summary>Establecer el shim de TarHeader.get_UserName()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.UserNameSetString">
            <summary>Establecer el shim de TarHeader.set_UserName(String value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.VersionGet">
            <summary>Establecer el shim de TarHeader.get_Version()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.VersionSetString">
            <summary>Establecer el shim de TarHeader.set_Version(String value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.WriteHeaderByteArray">
            <summary>Establecer el shim de TarHeader.WriteHeader(Byte[] outBuffer)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.AllInstances.ChecksumGet">
            <summary>Establecer el shim de TarHeader.get_Checksum()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.AllInstances.Clone">
            <summary>Establecer el shim de TarHeader.Clone()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.AllInstances.DevMajorGet">
            <summary>Establecer el shim de TarHeader.get_DevMajor()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.AllInstances.DevMajorSetInt32">
            <summary>Establecer el shim de TarHeader.set_DevMajor(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.AllInstances.DevMinorGet">
            <summary>Establecer el shim de TarHeader.get_DevMinor()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.AllInstances.DevMinorSetInt32">
            <summary>Establecer el shim de TarHeader.set_DevMinor(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.AllInstances.EqualsObject">
            <summary>Establecer el shim de TarHeader.Equals(Object obj)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.AllInstances.GetHashCode01">
            <summary>Establecer el shim de TarHeader.GetHashCode()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.AllInstances.GetName">
            <summary>Establecer el shim de TarHeader.GetName()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.AllInstances.GroupIdGet">
            <summary>Establecer el shim de TarHeader.get_GroupId()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.AllInstances.GroupIdSetInt32">
            <summary>Establecer el shim de TarHeader.set_GroupId(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.AllInstances.GroupNameGet">
            <summary>Establecer el shim de TarHeader.get_GroupName()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.AllInstances.GroupNameSetString">
            <summary>Establecer el shim de TarHeader.set_GroupName(String value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.AllInstances.IsChecksumValidGet">
            <summary>Establecer el shim de TarHeader.get_IsChecksumValid()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.AllInstances.LinkNameGet">
            <summary>Establecer el shim de TarHeader.get_LinkName()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.AllInstances.LinkNameSetString">
            <summary>Establecer el shim de TarHeader.set_LinkName(String value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.AllInstances.MagicGet">
            <summary>Establecer el shim de TarHeader.get_Magic()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.AllInstances.MagicSetString">
            <summary>Establecer el shim de TarHeader.set_Magic(String value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.AllInstances.ModTimeGet">
            <summary>Establecer el shim de TarHeader.get_ModTime()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.AllInstances.ModTimeSetDateTime">
            <summary>Establecer el shim de TarHeader.set_ModTime(DateTime value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.AllInstances.ModeGet">
            <summary>Establecer el shim de TarHeader.get_Mode()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.AllInstances.ModeSetInt32">
            <summary>Establecer el shim de TarHeader.set_Mode(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.AllInstances.NameGet">
            <summary>Establecer el shim de TarHeader.get_Name()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.AllInstances.NameSetString">
            <summary>Establecer el shim de TarHeader.set_Name(String value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.AllInstances.ParseBufferByteArray">
            <summary>Establecer el shim de TarHeader.ParseBuffer(Byte[] header)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.AllInstances.SizeGet">
            <summary>Establecer el shim de TarHeader.get_Size()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.AllInstances.SizeSetInt64">
            <summary>Establecer el shim de TarHeader.set_Size(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.AllInstances.TypeFlagGet">
            <summary>Establecer el shim de TarHeader.get_TypeFlag()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.AllInstances.TypeFlagSetByte">
            <summary>Establecer el shim de TarHeader.set_TypeFlag(Byte value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.AllInstances.UserIdGet">
            <summary>Establecer el shim de TarHeader.get_UserId()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.AllInstances.UserIdSetInt32">
            <summary>Establecer el shim de TarHeader.set_UserId(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.AllInstances.UserNameGet">
            <summary>Establecer el shim de TarHeader.get_UserName()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.AllInstances.UserNameSetString">
            <summary>Establecer el shim de TarHeader.set_UserName(String value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.AllInstances.VersionGet">
            <summary>Establecer el shim de TarHeader.get_Version()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.AllInstances.VersionSetString">
            <summary>Establecer el shim de TarHeader.set_Version(String value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarHeader.AllInstances.WriteHeaderByteArray">
            <summary>Establecer el shim de TarHeader.WriteHeader(Byte[] outBuffer)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Tar.TarInputStream</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.#ctor(ICSharpCode.SharpZipLib.Tar.TarInputStream)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.Bind(System.IDisposable)">
            <summary>Asocia los miembros de la interfaz a las correcciones de compatibilidad (shim).</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.AvailableGet">
            <summary>Establecer el shim de TarInputStream.get_Available()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.CanReadGet">
            <summary>Establecer el shim de TarInputStream.get_CanRead()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.CanSeekGet">
            <summary>Establecer el shim de TarInputStream.get_CanSeek()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.CanWriteGet">
            <summary>Establecer el shim de TarInputStream.get_CanWrite()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.Close">
            <summary>Establecer el shim de TarInputStream.Close()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.ConstructorStream">
            <summary>Establecer el shim de TarInputStream.TarInputStream(Stream inputStream)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.ConstructorStreamInt32">
            <summary>Establecer el shim de TarInputStream.TarInputStream(Stream inputStream, Int32 blockFactor)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.CopyEntryContentsStream">
            <summary>Establecer el shim de TarInputStream.CopyEntryContents(Stream outputStream)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.Flush">
            <summary>Establecer el shim de TarInputStream.Flush()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.GetNextEntry">
            <summary>Establecer el shim de TarInputStream.GetNextEntry()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.GetRecordSize">
            <summary>Establecer el shim de TarInputStream.GetRecordSize()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.IsMarkSupportedGet">
            <summary>Establecer el shim de TarInputStream.get_IsMarkSupported()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.LengthGet">
            <summary>Establecer el shim de TarInputStream.get_Length()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.MarkInt32">
            <summary>Establecer el shim de TarInputStream.Mark(Int32 markLimit)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.PositionGet">
            <summary>Establecer el shim de TarInputStream.get_Position()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.PositionSetInt64">
            <summary>Establecer el shim de TarInputStream.set_Position(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.ReadByte">
            <summary>Establecer el shim de TarInputStream.ReadByte()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.ReadByteArrayInt32Int32">
            <summary>Establecer el shim de TarInputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.RecordSizeGet">
            <summary>Establecer el shim de TarInputStream.get_RecordSize()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.Reset">
            <summary>Establecer el shim de TarInputStream.Reset()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.SeekInt64SeekOrigin">
            <summary>Establecer el shim de TarInputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.SetEntryFactoryTarInputStreamIEntryFactory">
            <summary>Establecer el shim de TarInputStream.SetEntryFactory(IEntryFactory factory)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.SetLengthInt64">
            <summary>Establecer el shim de TarInputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.SkipInt64">
            <summary>Establecer el shim de TarInputStream.Skip(Int64 skipCount)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.SkipToNextEntry">
            <summary>Establecer el shim de TarInputStream.SkipToNextEntry()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.WriteByteArrayInt32Int32">
            <summary>Establecer el shim de TarInputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.WriteByteByte">
            <summary>Establecer el shim de TarInputStream.WriteByte(Byte value)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.AllInstances.AvailableGet">
            <summary>Establecer el shim de TarInputStream.get_Available()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.AllInstances.CanReadGet">
            <summary>Establecer el shim de TarInputStream.get_CanRead()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.AllInstances.CanSeekGet">
            <summary>Establecer el shim de TarInputStream.get_CanSeek()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.AllInstances.CanWriteGet">
            <summary>Establecer el shim de TarInputStream.get_CanWrite()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.AllInstances.Close">
            <summary>Establecer el shim de TarInputStream.Close()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.AllInstances.CopyEntryContentsStream">
            <summary>Establecer el shim de TarInputStream.CopyEntryContents(Stream outputStream)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.AllInstances.Flush">
            <summary>Establecer el shim de TarInputStream.Flush()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.AllInstances.GetNextEntry">
            <summary>Establecer el shim de TarInputStream.GetNextEntry()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.AllInstances.GetRecordSize">
            <summary>Establecer el shim de TarInputStream.GetRecordSize()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.AllInstances.IsMarkSupportedGet">
            <summary>Establecer el shim de TarInputStream.get_IsMarkSupported()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.AllInstances.LengthGet">
            <summary>Establecer el shim de TarInputStream.get_Length()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.AllInstances.MarkInt32">
            <summary>Establecer el shim de TarInputStream.Mark(Int32 markLimit)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.AllInstances.PositionGet">
            <summary>Establecer el shim de TarInputStream.get_Position()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.AllInstances.PositionSetInt64">
            <summary>Establecer el shim de TarInputStream.set_Position(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.AllInstances.ReadByte">
            <summary>Establecer el shim de TarInputStream.ReadByte()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.AllInstances.ReadByteArrayInt32Int32">
            <summary>Establecer el shim de TarInputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.AllInstances.RecordSizeGet">
            <summary>Establecer el shim de TarInputStream.get_RecordSize()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.AllInstances.Reset">
            <summary>Establecer el shim de TarInputStream.Reset()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.AllInstances.SeekInt64SeekOrigin">
            <summary>Establecer el shim de TarInputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.AllInstances.SetEntryFactoryTarInputStreamIEntryFactory">
            <summary>Establecer el shim de TarInputStream.SetEntryFactory(IEntryFactory factory)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.AllInstances.SetLengthInt64">
            <summary>Establecer el shim de TarInputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.AllInstances.SkipInt64">
            <summary>Establecer el shim de TarInputStream.Skip(Int64 skipCount)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.AllInstances.SkipToNextEntry">
            <summary>Establecer el shim de TarInputStream.SkipToNextEntry()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.AllInstances.WriteByteArrayInt32Int32">
            <summary>Establecer el shim de TarInputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.AllInstances.WriteByteByte">
            <summary>Establecer el shim de TarInputStream.WriteByte(Byte value)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.ShimEntryFactoryAdapter">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Tar.TarInputStream+EntryFactoryAdapter</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.ShimEntryFactoryAdapter.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.ShimEntryFactoryAdapter.#ctor(ICSharpCode.SharpZipLib.Tar.TarInputStream.EntryFactoryAdapter)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.ShimEntryFactoryAdapter.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.ShimEntryFactoryAdapter.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.ShimEntryFactoryAdapter.Bind(ICSharpCode.SharpZipLib.Tar.TarInputStream.IEntryFactory)">
            <summary>Asocia los miembros de la interfaz a las correcciones de compatibilidad (shim).</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.ShimEntryFactoryAdapter.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.ShimEntryFactoryAdapter.Constructor">
            <summary>Establecer el shim de EntryFactoryAdapter.EntryFactoryAdapter()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.ShimEntryFactoryAdapter.CreateEntryByteArray">
            <summary>Establecer el shim de EntryFactoryAdapter.CreateEntry(Byte[] headerBuffer)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.ShimEntryFactoryAdapter.CreateEntryFromFileString">
            <summary>Establecer el shim de EntryFactoryAdapter.CreateEntryFromFile(String fileName)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.ShimEntryFactoryAdapter.CreateEntryString">
            <summary>Establecer el shim de EntryFactoryAdapter.CreateEntry(String name)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.ShimEntryFactoryAdapter.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.ShimEntryFactoryAdapter.AllInstances.CreateEntryByteArray">
            <summary>Establecer el shim de EntryFactoryAdapter.CreateEntry(Byte[] headerBuffer)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.ShimEntryFactoryAdapter.AllInstances.CreateEntryFromFileString">
            <summary>Establecer el shim de EntryFactoryAdapter.CreateEntryFromFile(String fileName)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarInputStream.ShimEntryFactoryAdapter.AllInstances.CreateEntryString">
            <summary>Establecer el shim de EntryFactoryAdapter.CreateEntry(String name)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Tar.TarOutputStream</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.#ctor(ICSharpCode.SharpZipLib.Tar.TarOutputStream)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.Bind(System.IDisposable)">
            <summary>Asocia los miembros de la interfaz a las correcciones de compatibilidad (shim).</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.CanReadGet">
            <summary>Establecer el shim de TarOutputStream.get_CanRead()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.CanSeekGet">
            <summary>Establecer el shim de TarOutputStream.get_CanSeek()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.CanWriteGet">
            <summary>Establecer el shim de TarOutputStream.get_CanWrite()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.Close">
            <summary>Establecer el shim de TarOutputStream.Close()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.CloseEntry">
            <summary>Establecer el shim de TarOutputStream.CloseEntry()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.ConstructorStream">
            <summary>Establecer el shim de TarOutputStream.TarOutputStream(Stream outputStream)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.ConstructorStreamInt32">
            <summary>Establecer el shim de TarOutputStream.TarOutputStream(Stream outputStream, Int32 blockFactor)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.Finish">
            <summary>Establecer el shim de TarOutputStream.Finish()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.Flush">
            <summary>Establecer el shim de TarOutputStream.Flush()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.GetRecordSize">
            <summary>Establecer el shim de TarOutputStream.GetRecordSize()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.IsEntryOpenGet">
            <summary>Establecer el shim de TarOutputStream.get_IsEntryOpen()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.LengthGet">
            <summary>Establecer el shim de TarOutputStream.get_Length()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.PositionGet">
            <summary>Establecer el shim de TarOutputStream.get_Position()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.PositionSetInt64">
            <summary>Establecer el shim de TarOutputStream.set_Position(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.PutNextEntryTarEntry">
            <summary>Establecer el shim de TarOutputStream.PutNextEntry(TarEntry entry)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.ReadByte">
            <summary>Establecer el shim de TarOutputStream.ReadByte()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.ReadByteArrayInt32Int32">
            <summary>Establecer el shim de TarOutputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.RecordSizeGet">
            <summary>Establecer el shim de TarOutputStream.get_RecordSize()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.SeekInt64SeekOrigin">
            <summary>Establecer el shim de TarOutputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.SetLengthInt64">
            <summary>Establecer el shim de TarOutputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.WriteByteArrayInt32Int32">
            <summary>Establecer el shim de TarOutputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.WriteByteByte">
            <summary>Establecer el shim de TarOutputStream.WriteByte(Byte value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.WriteEofBlock">
            <summary>Establecer el shim de TarOutputStream.WriteEofBlock()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.AllInstances.CanReadGet">
            <summary>Establecer el shim de TarOutputStream.get_CanRead()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.AllInstances.CanSeekGet">
            <summary>Establecer el shim de TarOutputStream.get_CanSeek()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.AllInstances.CanWriteGet">
            <summary>Establecer el shim de TarOutputStream.get_CanWrite()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.AllInstances.Close">
            <summary>Establecer el shim de TarOutputStream.Close()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.AllInstances.CloseEntry">
            <summary>Establecer el shim de TarOutputStream.CloseEntry()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.AllInstances.Finish">
            <summary>Establecer el shim de TarOutputStream.Finish()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.AllInstances.Flush">
            <summary>Establecer el shim de TarOutputStream.Flush()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.AllInstances.GetRecordSize">
            <summary>Establecer el shim de TarOutputStream.GetRecordSize()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.AllInstances.IsEntryOpenGet">
            <summary>Establecer el shim de TarOutputStream.get_IsEntryOpen()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.AllInstances.LengthGet">
            <summary>Establecer el shim de TarOutputStream.get_Length()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.AllInstances.PositionGet">
            <summary>Establecer el shim de TarOutputStream.get_Position()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.AllInstances.PositionSetInt64">
            <summary>Establecer el shim de TarOutputStream.set_Position(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.AllInstances.PutNextEntryTarEntry">
            <summary>Establecer el shim de TarOutputStream.PutNextEntry(TarEntry entry)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.AllInstances.ReadByte">
            <summary>Establecer el shim de TarOutputStream.ReadByte()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.AllInstances.ReadByteArrayInt32Int32">
            <summary>Establecer el shim de TarOutputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.AllInstances.RecordSizeGet">
            <summary>Establecer el shim de TarOutputStream.get_RecordSize()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.AllInstances.SeekInt64SeekOrigin">
            <summary>Establecer el shim de TarOutputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.AllInstances.SetLengthInt64">
            <summary>Establecer el shim de TarOutputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.AllInstances.WriteByteArrayInt32Int32">
            <summary>Establecer el shim de TarOutputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.AllInstances.WriteByteByte">
            <summary>Establecer el shim de TarOutputStream.WriteByte(Byte value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.ShimTarOutputStream.AllInstances.WriteEofBlock">
            <summary>Establecer el shim de TarOutputStream.WriteEofBlock()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.Fakes.StubInvalidHeaderException">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Tar.InvalidHeaderException</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubInvalidHeaderException.#ctor">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubInvalidHeaderException.#ctor(System.String)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubInvalidHeaderException.#ctor(System.String,System.Exception)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubInvalidHeaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubInvalidHeaderException.AttachBackingFieldToHelpLink">
            <summary>Asocia delegados para emular StubInvalidHeaderException.HelpLink como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubInvalidHeaderException.AttachBackingFieldToSource">
            <summary>Asocia delegados para emular StubInvalidHeaderException.Source como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubInvalidHeaderException.DataGet">
            <summary>Establecer el stub de Exception.get_Data()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubInvalidHeaderException.GetBaseException">
            <summary>Establecer el stub de Exception.GetBaseException()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubInvalidHeaderException.GetBaseException01">
            <summary>Establecer el stub de Exception.GetBaseException()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubInvalidHeaderException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Establecer el stub de Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubInvalidHeaderException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Establecer el stub de Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubInvalidHeaderException.HelpLinkGet">
            <summary>Establecer el stub de Exception.get_HelpLink()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubInvalidHeaderException.HelpLinkSetString">
            <summary>Establecer el stub de Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubInvalidHeaderException.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubInvalidHeaderException</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubInvalidHeaderException.MessageGet">
            <summary>Establecer el stub de Exception.get_Message()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubInvalidHeaderException.SourceGet">
            <summary>Establecer el stub de Exception.get_Source()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubInvalidHeaderException.SourceSetString">
            <summary>Establecer el stub de Exception.set_Source(String value)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubInvalidHeaderException.StackTraceGet">
            <summary>Establecer el stub de Exception.get_StackTrace()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubInvalidHeaderException.ToString">
            <summary>Establecer el stub de Exception.ToString()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubInvalidHeaderException.ToString01">
            <summary>Establecer el stub de Exception.ToString()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubInvalidHeaderException.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubInvalidHeaderException.Data">
            <summary>Establecer el stub de Exception.get_Data()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubInvalidHeaderException.HelpLink">
            <summary>Establecer el stub de Exception.get_HelpLink()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubInvalidHeaderException.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubInvalidHeaderException.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubInvalidHeaderException.Message">
            <summary>Establecer el stub de Exception.get_Message()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubInvalidHeaderException.Source">
            <summary>Establecer el stub de Exception.get_Source()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubInvalidHeaderException.StackTrace">
            <summary>Establecer el stub de Exception.get_StackTrace()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarArchive">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Tar.TarArchive</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarArchive.#ctor">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarArchive.#ctor(ICSharpCode.SharpZipLib.Tar.TarInputStream)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarArchive.#ctor(ICSharpCode.SharpZipLib.Tar.TarOutputStream)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarArchive.Close">
            <summary>Establecer el stub de TarArchive.Close()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarArchive.Close01">
            <summary>Establecer el stub de TarArchive.Close()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarArchive.Dispose(System.Boolean)">
            <summary>Establecer el stub de TarArchive.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarArchive.DisposeBoolean">
            <summary>Establecer el stub de TarArchive.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarArchive.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubTarArchive</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarArchive.OnProgressMessageEvent(ICSharpCode.SharpZipLib.Tar.TarEntry,System.String)">
            <summary>Establecer el stub de TarArchive.OnProgressMessageEvent(TarEntry entry, String message)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarArchive.OnProgressMessageEventTarEntryString">
            <summary>Establecer el stub de TarArchive.OnProgressMessageEvent(TarEntry entry, String message)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarArchive.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarArchive.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarArchive.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarBuffer">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Tar.TarBuffer</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarBuffer.#ctor">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarBuffer.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubTarBuffer</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarBuffer.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarBuffer.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarBuffer.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarEntry">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Tar.TarEntry</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarEntry.#ctor(ICSharpCode.SharpZipLib.Tar.TarHeader)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarEntry.#ctor(System.Byte[])">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarEntry.Equals(System.Object)">
            <summary>Establecer el stub de TarEntry.Equals(Object obj)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarEntry.EqualsObject">
            <summary>Establecer el stub de TarEntry.Equals(Object obj)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarEntry.GetHashCode">
            <summary>Establecer el stub de TarEntry.GetHashCode()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarEntry.GetHashCode01">
            <summary>Establecer el stub de TarEntry.GetHashCode()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarEntry.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubTarEntry</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarEntry.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarEntry.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarEntry.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarException">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Tar.TarException</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarException.#ctor">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarException.#ctor(System.String)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarException.#ctor(System.String,System.Exception)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarException.AttachBackingFieldToHelpLink">
            <summary>Asocia delegados para emular StubTarException.HelpLink como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarException.AttachBackingFieldToSource">
            <summary>Asocia delegados para emular StubTarException.Source como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarException.DataGet">
            <summary>Establecer el stub de Exception.get_Data()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarException.GetBaseException">
            <summary>Establecer el stub de Exception.GetBaseException()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarException.GetBaseException01">
            <summary>Establecer el stub de Exception.GetBaseException()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Establecer el stub de Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Establecer el stub de Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarException.HelpLinkGet">
            <summary>Establecer el stub de Exception.get_HelpLink()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarException.HelpLinkSetString">
            <summary>Establecer el stub de Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarException.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubTarException</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarException.MessageGet">
            <summary>Establecer el stub de Exception.get_Message()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarException.SourceGet">
            <summary>Establecer el stub de Exception.get_Source()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarException.SourceSetString">
            <summary>Establecer el stub de Exception.set_Source(String value)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarException.StackTraceGet">
            <summary>Establecer el stub de Exception.get_StackTrace()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarException.ToString">
            <summary>Establecer el stub de Exception.ToString()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarException.ToString01">
            <summary>Establecer el stub de Exception.ToString()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarException.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarException.Data">
            <summary>Establecer el stub de Exception.get_Data()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarException.HelpLink">
            <summary>Establecer el stub de Exception.get_HelpLink()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarException.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarException.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarException.Message">
            <summary>Establecer el stub de Exception.get_Message()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarException.Source">
            <summary>Establecer el stub de Exception.get_Source()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarException.StackTrace">
            <summary>Establecer el stub de Exception.get_StackTrace()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Tar.TarInputStream</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.#ctor(System.IO.Stream)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.AttachBackingFieldToPosition">
            <summary>Asocia delegados para emular StubTarInputStream.Position como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.AttachBackingFieldToReadTimeout">
            <summary>Asocia delegados para emular StubTarInputStream.ReadTimeout como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.AttachBackingFieldToWriteTimeout">
            <summary>Asocia delegados para emular StubTarInputStream.WriteTimeout como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Establecer el stub de Stream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.BeginReadByteArrayInt32Int32AsyncCallbackObject">
            <summary>Establecer el stub de Stream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Establecer el stub de Stream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.BeginWriteByteArrayInt32Int32AsyncCallbackObject">
            <summary>Establecer el stub de Stream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.CanReadGet">
            <summary>Establecer el stub de TarInputStream.get_CanRead()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.CanSeekGet">
            <summary>Establecer el stub de TarInputStream.get_CanSeek()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.CanTimeoutGet">
            <summary>Establecer el stub de Stream.get_CanTimeout()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.CanWriteGet">
            <summary>Establecer el stub de TarInputStream.get_CanWrite()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.Close">
            <summary>Establecer el stub de TarInputStream.Close()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.Close01">
            <summary>Establecer el stub de TarInputStream.Close()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.CreateWaitHandle">
            <summary>Establecer el stub de Stream.CreateWaitHandle()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.CreateWaitHandle01">
            <summary>Establecer el stub de Stream.CreateWaitHandle()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.Dispose(System.Boolean)">
            <summary>Establecer el stub de Stream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.DisposeBoolean">
            <summary>Establecer el stub de Stream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.EndRead(System.IAsyncResult)">
            <summary>Establecer el stub de Stream.EndRead(IAsyncResult asyncResult)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.EndReadIAsyncResult">
            <summary>Establecer el stub de Stream.EndRead(IAsyncResult asyncResult)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.EndWrite(System.IAsyncResult)">
            <summary>Establecer el stub de Stream.EndWrite(IAsyncResult asyncResult)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.EndWriteIAsyncResult">
            <summary>Establecer el stub de Stream.EndWrite(IAsyncResult asyncResult)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.Flush">
            <summary>Establecer el stub de TarInputStream.Flush()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.Flush01">
            <summary>Establecer el stub de TarInputStream.Flush()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubTarInputStream</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.LengthGet">
            <summary>Establecer el stub de TarInputStream.get_Length()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.ObjectInvariant">
            <summary>Establecer el stub de Stream.ObjectInvariant()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.ObjectInvariant01">
            <summary>Establecer el stub de Stream.ObjectInvariant()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.PositionGet">
            <summary>Establecer el stub de TarInputStream.get_Position()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.PositionSetInt64">
            <summary>Establecer el stub de TarInputStream.set_Position(Int64 value)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>Establecer el stub de TarInputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.ReadByte">
            <summary>Establecer el stub de TarInputStream.ReadByte()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.ReadByte01">
            <summary>Establecer el stub de TarInputStream.ReadByte()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.ReadByteArrayInt32Int32">
            <summary>Establecer el stub de TarInputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.ReadTimeoutGet">
            <summary>Establecer el stub de Stream.get_ReadTimeout()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.ReadTimeoutSetInt32">
            <summary>Establecer el stub de Stream.set_ReadTimeout(Int32 value)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>Establecer el stub de TarInputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.SeekInt64SeekOrigin">
            <summary>Establecer el stub de TarInputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.SetLength(System.Int64)">
            <summary>Establecer el stub de TarInputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.SetLengthInt64">
            <summary>Establecer el stub de TarInputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Establecer el stub de TarInputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.WriteByte(System.Byte)">
            <summary>Establecer el stub de TarInputStream.WriteByte(Byte value)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.WriteByteArrayInt32Int32">
            <summary>Establecer el stub de TarInputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.WriteByteByte">
            <summary>Establecer el stub de TarInputStream.WriteByte(Byte value)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.WriteTimeoutGet">
            <summary>Establecer el stub de Stream.get_WriteTimeout()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.WriteTimeoutSetInt32">
            <summary>Establecer el stub de Stream.set_WriteTimeout(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.CanRead">
            <summary>Establecer el stub de TarInputStream.get_CanRead()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.CanSeek">
            <summary>Establecer el stub de TarInputStream.get_CanSeek()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.CanTimeout">
            <summary>Establecer el stub de Stream.get_CanTimeout()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.CanWrite">
            <summary>Establecer el stub de TarInputStream.get_CanWrite()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.Length">
            <summary>Establecer el stub de TarInputStream.get_Length()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.Position">
            <summary>Establecer el stub de TarInputStream.get_Position()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.ReadTimeout">
            <summary>Establecer el stub de Stream.get_ReadTimeout()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarInputStream.WriteTimeout">
            <summary>Establecer el stub de Stream.get_WriteTimeout()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Tar.TarOutputStream</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.#ctor(System.IO.Stream)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.AttachBackingFieldToPosition">
            <summary>Asocia delegados para emular StubTarOutputStream.Position como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.AttachBackingFieldToReadTimeout">
            <summary>Asocia delegados para emular StubTarOutputStream.ReadTimeout como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.AttachBackingFieldToWriteTimeout">
            <summary>Asocia delegados para emular StubTarOutputStream.WriteTimeout como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Establecer el stub de Stream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.BeginReadByteArrayInt32Int32AsyncCallbackObject">
            <summary>Establecer el stub de Stream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Establecer el stub de Stream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.BeginWriteByteArrayInt32Int32AsyncCallbackObject">
            <summary>Establecer el stub de Stream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.CanReadGet">
            <summary>Establecer el stub de TarOutputStream.get_CanRead()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.CanSeekGet">
            <summary>Establecer el stub de TarOutputStream.get_CanSeek()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.CanTimeoutGet">
            <summary>Establecer el stub de Stream.get_CanTimeout()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.CanWriteGet">
            <summary>Establecer el stub de TarOutputStream.get_CanWrite()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.Close">
            <summary>Establecer el stub de TarOutputStream.Close()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.Close01">
            <summary>Establecer el stub de TarOutputStream.Close()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.CreateWaitHandle">
            <summary>Establecer el stub de Stream.CreateWaitHandle()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.CreateWaitHandle01">
            <summary>Establecer el stub de Stream.CreateWaitHandle()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.Dispose(System.Boolean)">
            <summary>Establecer el stub de Stream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.DisposeBoolean">
            <summary>Establecer el stub de Stream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.EndRead(System.IAsyncResult)">
            <summary>Establecer el stub de Stream.EndRead(IAsyncResult asyncResult)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.EndReadIAsyncResult">
            <summary>Establecer el stub de Stream.EndRead(IAsyncResult asyncResult)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.EndWrite(System.IAsyncResult)">
            <summary>Establecer el stub de Stream.EndWrite(IAsyncResult asyncResult)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.EndWriteIAsyncResult">
            <summary>Establecer el stub de Stream.EndWrite(IAsyncResult asyncResult)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.Flush">
            <summary>Establecer el stub de TarOutputStream.Flush()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.Flush01">
            <summary>Establecer el stub de TarOutputStream.Flush()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubTarOutputStream</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.LengthGet">
            <summary>Establecer el stub de TarOutputStream.get_Length()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.ObjectInvariant">
            <summary>Establecer el stub de Stream.ObjectInvariant()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.ObjectInvariant01">
            <summary>Establecer el stub de Stream.ObjectInvariant()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.PositionGet">
            <summary>Establecer el stub de TarOutputStream.get_Position()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.PositionSetInt64">
            <summary>Establecer el stub de TarOutputStream.set_Position(Int64 value)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>Establecer el stub de TarOutputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.ReadByte">
            <summary>Establecer el stub de TarOutputStream.ReadByte()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.ReadByte01">
            <summary>Establecer el stub de TarOutputStream.ReadByte()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.ReadByteArrayInt32Int32">
            <summary>Establecer el stub de TarOutputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.ReadTimeoutGet">
            <summary>Establecer el stub de Stream.get_ReadTimeout()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.ReadTimeoutSetInt32">
            <summary>Establecer el stub de Stream.set_ReadTimeout(Int32 value)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>Establecer el stub de TarOutputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.SeekInt64SeekOrigin">
            <summary>Establecer el stub de TarOutputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.SetLength(System.Int64)">
            <summary>Establecer el stub de TarOutputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.SetLengthInt64">
            <summary>Establecer el stub de TarOutputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Establecer el stub de TarOutputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.WriteByte(System.Byte)">
            <summary>Establecer el stub de TarOutputStream.WriteByte(Byte value)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.WriteByteArrayInt32Int32">
            <summary>Establecer el stub de TarOutputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.WriteByteByte">
            <summary>Establecer el stub de TarOutputStream.WriteByte(Byte value)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.WriteTimeoutGet">
            <summary>Establecer el stub de Stream.get_WriteTimeout()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.WriteTimeoutSetInt32">
            <summary>Establecer el stub de Stream.set_WriteTimeout(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.CanRead">
            <summary>Establecer el stub de TarOutputStream.get_CanRead()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.CanSeek">
            <summary>Establecer el stub de TarOutputStream.get_CanSeek()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.CanTimeout">
            <summary>Establecer el stub de Stream.get_CanTimeout()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.CanWrite">
            <summary>Establecer el stub de TarOutputStream.get_CanWrite()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.Length">
            <summary>Establecer el stub de TarOutputStream.get_Length()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.Position">
            <summary>Establecer el stub de TarOutputStream.get_Position()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.ReadTimeout">
            <summary>Establecer el stub de Stream.get_ReadTimeout()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.Fakes.StubTarOutputStream.WriteTimeout">
            <summary>Establecer el stub de Stream.get_WriteTimeout()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflater">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Zip.Compression.Deflater</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflater.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflater.#ctor(ICSharpCode.SharpZipLib.Zip.Compression.Deflater)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflater.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflater.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflater.AdlerGet">
            <summary>Establecer el shim de Deflater.get_Adler()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflater.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflater.Constructor">
            <summary>Establecer el shim de Deflater.Deflater()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflater.ConstructorInt32">
            <summary>Establecer el shim de Deflater.Deflater(Int32 level)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflater.ConstructorInt32Boolean">
            <summary>Establecer el shim de Deflater.Deflater(Int32 level, Boolean noZlibHeaderOrFooter)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflater.DeflateByteArray">
            <summary>Establecer el shim de Deflater.Deflate(Byte[] output)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflater.DeflateByteArrayInt32Int32">
            <summary>Establecer el shim de Deflater.Deflate(Byte[] output, Int32 offset, Int32 length)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflater.Finish">
            <summary>Establecer el shim de Deflater.Finish()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflater.Flush">
            <summary>Establecer el shim de Deflater.Flush()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflater.GetLevel">
            <summary>Establecer el shim de Deflater.GetLevel()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflater.IsFinishedGet">
            <summary>Establecer el shim de Deflater.get_IsFinished()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflater.IsNeedingInputGet">
            <summary>Establecer el shim de Deflater.get_IsNeedingInput()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflater.Reset">
            <summary>Establecer el shim de Deflater.Reset()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflater.SetDictionaryByteArray">
            <summary>Establecer el shim de Deflater.SetDictionary(Byte[] dictionary)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflater.SetDictionaryByteArrayInt32Int32">
            <summary>Establecer el shim de Deflater.SetDictionary(Byte[] dictionary, Int32 index, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflater.SetInputByteArray">
            <summary>Establecer el shim de Deflater.SetInput(Byte[] input)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflater.SetInputByteArrayInt32Int32">
            <summary>Establecer el shim de Deflater.SetInput(Byte[] input, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflater.SetLevelInt32">
            <summary>Establecer el shim de Deflater.SetLevel(Int32 level)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflater.SetStrategyDeflateStrategy">
            <summary>Establecer el shim de Deflater.SetStrategy(DeflateStrategy strategy)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflater.TotalInGet">
            <summary>Establecer el shim de Deflater.get_TotalIn()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflater.TotalOutGet">
            <summary>Establecer el shim de Deflater.get_TotalOut()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflater.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflater.AllInstances.AdlerGet">
            <summary>Establecer el shim de Deflater.get_Adler()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflater.AllInstances.DeflateByteArray">
            <summary>Establecer el shim de Deflater.Deflate(Byte[] output)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflater.AllInstances.DeflateByteArrayInt32Int32">
            <summary>Establecer el shim de Deflater.Deflate(Byte[] output, Int32 offset, Int32 length)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflater.AllInstances.Finish">
            <summary>Establecer el shim de Deflater.Finish()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflater.AllInstances.Flush">
            <summary>Establecer el shim de Deflater.Flush()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflater.AllInstances.GetLevel">
            <summary>Establecer el shim de Deflater.GetLevel()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflater.AllInstances.IsFinishedGet">
            <summary>Establecer el shim de Deflater.get_IsFinished()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflater.AllInstances.IsNeedingInputGet">
            <summary>Establecer el shim de Deflater.get_IsNeedingInput()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflater.AllInstances.Reset">
            <summary>Establecer el shim de Deflater.Reset()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflater.AllInstances.SetDictionaryByteArray">
            <summary>Establecer el shim de Deflater.SetDictionary(Byte[] dictionary)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflater.AllInstances.SetDictionaryByteArrayInt32Int32">
            <summary>Establecer el shim de Deflater.SetDictionary(Byte[] dictionary, Int32 index, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflater.AllInstances.SetInputByteArray">
            <summary>Establecer el shim de Deflater.SetInput(Byte[] input)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflater.AllInstances.SetInputByteArrayInt32Int32">
            <summary>Establecer el shim de Deflater.SetInput(Byte[] input, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflater.AllInstances.SetLevelInt32">
            <summary>Establecer el shim de Deflater.SetLevel(Int32 level)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflater.AllInstances.SetStrategyDeflateStrategy">
            <summary>Establecer el shim de Deflater.SetStrategy(DeflateStrategy strategy)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflater.AllInstances.TotalInGet">
            <summary>Establecer el shim de Deflater.get_TotalIn()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflater.AllInstances.TotalOutGet">
            <summary>Establecer el shim de Deflater.get_TotalOut()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterConstants">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterConstants.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterConstants.#ctor(ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterConstants.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterConstants.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterConstants.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterConstants.Constructor">
            <summary>Establecer el shim de DeflaterConstants.DeflaterConstants()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterConstants.StaticConstructor">
            <summary>Establecer el shim de DeflaterConstants.DeflaterConstants()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterConstants.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine.#ctor(ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine.AdlerGet">
            <summary>Establecer el shim de DeflaterEngine.get_Adler()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine.ConstructorDeflaterPending">
            <summary>Establecer el shim de DeflaterEngine.DeflaterEngine(DeflaterPending pending)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine.DeflateBooleanBoolean">
            <summary>Establecer el shim de DeflaterEngine.Deflate(Boolean flush, Boolean finish)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine.DeflateFastBooleanBoolean">
            <summary>Establecer el shim de DeflaterEngine.DeflateFast(Boolean flush, Boolean finish)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine.DeflateSlowBooleanBoolean">
            <summary>Establecer el shim de DeflaterEngine.DeflateSlow(Boolean flush, Boolean finish)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine.DeflateStoredBooleanBoolean">
            <summary>Establecer el shim de DeflaterEngine.DeflateStored(Boolean flush, Boolean finish)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine.FillWindow">
            <summary>Establecer el shim de DeflaterEngine.FillWindow()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine.FindLongestMatchInt32">
            <summary>Establecer el shim de DeflaterEngine.FindLongestMatch(Int32 curMatch)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine.InsertString">
            <summary>Establecer el shim de DeflaterEngine.InsertString()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine.NeedsInput">
            <summary>Establecer el shim de DeflaterEngine.NeedsInput()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine.Reset">
            <summary>Establecer el shim de DeflaterEngine.Reset()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine.ResetAdler">
            <summary>Establecer el shim de DeflaterEngine.ResetAdler()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine.SetDictionaryByteArrayInt32Int32">
            <summary>Establecer el shim de DeflaterEngine.SetDictionary(Byte[] buffer, Int32 offset, Int32 length)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine.SetInputByteArrayInt32Int32">
            <summary>Establecer el shim de DeflaterEngine.SetInput(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine.SetLevelInt32">
            <summary>Establecer el shim de DeflaterEngine.SetLevel(Int32 level)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine.SlideWindow">
            <summary>Establecer el shim de DeflaterEngine.SlideWindow()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine.StrategyGet">
            <summary>Establecer el shim de DeflaterEngine.get_Strategy()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine.StrategySetDeflateStrategy">
            <summary>Establecer el shim de DeflaterEngine.set_Strategy(DeflateStrategy value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine.TotalInGet">
            <summary>Establecer el shim de DeflaterEngine.get_TotalIn()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine.UpdateHash">
            <summary>Establecer el shim de DeflaterEngine.UpdateHash()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine.AllInstances.AdlerGet">
            <summary>Establecer el shim de DeflaterEngine.get_Adler()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine.AllInstances.DeflateBooleanBoolean">
            <summary>Establecer el shim de DeflaterEngine.Deflate(Boolean flush, Boolean finish)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine.AllInstances.DeflateFastBooleanBoolean">
            <summary>Establecer el shim de DeflaterEngine.DeflateFast(Boolean flush, Boolean finish)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine.AllInstances.DeflateSlowBooleanBoolean">
            <summary>Establecer el shim de DeflaterEngine.DeflateSlow(Boolean flush, Boolean finish)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine.AllInstances.DeflateStoredBooleanBoolean">
            <summary>Establecer el shim de DeflaterEngine.DeflateStored(Boolean flush, Boolean finish)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine.AllInstances.FillWindow">
            <summary>Establecer el shim de DeflaterEngine.FillWindow()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine.AllInstances.FindLongestMatchInt32">
            <summary>Establecer el shim de DeflaterEngine.FindLongestMatch(Int32 curMatch)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine.AllInstances.InsertString">
            <summary>Establecer el shim de DeflaterEngine.InsertString()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine.AllInstances.NeedsInput">
            <summary>Establecer el shim de DeflaterEngine.NeedsInput()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine.AllInstances.Reset">
            <summary>Establecer el shim de DeflaterEngine.Reset()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine.AllInstances.ResetAdler">
            <summary>Establecer el shim de DeflaterEngine.ResetAdler()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine.AllInstances.SetDictionaryByteArrayInt32Int32">
            <summary>Establecer el shim de DeflaterEngine.SetDictionary(Byte[] buffer, Int32 offset, Int32 length)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine.AllInstances.SetInputByteArrayInt32Int32">
            <summary>Establecer el shim de DeflaterEngine.SetInput(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine.AllInstances.SetLevelInt32">
            <summary>Establecer el shim de DeflaterEngine.SetLevel(Int32 level)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine.AllInstances.SlideWindow">
            <summary>Establecer el shim de DeflaterEngine.SlideWindow()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine.AllInstances.StrategyGet">
            <summary>Establecer el shim de DeflaterEngine.get_Strategy()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine.AllInstances.StrategySetDeflateStrategy">
            <summary>Establecer el shim de DeflaterEngine.set_Strategy(DeflateStrategy value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine.AllInstances.TotalInGet">
            <summary>Establecer el shim de DeflaterEngine.get_TotalIn()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterEngine.AllInstances.UpdateHash">
            <summary>Establecer el shim de DeflaterEngine.UpdateHash()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterHuffman">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterHuffman.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterHuffman.#ctor(ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterHuffman.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterHuffman.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterHuffman.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterHuffman.BitReverseInt32">
            <summary>Establecer el shim de DeflaterHuffman.BitReverse(Int32 toReverse)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterHuffman.CompressBlock">
            <summary>Establecer el shim de DeflaterHuffman.CompressBlock()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterHuffman.ConstructorDeflaterPending">
            <summary>Establecer el shim de DeflaterHuffman.DeflaterHuffman(DeflaterPending pending)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterHuffman.DcodeInt32">
            <summary>Establecer el shim de DeflaterHuffman.Dcode(Int32 distance)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterHuffman.FlushBlockByteArrayInt32Int32Boolean">
            <summary>Establecer el shim de DeflaterHuffman.FlushBlock(Byte[] stored, Int32 storedOffset, Int32 storedLength, Boolean lastBlock)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterHuffman.FlushStoredBlockByteArrayInt32Int32Boolean">
            <summary>Establecer el shim de DeflaterHuffman.FlushStoredBlock(Byte[] stored, Int32 storedOffset, Int32 storedLength, Boolean lastBlock)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterHuffman.IsFull">
            <summary>Establecer el shim de DeflaterHuffman.IsFull()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterHuffman.LcodeInt32">
            <summary>Establecer el shim de DeflaterHuffman.Lcode(Int32 length)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterHuffman.Reset">
            <summary>Establecer el shim de DeflaterHuffman.Reset()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterHuffman.SendAllTreesInt32">
            <summary>Establecer el shim de DeflaterHuffman.SendAllTrees(Int32 blTreeCodes)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterHuffman.StaticConstructor">
            <summary>Establecer el shim de DeflaterHuffman.DeflaterHuffman()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterHuffman.TallyDistInt32Int32">
            <summary>Establecer el shim de DeflaterHuffman.TallyDist(Int32 distance, Int32 length)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterHuffman.TallyLitInt32">
            <summary>Establecer el shim de DeflaterHuffman.TallyLit(Int32 literal)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterHuffman.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterHuffman.AllInstances.CompressBlock">
            <summary>Establecer el shim de DeflaterHuffman.CompressBlock()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterHuffman.AllInstances.FlushBlockByteArrayInt32Int32Boolean">
            <summary>Establecer el shim de DeflaterHuffman.FlushBlock(Byte[] stored, Int32 storedOffset, Int32 storedLength, Boolean lastBlock)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterHuffman.AllInstances.FlushStoredBlockByteArrayInt32Int32Boolean">
            <summary>Establecer el shim de DeflaterHuffman.FlushStoredBlock(Byte[] stored, Int32 storedOffset, Int32 storedLength, Boolean lastBlock)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterHuffman.AllInstances.IsFull">
            <summary>Establecer el shim de DeflaterHuffman.IsFull()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterHuffman.AllInstances.Reset">
            <summary>Establecer el shim de DeflaterHuffman.Reset()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterHuffman.AllInstances.SendAllTreesInt32">
            <summary>Establecer el shim de DeflaterHuffman.SendAllTrees(Int32 blTreeCodes)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterHuffman.AllInstances.TallyDistInt32Int32">
            <summary>Establecer el shim de DeflaterHuffman.TallyDist(Int32 distance, Int32 length)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterHuffman.AllInstances.TallyLitInt32">
            <summary>Establecer el shim de DeflaterHuffman.TallyLit(Int32 literal)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterPending">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterPending.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterPending.#ctor(ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterPending.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterPending.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterPending.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterPending.Constructor">
            <summary>Establecer el shim de DeflaterPending.DeflaterPending()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimDeflaterPending.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Zip.Compression.Inflater</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.#ctor(ICSharpCode.SharpZipLib.Zip.Compression.Inflater)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.AdlerGet">
            <summary>Establecer el shim de Inflater.get_Adler()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.Constructor">
            <summary>Establecer el shim de Inflater.Inflater()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.ConstructorBoolean">
            <summary>Establecer el shim de Inflater.Inflater(Boolean noHeader)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.Decode">
            <summary>Establecer el shim de Inflater.Decode()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.DecodeChksum">
            <summary>Establecer el shim de Inflater.DecodeChksum()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.DecodeDict">
            <summary>Establecer el shim de Inflater.DecodeDict()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.DecodeHeader">
            <summary>Establecer el shim de Inflater.DecodeHeader()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.DecodeHuffman">
            <summary>Establecer el shim de Inflater.DecodeHuffman()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.InflateByteArray">
            <summary>Establecer el shim de Inflater.Inflate(Byte[] buffer)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.InflateByteArrayInt32Int32">
            <summary>Establecer el shim de Inflater.Inflate(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.IsFinishedGet">
            <summary>Establecer el shim de Inflater.get_IsFinished()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.IsNeedingDictionaryGet">
            <summary>Establecer el shim de Inflater.get_IsNeedingDictionary()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.IsNeedingInputGet">
            <summary>Establecer el shim de Inflater.get_IsNeedingInput()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.RemainingInputGet">
            <summary>Establecer el shim de Inflater.get_RemainingInput()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.Reset">
            <summary>Establecer el shim de Inflater.Reset()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.SetDictionaryByteArray">
            <summary>Establecer el shim de Inflater.SetDictionary(Byte[] buffer)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.SetDictionaryByteArrayInt32Int32">
            <summary>Establecer el shim de Inflater.SetDictionary(Byte[] buffer, Int32 index, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.SetInputByteArray">
            <summary>Establecer el shim de Inflater.SetInput(Byte[] buffer)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.SetInputByteArrayInt32Int32">
            <summary>Establecer el shim de Inflater.SetInput(Byte[] buffer, Int32 index, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.StaticConstructor">
            <summary>Establecer el shim de Inflater.Inflater()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.TotalInGet">
            <summary>Establecer el shim de Inflater.get_TotalIn()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.TotalOutGet">
            <summary>Establecer el shim de Inflater.get_TotalOut()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.AllInstances.AdlerGet">
            <summary>Establecer el shim de Inflater.get_Adler()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.AllInstances.Decode">
            <summary>Establecer el shim de Inflater.Decode()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.AllInstances.DecodeChksum">
            <summary>Establecer el shim de Inflater.DecodeChksum()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.AllInstances.DecodeDict">
            <summary>Establecer el shim de Inflater.DecodeDict()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.AllInstances.DecodeHeader">
            <summary>Establecer el shim de Inflater.DecodeHeader()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.AllInstances.DecodeHuffman">
            <summary>Establecer el shim de Inflater.DecodeHuffman()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.AllInstances.InflateByteArray">
            <summary>Establecer el shim de Inflater.Inflate(Byte[] buffer)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.AllInstances.InflateByteArrayInt32Int32">
            <summary>Establecer el shim de Inflater.Inflate(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.AllInstances.IsFinishedGet">
            <summary>Establecer el shim de Inflater.get_IsFinished()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.AllInstances.IsNeedingDictionaryGet">
            <summary>Establecer el shim de Inflater.get_IsNeedingDictionary()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.AllInstances.IsNeedingInputGet">
            <summary>Establecer el shim de Inflater.get_IsNeedingInput()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.AllInstances.RemainingInputGet">
            <summary>Establecer el shim de Inflater.get_RemainingInput()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.AllInstances.Reset">
            <summary>Establecer el shim de Inflater.Reset()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.AllInstances.SetDictionaryByteArray">
            <summary>Establecer el shim de Inflater.SetDictionary(Byte[] buffer)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.AllInstances.SetDictionaryByteArrayInt32Int32">
            <summary>Establecer el shim de Inflater.SetDictionary(Byte[] buffer, Int32 index, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.AllInstances.SetInputByteArray">
            <summary>Establecer el shim de Inflater.SetInput(Byte[] buffer)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.AllInstances.SetInputByteArrayInt32Int32">
            <summary>Establecer el shim de Inflater.SetInput(Byte[] buffer, Int32 index, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.AllInstances.TotalInGet">
            <summary>Establecer el shim de Inflater.get_TotalIn()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflater.AllInstances.TotalOutGet">
            <summary>Establecer el shim de Inflater.get_TotalOut()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflaterHuffmanTree">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflaterHuffmanTree.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflaterHuffmanTree.#ctor(ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflaterHuffmanTree.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflaterHuffmanTree.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflaterHuffmanTree.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflaterHuffmanTree.BuildTreeByteArray">
            <summary>Establecer el shim de InflaterHuffmanTree.BuildTree(Byte[] codeLengths)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflaterHuffmanTree.ConstructorByteArray">
            <summary>Establecer el shim de InflaterHuffmanTree.InflaterHuffmanTree(Byte[] codeLengths)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflaterHuffmanTree.GetSymbolStreamManipulator">
            <summary>Establecer el shim de InflaterHuffmanTree.GetSymbol(StreamManipulator input)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflaterHuffmanTree.StaticConstructor">
            <summary>Establecer el shim de InflaterHuffmanTree.InflaterHuffmanTree()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflaterHuffmanTree.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflaterHuffmanTree.AllInstances.BuildTreeByteArray">
            <summary>Establecer el shim de InflaterHuffmanTree.BuildTree(Byte[] codeLengths)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimInflaterHuffmanTree.AllInstances.GetSymbolStreamManipulator">
            <summary>Establecer el shim de InflaterHuffmanTree.GetSymbol(StreamManipulator input)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimPendingBuffer">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimPendingBuffer.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimPendingBuffer.#ctor(ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimPendingBuffer.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimPendingBuffer.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimPendingBuffer.AlignToByte">
            <summary>Establecer el shim de PendingBuffer.AlignToByte()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimPendingBuffer.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimPendingBuffer.BitCountGet">
            <summary>Establecer el shim de PendingBuffer.get_BitCount()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimPendingBuffer.Constructor">
            <summary>Establecer el shim de PendingBuffer.PendingBuffer()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimPendingBuffer.ConstructorInt32">
            <summary>Establecer el shim de PendingBuffer.PendingBuffer(Int32 bufferSize)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimPendingBuffer.FlushByteArrayInt32Int32">
            <summary>Establecer el shim de PendingBuffer.Flush(Byte[] output, Int32 offset, Int32 length)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimPendingBuffer.IsFlushedGet">
            <summary>Establecer el shim de PendingBuffer.get_IsFlushed()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimPendingBuffer.Reset">
            <summary>Establecer el shim de PendingBuffer.Reset()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimPendingBuffer.ToByteArray">
            <summary>Establecer el shim de PendingBuffer.ToByteArray()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimPendingBuffer.WriteBitsInt32Int32">
            <summary>Establecer el shim de PendingBuffer.WriteBits(Int32 b, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimPendingBuffer.WriteBlockByteArrayInt32Int32">
            <summary>Establecer el shim de PendingBuffer.WriteBlock(Byte[] block, Int32 offset, Int32 length)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimPendingBuffer.WriteByteInt32">
            <summary>Establecer el shim de PendingBuffer.WriteByte(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimPendingBuffer.WriteIntInt32">
            <summary>Establecer el shim de PendingBuffer.WriteInt(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimPendingBuffer.WriteShortInt32">
            <summary>Establecer el shim de PendingBuffer.WriteShort(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimPendingBuffer.WriteShortMSBInt32">
            <summary>Establecer el shim de PendingBuffer.WriteShortMSB(Int32 s)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimPendingBuffer.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimPendingBuffer.AllInstances.AlignToByte">
            <summary>Establecer el shim de PendingBuffer.AlignToByte()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimPendingBuffer.AllInstances.BitCountGet">
            <summary>Establecer el shim de PendingBuffer.get_BitCount()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimPendingBuffer.AllInstances.FlushByteArrayInt32Int32">
            <summary>Establecer el shim de PendingBuffer.Flush(Byte[] output, Int32 offset, Int32 length)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimPendingBuffer.AllInstances.IsFlushedGet">
            <summary>Establecer el shim de PendingBuffer.get_IsFlushed()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimPendingBuffer.AllInstances.Reset">
            <summary>Establecer el shim de PendingBuffer.Reset()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimPendingBuffer.AllInstances.ToByteArray">
            <summary>Establecer el shim de PendingBuffer.ToByteArray()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimPendingBuffer.AllInstances.WriteBitsInt32Int32">
            <summary>Establecer el shim de PendingBuffer.WriteBits(Int32 b, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimPendingBuffer.AllInstances.WriteBlockByteArrayInt32Int32">
            <summary>Establecer el shim de PendingBuffer.WriteBlock(Byte[] block, Int32 offset, Int32 length)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimPendingBuffer.AllInstances.WriteByteInt32">
            <summary>Establecer el shim de PendingBuffer.WriteByte(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimPendingBuffer.AllInstances.WriteIntInt32">
            <summary>Establecer el shim de PendingBuffer.WriteInt(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimPendingBuffer.AllInstances.WriteShortInt32">
            <summary>Establecer el shim de PendingBuffer.WriteShort(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.ShimPendingBuffer.AllInstances.WriteShortMSBInt32">
            <summary>Establecer el shim de PendingBuffer.WriteShortMSB(Int32 s)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubDeflater">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Zip.Compression.Deflater</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubDeflater.#ctor">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubDeflater.#ctor(System.Int32)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubDeflater.#ctor(System.Int32,System.Boolean)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubDeflater.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubDeflater</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubDeflater.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubDeflater.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubDeflater.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubDeflaterConstants">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubDeflaterConstants.#ctor">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubDeflaterConstants.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubDeflaterConstants</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubDeflaterConstants.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubDeflaterConstants.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubDeflaterConstants.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubDeflaterEngine">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubDeflaterEngine.#ctor(ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubDeflaterEngine.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubDeflaterEngine</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubDeflaterEngine.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubDeflaterEngine.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubDeflaterEngine.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubDeflaterHuffman">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubDeflaterHuffman.#ctor(ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubDeflaterHuffman.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubDeflaterHuffman</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubDeflaterHuffman.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubDeflaterHuffman.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubDeflaterHuffman.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubDeflaterPending">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubDeflaterPending.#ctor">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubDeflaterPending.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubDeflaterPending</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubDeflaterPending.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubDeflaterPending.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubDeflaterPending.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubInflater">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Zip.Compression.Inflater</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubInflater.#ctor">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubInflater.#ctor(System.Boolean)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubInflater.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubInflater</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubInflater.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubInflater.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubInflater.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubInflaterHuffmanTree">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubInflaterHuffmanTree.#ctor(System.Byte[])">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubInflaterHuffmanTree.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubInflaterHuffmanTree</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubInflaterHuffmanTree.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubInflaterHuffmanTree.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubInflaterHuffmanTree.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubPendingBuffer">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubPendingBuffer.#ctor">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubPendingBuffer.#ctor(System.Int32)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubPendingBuffer.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubPendingBuffer</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubPendingBuffer.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubPendingBuffer.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Fakes.StubPendingBuffer.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.#ctor(ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.Bind(System.IDisposable)">
            <summary>Asocia los miembros de la interfaz a las correcciones de compatibilidad (shim).</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.BeginReadByteArrayInt32Int32AsyncCallbackObject">
            <summary>Establecer el shim de DeflaterOutputStream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.BeginWriteByteArrayInt32Int32AsyncCallbackObject">
            <summary>Establecer el shim de DeflaterOutputStream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.CanPatchEntriesGet">
            <summary>Establecer el shim de DeflaterOutputStream.get_CanPatchEntries()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.CanReadGet">
            <summary>Establecer el shim de DeflaterOutputStream.get_CanRead()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.CanSeekGet">
            <summary>Establecer el shim de DeflaterOutputStream.get_CanSeek()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.CanWriteGet">
            <summary>Establecer el shim de DeflaterOutputStream.get_CanWrite()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.Close">
            <summary>Establecer el shim de DeflaterOutputStream.Close()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.ConstructorStream">
            <summary>Establecer el shim de DeflaterOutputStream.DeflaterOutputStream(Stream baseOutputStream)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.ConstructorStreamDeflater">
            <summary>Establecer el shim de DeflaterOutputStream.DeflaterOutputStream(Stream baseOutputStream, Deflater deflater)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.ConstructorStreamDeflaterInt32">
            <summary>Establecer el shim de DeflaterOutputStream.DeflaterOutputStream(Stream baseOutputStream, Deflater deflater, Int32 bufferSize)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.Deflate">
            <summary>Establecer el shim de DeflaterOutputStream.Deflate()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.EncryptBlockByteArrayInt32Int32">
            <summary>Establecer el shim de DeflaterOutputStream.EncryptBlock(Byte[] buffer, Int32 offset, Int32 length)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.Finish">
            <summary>Establecer el shim de DeflaterOutputStream.Finish()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.Flush">
            <summary>Establecer el shim de DeflaterOutputStream.Flush()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.InitializePasswordString">
            <summary>Establecer el shim de DeflaterOutputStream.InitializePassword(String password)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.IsStreamOwnerGet">
            <summary>Establecer el shim de DeflaterOutputStream.get_IsStreamOwner()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.IsStreamOwnerSetBoolean">
            <summary>Establecer el shim de DeflaterOutputStream.set_IsStreamOwner(Boolean value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.LengthGet">
            <summary>Establecer el shim de DeflaterOutputStream.get_Length()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.PasswordGet">
            <summary>Establecer el shim de DeflaterOutputStream.get_Password()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.PasswordSetString">
            <summary>Establecer el shim de DeflaterOutputStream.set_Password(String value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.PositionGet">
            <summary>Establecer el shim de DeflaterOutputStream.get_Position()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.PositionSetInt64">
            <summary>Establecer el shim de DeflaterOutputStream.set_Position(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.ReadByte">
            <summary>Establecer el shim de DeflaterOutputStream.ReadByte()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.ReadByteArrayInt32Int32">
            <summary>Establecer el shim de DeflaterOutputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.SeekInt64SeekOrigin">
            <summary>Establecer el shim de DeflaterOutputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.SetLengthInt64">
            <summary>Establecer el shim de DeflaterOutputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.WriteByteArrayInt32Int32">
            <summary>Establecer el shim de DeflaterOutputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.WriteByteByte">
            <summary>Establecer el shim de DeflaterOutputStream.WriteByte(Byte value)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.AllInstances.BeginReadByteArrayInt32Int32AsyncCallbackObject">
            <summary>Establecer el shim de DeflaterOutputStream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.AllInstances.BeginWriteByteArrayInt32Int32AsyncCallbackObject">
            <summary>Establecer el shim de DeflaterOutputStream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.AllInstances.CanPatchEntriesGet">
            <summary>Establecer el shim de DeflaterOutputStream.get_CanPatchEntries()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.AllInstances.CanReadGet">
            <summary>Establecer el shim de DeflaterOutputStream.get_CanRead()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.AllInstances.CanSeekGet">
            <summary>Establecer el shim de DeflaterOutputStream.get_CanSeek()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.AllInstances.CanWriteGet">
            <summary>Establecer el shim de DeflaterOutputStream.get_CanWrite()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.AllInstances.Close">
            <summary>Establecer el shim de DeflaterOutputStream.Close()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.AllInstances.Deflate">
            <summary>Establecer el shim de DeflaterOutputStream.Deflate()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.AllInstances.EncryptBlockByteArrayInt32Int32">
            <summary>Establecer el shim de DeflaterOutputStream.EncryptBlock(Byte[] buffer, Int32 offset, Int32 length)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.AllInstances.Finish">
            <summary>Establecer el shim de DeflaterOutputStream.Finish()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.AllInstances.Flush">
            <summary>Establecer el shim de DeflaterOutputStream.Flush()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.AllInstances.InitializePasswordString">
            <summary>Establecer el shim de DeflaterOutputStream.InitializePassword(String password)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.AllInstances.IsStreamOwnerGet">
            <summary>Establecer el shim de DeflaterOutputStream.get_IsStreamOwner()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.AllInstances.IsStreamOwnerSetBoolean">
            <summary>Establecer el shim de DeflaterOutputStream.set_IsStreamOwner(Boolean value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.AllInstances.LengthGet">
            <summary>Establecer el shim de DeflaterOutputStream.get_Length()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.AllInstances.PasswordGet">
            <summary>Establecer el shim de DeflaterOutputStream.get_Password()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.AllInstances.PasswordSetString">
            <summary>Establecer el shim de DeflaterOutputStream.set_Password(String value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.AllInstances.PositionGet">
            <summary>Establecer el shim de DeflaterOutputStream.get_Position()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.AllInstances.PositionSetInt64">
            <summary>Establecer el shim de DeflaterOutputStream.set_Position(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.AllInstances.ReadByte">
            <summary>Establecer el shim de DeflaterOutputStream.ReadByte()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.AllInstances.ReadByteArrayInt32Int32">
            <summary>Establecer el shim de DeflaterOutputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.AllInstances.SeekInt64SeekOrigin">
            <summary>Establecer el shim de DeflaterOutputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.AllInstances.SetLengthInt64">
            <summary>Establecer el shim de DeflaterOutputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.AllInstances.WriteByteArrayInt32Int32">
            <summary>Establecer el shim de DeflaterOutputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimDeflaterOutputStream.AllInstances.WriteByteByte">
            <summary>Establecer el shim de DeflaterOutputStream.WriteByte(Byte value)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputBuffer">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputBuffer.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputBuffer.#ctor(ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputBuffer.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputBuffer.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputBuffer.AvailableGet">
            <summary>Establecer el shim de InflaterInputBuffer.get_Available()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputBuffer.AvailableSetInt32">
            <summary>Establecer el shim de InflaterInputBuffer.set_Available(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputBuffer.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputBuffer.ClearTextGet">
            <summary>Establecer el shim de InflaterInputBuffer.get_ClearText()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputBuffer.ClearTextLengthGet">
            <summary>Establecer el shim de InflaterInputBuffer.get_ClearTextLength()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputBuffer.ConstructorStream">
            <summary>Establecer el shim de InflaterInputBuffer.InflaterInputBuffer(Stream stream)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputBuffer.ConstructorStreamInt32">
            <summary>Establecer el shim de InflaterInputBuffer.InflaterInputBuffer(Stream stream, Int32 bufferSize)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputBuffer.CryptoTransformSetICryptoTransform">
            <summary>Establecer el shim de InflaterInputBuffer.set_CryptoTransform(ICryptoTransform value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputBuffer.Fill">
            <summary>Establecer el shim de InflaterInputBuffer.Fill()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputBuffer.RawDataGet">
            <summary>Establecer el shim de InflaterInputBuffer.get_RawData()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputBuffer.RawLengthGet">
            <summary>Establecer el shim de InflaterInputBuffer.get_RawLength()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputBuffer.ReadClearTextBufferByteArrayInt32Int32">
            <summary>Establecer el shim de InflaterInputBuffer.ReadClearTextBuffer(Byte[] outBuffer, Int32 offset, Int32 length)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputBuffer.ReadLeByte">
            <summary>Establecer el shim de InflaterInputBuffer.ReadLeByte()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputBuffer.ReadLeInt">
            <summary>Establecer el shim de InflaterInputBuffer.ReadLeInt()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputBuffer.ReadLeLong">
            <summary>Establecer el shim de InflaterInputBuffer.ReadLeLong()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputBuffer.ReadLeShort">
            <summary>Establecer el shim de InflaterInputBuffer.ReadLeShort()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputBuffer.ReadRawBufferByteArray">
            <summary>Establecer el shim de InflaterInputBuffer.ReadRawBuffer(Byte[] buffer)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputBuffer.ReadRawBufferByteArrayInt32Int32">
            <summary>Establecer el shim de InflaterInputBuffer.ReadRawBuffer(Byte[] outBuffer, Int32 offset, Int32 length)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputBuffer.SetInflaterInputInflater">
            <summary>Establecer el shim de InflaterInputBuffer.SetInflaterInput(Inflater inflater)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputBuffer.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputBuffer.AllInstances.AvailableGet">
            <summary>Establecer el shim de InflaterInputBuffer.get_Available()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputBuffer.AllInstances.AvailableSetInt32">
            <summary>Establecer el shim de InflaterInputBuffer.set_Available(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputBuffer.AllInstances.ClearTextGet">
            <summary>Establecer el shim de InflaterInputBuffer.get_ClearText()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputBuffer.AllInstances.ClearTextLengthGet">
            <summary>Establecer el shim de InflaterInputBuffer.get_ClearTextLength()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputBuffer.AllInstances.CryptoTransformSetICryptoTransform">
            <summary>Establecer el shim de InflaterInputBuffer.set_CryptoTransform(ICryptoTransform value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputBuffer.AllInstances.Fill">
            <summary>Establecer el shim de InflaterInputBuffer.Fill()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputBuffer.AllInstances.RawDataGet">
            <summary>Establecer el shim de InflaterInputBuffer.get_RawData()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputBuffer.AllInstances.RawLengthGet">
            <summary>Establecer el shim de InflaterInputBuffer.get_RawLength()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputBuffer.AllInstances.ReadClearTextBufferByteArrayInt32Int32">
            <summary>Establecer el shim de InflaterInputBuffer.ReadClearTextBuffer(Byte[] outBuffer, Int32 offset, Int32 length)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputBuffer.AllInstances.ReadLeByte">
            <summary>Establecer el shim de InflaterInputBuffer.ReadLeByte()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputBuffer.AllInstances.ReadLeInt">
            <summary>Establecer el shim de InflaterInputBuffer.ReadLeInt()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputBuffer.AllInstances.ReadLeLong">
            <summary>Establecer el shim de InflaterInputBuffer.ReadLeLong()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputBuffer.AllInstances.ReadLeShort">
            <summary>Establecer el shim de InflaterInputBuffer.ReadLeShort()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputBuffer.AllInstances.ReadRawBufferByteArray">
            <summary>Establecer el shim de InflaterInputBuffer.ReadRawBuffer(Byte[] buffer)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputBuffer.AllInstances.ReadRawBufferByteArrayInt32Int32">
            <summary>Establecer el shim de InflaterInputBuffer.ReadRawBuffer(Byte[] outBuffer, Int32 offset, Int32 length)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputBuffer.AllInstances.SetInflaterInputInflater">
            <summary>Establecer el shim de InflaterInputBuffer.SetInflaterInput(Inflater inflater)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.#ctor(ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.Bind(System.IDisposable)">
            <summary>Asocia los miembros de la interfaz a las correcciones de compatibilidad (shim).</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.AvailableGet">
            <summary>Establecer el shim de InflaterInputStream.get_Available()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.BeginWriteByteArrayInt32Int32AsyncCallbackObject">
            <summary>Establecer el shim de InflaterInputStream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.CanReadGet">
            <summary>Establecer el shim de InflaterInputStream.get_CanRead()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.CanSeekGet">
            <summary>Establecer el shim de InflaterInputStream.get_CanSeek()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.CanWriteGet">
            <summary>Establecer el shim de InflaterInputStream.get_CanWrite()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.Close">
            <summary>Establecer el shim de InflaterInputStream.Close()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.ConstructorStream">
            <summary>Establecer el shim de InflaterInputStream.InflaterInputStream(Stream baseInputStream)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.ConstructorStreamInflater">
            <summary>Establecer el shim de InflaterInputStream.InflaterInputStream(Stream baseInputStream, Inflater inf)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.ConstructorStreamInflaterInt32">
            <summary>Establecer el shim de InflaterInputStream.InflaterInputStream(Stream baseInputStream, Inflater inflater, Int32 bufferSize)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.Fill">
            <summary>Establecer el shim de InflaterInputStream.Fill()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.Flush">
            <summary>Establecer el shim de InflaterInputStream.Flush()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.IsStreamOwnerGet">
            <summary>Establecer el shim de InflaterInputStream.get_IsStreamOwner()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.IsStreamOwnerSetBoolean">
            <summary>Establecer el shim de InflaterInputStream.set_IsStreamOwner(Boolean value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.LengthGet">
            <summary>Establecer el shim de InflaterInputStream.get_Length()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.PositionGet">
            <summary>Establecer el shim de InflaterInputStream.get_Position()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.PositionSetInt64">
            <summary>Establecer el shim de InflaterInputStream.set_Position(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.ReadByteArrayInt32Int32">
            <summary>Establecer el shim de InflaterInputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.SeekInt64SeekOrigin">
            <summary>Establecer el shim de InflaterInputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.SetLengthInt64">
            <summary>Establecer el shim de InflaterInputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.SkipInt64">
            <summary>Establecer el shim de InflaterInputStream.Skip(Int64 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.StopDecrypting">
            <summary>Establecer el shim de InflaterInputStream.StopDecrypting()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.WriteByteArrayInt32Int32">
            <summary>Establecer el shim de InflaterInputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.WriteByteByte">
            <summary>Establecer el shim de InflaterInputStream.WriteByte(Byte value)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.AllInstances.AvailableGet">
            <summary>Establecer el shim de InflaterInputStream.get_Available()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.AllInstances.BeginWriteByteArrayInt32Int32AsyncCallbackObject">
            <summary>Establecer el shim de InflaterInputStream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.AllInstances.CanReadGet">
            <summary>Establecer el shim de InflaterInputStream.get_CanRead()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.AllInstances.CanSeekGet">
            <summary>Establecer el shim de InflaterInputStream.get_CanSeek()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.AllInstances.CanWriteGet">
            <summary>Establecer el shim de InflaterInputStream.get_CanWrite()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.AllInstances.Close">
            <summary>Establecer el shim de InflaterInputStream.Close()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.AllInstances.Fill">
            <summary>Establecer el shim de InflaterInputStream.Fill()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.AllInstances.Flush">
            <summary>Establecer el shim de InflaterInputStream.Flush()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.AllInstances.IsStreamOwnerGet">
            <summary>Establecer el shim de InflaterInputStream.get_IsStreamOwner()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.AllInstances.IsStreamOwnerSetBoolean">
            <summary>Establecer el shim de InflaterInputStream.set_IsStreamOwner(Boolean value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.AllInstances.LengthGet">
            <summary>Establecer el shim de InflaterInputStream.get_Length()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.AllInstances.PositionGet">
            <summary>Establecer el shim de InflaterInputStream.get_Position()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.AllInstances.PositionSetInt64">
            <summary>Establecer el shim de InflaterInputStream.set_Position(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.AllInstances.ReadByteArrayInt32Int32">
            <summary>Establecer el shim de InflaterInputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.AllInstances.SeekInt64SeekOrigin">
            <summary>Establecer el shim de InflaterInputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.AllInstances.SetLengthInt64">
            <summary>Establecer el shim de InflaterInputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.AllInstances.SkipInt64">
            <summary>Establecer el shim de InflaterInputStream.Skip(Int64 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.AllInstances.StopDecrypting">
            <summary>Establecer el shim de InflaterInputStream.StopDecrypting()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.AllInstances.WriteByteArrayInt32Int32">
            <summary>Establecer el shim de InflaterInputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimInflaterInputStream.AllInstances.WriteByteByte">
            <summary>Establecer el shim de InflaterInputStream.WriteByte(Byte value)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimOutputWindow">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimOutputWindow.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimOutputWindow.#ctor(ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimOutputWindow.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimOutputWindow.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimOutputWindow.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimOutputWindow.Constructor">
            <summary>Establecer el shim de OutputWindow.OutputWindow()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimOutputWindow.CopyDictByteArrayInt32Int32">
            <summary>Establecer el shim de OutputWindow.CopyDict(Byte[] dictionary, Int32 offset, Int32 length)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimOutputWindow.CopyOutputByteArrayInt32Int32">
            <summary>Establecer el shim de OutputWindow.CopyOutput(Byte[] output, Int32 offset, Int32 len)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimOutputWindow.CopyStoredStreamManipulatorInt32">
            <summary>Establecer el shim de OutputWindow.CopyStored(StreamManipulator input, Int32 length)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimOutputWindow.GetAvailable">
            <summary>Establecer el shim de OutputWindow.GetAvailable()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimOutputWindow.GetFreeSpace">
            <summary>Establecer el shim de OutputWindow.GetFreeSpace()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimOutputWindow.RepeatInt32Int32">
            <summary>Establecer el shim de OutputWindow.Repeat(Int32 length, Int32 distance)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimOutputWindow.Reset">
            <summary>Establecer el shim de OutputWindow.Reset()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimOutputWindow.SlowRepeatInt32Int32Int32">
            <summary>Establecer el shim de OutputWindow.SlowRepeat(Int32 repStart, Int32 length, Int32 distance)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimOutputWindow.WriteInt32">
            <summary>Establecer el shim de OutputWindow.Write(Int32 value)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimOutputWindow.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimOutputWindow.AllInstances.CopyDictByteArrayInt32Int32">
            <summary>Establecer el shim de OutputWindow.CopyDict(Byte[] dictionary, Int32 offset, Int32 length)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimOutputWindow.AllInstances.CopyOutputByteArrayInt32Int32">
            <summary>Establecer el shim de OutputWindow.CopyOutput(Byte[] output, Int32 offset, Int32 len)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimOutputWindow.AllInstances.CopyStoredStreamManipulatorInt32">
            <summary>Establecer el shim de OutputWindow.CopyStored(StreamManipulator input, Int32 length)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimOutputWindow.AllInstances.GetAvailable">
            <summary>Establecer el shim de OutputWindow.GetAvailable()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimOutputWindow.AllInstances.GetFreeSpace">
            <summary>Establecer el shim de OutputWindow.GetFreeSpace()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimOutputWindow.AllInstances.RepeatInt32Int32">
            <summary>Establecer el shim de OutputWindow.Repeat(Int32 length, Int32 distance)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimOutputWindow.AllInstances.Reset">
            <summary>Establecer el shim de OutputWindow.Reset()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimOutputWindow.AllInstances.SlowRepeatInt32Int32Int32">
            <summary>Establecer el shim de OutputWindow.SlowRepeat(Int32 repStart, Int32 length, Int32 distance)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimOutputWindow.AllInstances.WriteInt32">
            <summary>Establecer el shim de OutputWindow.Write(Int32 value)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimStreamManipulator">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimStreamManipulator.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimStreamManipulator.#ctor(ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimStreamManipulator.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimStreamManipulator.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimStreamManipulator.AvailableBitsGet">
            <summary>Establecer el shim de StreamManipulator.get_AvailableBits()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimStreamManipulator.AvailableBytesGet">
            <summary>Establecer el shim de StreamManipulator.get_AvailableBytes()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimStreamManipulator.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimStreamManipulator.Constructor">
            <summary>Establecer el shim de StreamManipulator.StreamManipulator()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimStreamManipulator.CopyBytesByteArrayInt32Int32">
            <summary>Establecer el shim de StreamManipulator.CopyBytes(Byte[] output, Int32 offset, Int32 length)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimStreamManipulator.DropBitsInt32">
            <summary>Establecer el shim de StreamManipulator.DropBits(Int32 bitCount)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimStreamManipulator.GetBitsInt32">
            <summary>Establecer el shim de StreamManipulator.GetBits(Int32 bitCount)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimStreamManipulator.IsNeedingInputGet">
            <summary>Establecer el shim de StreamManipulator.get_IsNeedingInput()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimStreamManipulator.PeekBitsInt32">
            <summary>Establecer el shim de StreamManipulator.PeekBits(Int32 bitCount)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimStreamManipulator.Reset">
            <summary>Establecer el shim de StreamManipulator.Reset()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimStreamManipulator.SetInputByteArrayInt32Int32">
            <summary>Establecer el shim de StreamManipulator.SetInput(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimStreamManipulator.SkipToByteBoundary">
            <summary>Establecer el shim de StreamManipulator.SkipToByteBoundary()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimStreamManipulator.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimStreamManipulator.AllInstances.AvailableBitsGet">
            <summary>Establecer el shim de StreamManipulator.get_AvailableBits()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimStreamManipulator.AllInstances.AvailableBytesGet">
            <summary>Establecer el shim de StreamManipulator.get_AvailableBytes()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimStreamManipulator.AllInstances.CopyBytesByteArrayInt32Int32">
            <summary>Establecer el shim de StreamManipulator.CopyBytes(Byte[] output, Int32 offset, Int32 length)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimStreamManipulator.AllInstances.DropBitsInt32">
            <summary>Establecer el shim de StreamManipulator.DropBits(Int32 bitCount)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimStreamManipulator.AllInstances.GetBitsInt32">
            <summary>Establecer el shim de StreamManipulator.GetBits(Int32 bitCount)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimStreamManipulator.AllInstances.IsNeedingInputGet">
            <summary>Establecer el shim de StreamManipulator.get_IsNeedingInput()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimStreamManipulator.AllInstances.PeekBitsInt32">
            <summary>Establecer el shim de StreamManipulator.PeekBits(Int32 bitCount)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimStreamManipulator.AllInstances.Reset">
            <summary>Establecer el shim de StreamManipulator.Reset()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimStreamManipulator.AllInstances.SetInputByteArrayInt32Int32">
            <summary>Establecer el shim de StreamManipulator.SetInput(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.ShimStreamManipulator.AllInstances.SkipToByteBoundary">
            <summary>Establecer el shim de StreamManipulator.SkipToByteBoundary()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.#ctor(System.IO.Stream)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.#ctor(System.IO.Stream,ICSharpCode.SharpZipLib.Zip.Compression.Deflater)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.#ctor(System.IO.Stream,ICSharpCode.SharpZipLib.Zip.Compression.Deflater,System.Int32)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.AttachBackingFieldToPosition">
            <summary>Asocia delegados para emular StubDeflaterOutputStream.Position como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.AttachBackingFieldToReadTimeout">
            <summary>Asocia delegados para emular StubDeflaterOutputStream.ReadTimeout como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.AttachBackingFieldToWriteTimeout">
            <summary>Asocia delegados para emular StubDeflaterOutputStream.WriteTimeout como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Establecer el stub de DeflaterOutputStream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.BeginReadByteArrayInt32Int32AsyncCallbackObject">
            <summary>Establecer el stub de DeflaterOutputStream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Establecer el stub de DeflaterOutputStream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.BeginWriteByteArrayInt32Int32AsyncCallbackObject">
            <summary>Establecer el stub de DeflaterOutputStream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.CanReadGet">
            <summary>Establecer el stub de DeflaterOutputStream.get_CanRead()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.CanSeekGet">
            <summary>Establecer el stub de DeflaterOutputStream.get_CanSeek()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.CanTimeoutGet">
            <summary>Establecer el stub de Stream.get_CanTimeout()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.CanWriteGet">
            <summary>Establecer el stub de DeflaterOutputStream.get_CanWrite()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.Close">
            <summary>Establecer el stub de DeflaterOutputStream.Close()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.Close01">
            <summary>Establecer el stub de DeflaterOutputStream.Close()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.CreateWaitHandle">
            <summary>Establecer el stub de Stream.CreateWaitHandle()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.CreateWaitHandle01">
            <summary>Establecer el stub de Stream.CreateWaitHandle()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.Dispose(System.Boolean)">
            <summary>Establecer el stub de Stream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.DisposeBoolean">
            <summary>Establecer el stub de Stream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.EndRead(System.IAsyncResult)">
            <summary>Establecer el stub de Stream.EndRead(IAsyncResult asyncResult)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.EndReadIAsyncResult">
            <summary>Establecer el stub de Stream.EndRead(IAsyncResult asyncResult)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.EndWrite(System.IAsyncResult)">
            <summary>Establecer el stub de Stream.EndWrite(IAsyncResult asyncResult)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.EndWriteIAsyncResult">
            <summary>Establecer el stub de Stream.EndWrite(IAsyncResult asyncResult)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.Finish">
            <summary>Establecer el stub de DeflaterOutputStream.Finish()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.Finish01">
            <summary>Establecer el stub de DeflaterOutputStream.Finish()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.Flush">
            <summary>Establecer el stub de DeflaterOutputStream.Flush()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.Flush01">
            <summary>Establecer el stub de DeflaterOutputStream.Flush()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubDeflaterOutputStream</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.LengthGet">
            <summary>Establecer el stub de DeflaterOutputStream.get_Length()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.ObjectInvariant">
            <summary>Establecer el stub de Stream.ObjectInvariant()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.ObjectInvariant01">
            <summary>Establecer el stub de Stream.ObjectInvariant()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.PositionGet">
            <summary>Establecer el stub de DeflaterOutputStream.get_Position()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.PositionSetInt64">
            <summary>Establecer el stub de DeflaterOutputStream.set_Position(Int64 value)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>Establecer el stub de DeflaterOutputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.ReadByte">
            <summary>Establecer el stub de DeflaterOutputStream.ReadByte()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.ReadByte01">
            <summary>Establecer el stub de DeflaterOutputStream.ReadByte()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.ReadByteArrayInt32Int32">
            <summary>Establecer el stub de DeflaterOutputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.ReadTimeoutGet">
            <summary>Establecer el stub de Stream.get_ReadTimeout()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.ReadTimeoutSetInt32">
            <summary>Establecer el stub de Stream.set_ReadTimeout(Int32 value)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>Establecer el stub de DeflaterOutputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.SeekInt64SeekOrigin">
            <summary>Establecer el stub de DeflaterOutputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.SetLength(System.Int64)">
            <summary>Establecer el stub de DeflaterOutputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.SetLengthInt64">
            <summary>Establecer el stub de DeflaterOutputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Establecer el stub de DeflaterOutputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.WriteByte(System.Byte)">
            <summary>Establecer el stub de DeflaterOutputStream.WriteByte(Byte value)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.WriteByteArrayInt32Int32">
            <summary>Establecer el stub de DeflaterOutputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.WriteByteByte">
            <summary>Establecer el stub de DeflaterOutputStream.WriteByte(Byte value)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.WriteTimeoutGet">
            <summary>Establecer el stub de Stream.get_WriteTimeout()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.WriteTimeoutSetInt32">
            <summary>Establecer el stub de Stream.set_WriteTimeout(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.CanRead">
            <summary>Establecer el stub de DeflaterOutputStream.get_CanRead()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.CanSeek">
            <summary>Establecer el stub de DeflaterOutputStream.get_CanSeek()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.CanTimeout">
            <summary>Establecer el stub de Stream.get_CanTimeout()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.CanWrite">
            <summary>Establecer el stub de DeflaterOutputStream.get_CanWrite()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.Length">
            <summary>Establecer el stub de DeflaterOutputStream.get_Length()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.Position">
            <summary>Establecer el stub de DeflaterOutputStream.get_Position()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.ReadTimeout">
            <summary>Establecer el stub de Stream.get_ReadTimeout()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubDeflaterOutputStream.WriteTimeout">
            <summary>Establecer el stub de Stream.get_WriteTimeout()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputBuffer">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputBuffer.#ctor(System.IO.Stream)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputBuffer.#ctor(System.IO.Stream,System.Int32)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputBuffer.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubInflaterInputBuffer</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputBuffer.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputBuffer.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputBuffer.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.#ctor(System.IO.Stream)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.#ctor(System.IO.Stream,ICSharpCode.SharpZipLib.Zip.Compression.Inflater)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.#ctor(System.IO.Stream,ICSharpCode.SharpZipLib.Zip.Compression.Inflater,System.Int32)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.AttachBackingFieldToPosition">
            <summary>Asocia delegados para emular StubInflaterInputStream.Position como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.AttachBackingFieldToReadTimeout">
            <summary>Asocia delegados para emular StubInflaterInputStream.ReadTimeout como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.AttachBackingFieldToWriteTimeout">
            <summary>Asocia delegados para emular StubInflaterInputStream.WriteTimeout como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.AvailableGet">
            <summary>Establecer el stub de InflaterInputStream.get_Available()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Establecer el stub de Stream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.BeginReadByteArrayInt32Int32AsyncCallbackObject">
            <summary>Establecer el stub de Stream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Establecer el stub de InflaterInputStream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.BeginWriteByteArrayInt32Int32AsyncCallbackObject">
            <summary>Establecer el stub de InflaterInputStream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.CanReadGet">
            <summary>Establecer el stub de InflaterInputStream.get_CanRead()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.CanSeekGet">
            <summary>Establecer el stub de InflaterInputStream.get_CanSeek()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.CanTimeoutGet">
            <summary>Establecer el stub de Stream.get_CanTimeout()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.CanWriteGet">
            <summary>Establecer el stub de InflaterInputStream.get_CanWrite()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.Close">
            <summary>Establecer el stub de InflaterInputStream.Close()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.Close01">
            <summary>Establecer el stub de InflaterInputStream.Close()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.CreateWaitHandle">
            <summary>Establecer el stub de Stream.CreateWaitHandle()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.CreateWaitHandle01">
            <summary>Establecer el stub de Stream.CreateWaitHandle()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.Dispose(System.Boolean)">
            <summary>Establecer el stub de Stream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.DisposeBoolean">
            <summary>Establecer el stub de Stream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.EndRead(System.IAsyncResult)">
            <summary>Establecer el stub de Stream.EndRead(IAsyncResult asyncResult)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.EndReadIAsyncResult">
            <summary>Establecer el stub de Stream.EndRead(IAsyncResult asyncResult)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.EndWrite(System.IAsyncResult)">
            <summary>Establecer el stub de Stream.EndWrite(IAsyncResult asyncResult)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.EndWriteIAsyncResult">
            <summary>Establecer el stub de Stream.EndWrite(IAsyncResult asyncResult)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.Flush">
            <summary>Establecer el stub de InflaterInputStream.Flush()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.Flush01">
            <summary>Establecer el stub de InflaterInputStream.Flush()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubInflaterInputStream</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.LengthGet">
            <summary>Establecer el stub de InflaterInputStream.get_Length()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.ObjectInvariant">
            <summary>Establecer el stub de Stream.ObjectInvariant()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.ObjectInvariant01">
            <summary>Establecer el stub de Stream.ObjectInvariant()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.PositionGet">
            <summary>Establecer el stub de InflaterInputStream.get_Position()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.PositionSetInt64">
            <summary>Establecer el stub de InflaterInputStream.set_Position(Int64 value)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>Establecer el stub de InflaterInputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.ReadByte">
            <summary>Establecer el stub de Stream.ReadByte()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.ReadByte01">
            <summary>Establecer el stub de Stream.ReadByte()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.ReadByteArrayInt32Int32">
            <summary>Establecer el stub de InflaterInputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.ReadTimeoutGet">
            <summary>Establecer el stub de Stream.get_ReadTimeout()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.ReadTimeoutSetInt32">
            <summary>Establecer el stub de Stream.set_ReadTimeout(Int32 value)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>Establecer el stub de InflaterInputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.SeekInt64SeekOrigin">
            <summary>Establecer el stub de InflaterInputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.SetLength(System.Int64)">
            <summary>Establecer el stub de InflaterInputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.SetLengthInt64">
            <summary>Establecer el stub de InflaterInputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Establecer el stub de InflaterInputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.WriteByte(System.Byte)">
            <summary>Establecer el stub de InflaterInputStream.WriteByte(Byte value)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.WriteByteArrayInt32Int32">
            <summary>Establecer el stub de InflaterInputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.WriteByteByte">
            <summary>Establecer el stub de InflaterInputStream.WriteByte(Byte value)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.WriteTimeoutGet">
            <summary>Establecer el stub de Stream.get_WriteTimeout()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.WriteTimeoutSetInt32">
            <summary>Establecer el stub de Stream.set_WriteTimeout(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.Available">
            <summary>Establecer el stub de InflaterInputStream.get_Available()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.CanRead">
            <summary>Establecer el stub de InflaterInputStream.get_CanRead()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.CanSeek">
            <summary>Establecer el stub de InflaterInputStream.get_CanSeek()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.CanTimeout">
            <summary>Establecer el stub de Stream.get_CanTimeout()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.CanWrite">
            <summary>Establecer el stub de InflaterInputStream.get_CanWrite()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.Length">
            <summary>Establecer el stub de InflaterInputStream.get_Length()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.Position">
            <summary>Establecer el stub de InflaterInputStream.get_Position()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.ReadTimeout">
            <summary>Establecer el stub de Stream.get_ReadTimeout()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubInflaterInputStream.WriteTimeout">
            <summary>Establecer el stub de Stream.get_WriteTimeout()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubOutputWindow">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubOutputWindow.#ctor">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubOutputWindow.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubOutputWindow</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubOutputWindow.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubOutputWindow.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubOutputWindow.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubStreamManipulator">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubStreamManipulator.#ctor">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubStreamManipulator.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubStreamManipulator</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubStreamManipulator.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubStreamManipulator.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.Fakes.StubStreamManipulator.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimBaseArchiveStorage">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimBaseArchiveStorage.#ctor(ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimBaseArchiveStorage.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimBaseArchiveStorage.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimBaseArchiveStorage.Bind(ICSharpCode.SharpZipLib.Zip.IArchiveStorage)">
            <summary>Asocia los miembros de la interfaz a las correcciones de compatibilidad (shim).</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimBaseArchiveStorage.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimBaseArchiveStorage.ConstructorFileUpdateMode">
            <summary>Establecer el shim de BaseArchiveStorage.BaseArchiveStorage(FileUpdateMode updateMode)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimBaseArchiveStorage.UpdateModeGet">
            <summary>Establecer el shim de BaseArchiveStorage.get_UpdateMode()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimBaseArchiveStorage.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimBaseArchiveStorage.AllInstances.UpdateModeGet">
            <summary>Establecer el shim de BaseArchiveStorage.get_UpdateMode()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDescriptorData">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Zip.DescriptorData</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDescriptorData.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDescriptorData.#ctor(ICSharpCode.SharpZipLib.Zip.DescriptorData)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDescriptorData.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDescriptorData.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDescriptorData.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDescriptorData.CompressedSizeGet">
            <summary>Establecer el shim de DescriptorData.get_CompressedSize()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDescriptorData.CompressedSizeSetInt64">
            <summary>Establecer el shim de DescriptorData.set_CompressedSize(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDescriptorData.Constructor">
            <summary>Establecer el shim de DescriptorData.DescriptorData()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDescriptorData.CrcGet">
            <summary>Establecer el shim de DescriptorData.get_Crc()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDescriptorData.CrcSetInt64">
            <summary>Establecer el shim de DescriptorData.set_Crc(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDescriptorData.SizeGet">
            <summary>Establecer el shim de DescriptorData.get_Size()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDescriptorData.SizeSetInt64">
            <summary>Establecer el shim de DescriptorData.set_Size(Int64 value)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDescriptorData.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDescriptorData.AllInstances.CompressedSizeGet">
            <summary>Establecer el shim de DescriptorData.get_CompressedSize()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDescriptorData.AllInstances.CompressedSizeSetInt64">
            <summary>Establecer el shim de DescriptorData.set_CompressedSize(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDescriptorData.AllInstances.CrcGet">
            <summary>Establecer el shim de DescriptorData.get_Crc()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDescriptorData.AllInstances.CrcSetInt64">
            <summary>Establecer el shim de DescriptorData.set_Crc(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDescriptorData.AllInstances.SizeGet">
            <summary>Establecer el shim de DescriptorData.get_Size()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDescriptorData.AllInstances.SizeSetInt64">
            <summary>Establecer el shim de DescriptorData.set_Size(Int64 value)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDiskArchiveStorage">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Zip.DiskArchiveStorage</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDiskArchiveStorage.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDiskArchiveStorage.#ctor(ICSharpCode.SharpZipLib.Zip.DiskArchiveStorage)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDiskArchiveStorage.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDiskArchiveStorage.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDiskArchiveStorage.Bind(ICSharpCode.SharpZipLib.Zip.IArchiveStorage)">
            <summary>Asocia los miembros de la interfaz a las correcciones de compatibilidad (shim).</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDiskArchiveStorage.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDiskArchiveStorage.ConstructorZipFile">
            <summary>Establecer el shim de DiskArchiveStorage.DiskArchiveStorage(ZipFile file)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDiskArchiveStorage.ConstructorZipFileFileUpdateMode">
            <summary>Establecer el shim de DiskArchiveStorage.DiskArchiveStorage(ZipFile file, FileUpdateMode updateMode)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDiskArchiveStorage.ConvertTemporaryToFinal">
            <summary>Establecer el shim de DiskArchiveStorage.ConvertTemporaryToFinal()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDiskArchiveStorage.Dispose">
            <summary>Establecer el shim de DiskArchiveStorage.Dispose()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDiskArchiveStorage.GetTempFileNameStringBoolean">
            <summary>Establecer el shim de DiskArchiveStorage.GetTempFileName(String original, Boolean makeTempFile)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDiskArchiveStorage.GetTemporaryOutput">
            <summary>Establecer el shim de DiskArchiveStorage.GetTemporaryOutput()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDiskArchiveStorage.MakeTemporaryCopyStream">
            <summary>Establecer el shim de DiskArchiveStorage.MakeTemporaryCopy(Stream stream)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDiskArchiveStorage.OpenForDirectUpdateStream">
            <summary>Establecer el shim de DiskArchiveStorage.OpenForDirectUpdate(Stream stream)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDiskArchiveStorage.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDiskArchiveStorage.AllInstances.ConvertTemporaryToFinal">
            <summary>Establecer el shim de DiskArchiveStorage.ConvertTemporaryToFinal()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDiskArchiveStorage.AllInstances.Dispose">
            <summary>Establecer el shim de DiskArchiveStorage.Dispose()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDiskArchiveStorage.AllInstances.GetTemporaryOutput">
            <summary>Establecer el shim de DiskArchiveStorage.GetTemporaryOutput()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDiskArchiveStorage.AllInstances.MakeTemporaryCopyStream">
            <summary>Establecer el shim de DiskArchiveStorage.MakeTemporaryCopy(Stream stream)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDiskArchiveStorage.AllInstances.OpenForDirectUpdateStream">
            <summary>Establecer el shim de DiskArchiveStorage.OpenForDirectUpdate(Stream stream)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDynamicDiskDataSource">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Zip.DynamicDiskDataSource</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDynamicDiskDataSource.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDynamicDiskDataSource.#ctor(ICSharpCode.SharpZipLib.Zip.DynamicDiskDataSource)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDynamicDiskDataSource.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDynamicDiskDataSource.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDynamicDiskDataSource.Bind(ICSharpCode.SharpZipLib.Zip.IDynamicDataSource)">
            <summary>Asocia los miembros de la interfaz a las correcciones de compatibilidad (shim).</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDynamicDiskDataSource.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDynamicDiskDataSource.Constructor">
            <summary>Establecer el shim de DynamicDiskDataSource.DynamicDiskDataSource()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDynamicDiskDataSource.GetSourceZipEntryString">
            <summary>Establecer el shim de DynamicDiskDataSource.GetSource(ZipEntry entry, String name)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDynamicDiskDataSource.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimDynamicDiskDataSource.AllInstances.GetSourceZipEntryString">
            <summary>Establecer el shim de DynamicDiskDataSource.GetSource(ZipEntry entry, String name)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimExtendedUnixData">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Zip.ExtendedUnixData</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimExtendedUnixData.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimExtendedUnixData.#ctor(ICSharpCode.SharpZipLib.Zip.ExtendedUnixData)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimExtendedUnixData.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimExtendedUnixData.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimExtendedUnixData.Bind(ICSharpCode.SharpZipLib.Zip.ITaggedData)">
            <summary>Asocia los miembros de la interfaz a las correcciones de compatibilidad (shim).</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimExtendedUnixData.AccessTimeGet">
            <summary>Establecer el shim de ExtendedUnixData.get_AccessTime()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimExtendedUnixData.AccessTimeSetDateTime">
            <summary>Establecer el shim de ExtendedUnixData.set_AccessTime(DateTime value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimExtendedUnixData.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimExtendedUnixData.Constructor">
            <summary>Establecer el shim de ExtendedUnixData.ExtendedUnixData()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimExtendedUnixData.CreateTimeGet">
            <summary>Establecer el shim de ExtendedUnixData.get_CreateTime()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimExtendedUnixData.CreateTimeSetDateTime">
            <summary>Establecer el shim de ExtendedUnixData.set_CreateTime(DateTime value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimExtendedUnixData.GetData">
            <summary>Establecer el shim de ExtendedUnixData.GetData()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimExtendedUnixData.IncludeGet">
            <summary>Establecer el shim de ExtendedUnixData.get_Include()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimExtendedUnixData.IncludeSetExtendedUnixDataFlags">
            <summary>Establecer el shim de ExtendedUnixData.set_Include(Flags value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimExtendedUnixData.IsValidValueDateTime">
            <summary>Establecer el shim de ExtendedUnixData.IsValidValue(DateTime value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimExtendedUnixData.ModificationTimeGet">
            <summary>Establecer el shim de ExtendedUnixData.get_ModificationTime()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimExtendedUnixData.ModificationTimeSetDateTime">
            <summary>Establecer el shim de ExtendedUnixData.set_ModificationTime(DateTime value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimExtendedUnixData.SetDataByteArrayInt32Int32">
            <summary>Establecer el shim de ExtendedUnixData.SetData(Byte[] data, Int32 index, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimExtendedUnixData.TagIDGet">
            <summary>Establecer el shim de ExtendedUnixData.get_TagID()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimExtendedUnixData.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimExtendedUnixData.AllInstances.AccessTimeGet">
            <summary>Establecer el shim de ExtendedUnixData.get_AccessTime()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimExtendedUnixData.AllInstances.AccessTimeSetDateTime">
            <summary>Establecer el shim de ExtendedUnixData.set_AccessTime(DateTime value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimExtendedUnixData.AllInstances.CreateTimeGet">
            <summary>Establecer el shim de ExtendedUnixData.get_CreateTime()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimExtendedUnixData.AllInstances.CreateTimeSetDateTime">
            <summary>Establecer el shim de ExtendedUnixData.set_CreateTime(DateTime value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimExtendedUnixData.AllInstances.GetData">
            <summary>Establecer el shim de ExtendedUnixData.GetData()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimExtendedUnixData.AllInstances.IncludeGet">
            <summary>Establecer el shim de ExtendedUnixData.get_Include()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimExtendedUnixData.AllInstances.IncludeSetExtendedUnixDataFlags">
            <summary>Establecer el shim de ExtendedUnixData.set_Include(Flags value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimExtendedUnixData.AllInstances.ModificationTimeGet">
            <summary>Establecer el shim de ExtendedUnixData.get_ModificationTime()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimExtendedUnixData.AllInstances.ModificationTimeSetDateTime">
            <summary>Establecer el shim de ExtendedUnixData.set_ModificationTime(DateTime value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimExtendedUnixData.AllInstances.SetDataByteArrayInt32Int32">
            <summary>Establecer el shim de ExtendedUnixData.SetData(Byte[] data, Int32 index, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimExtendedUnixData.AllInstances.TagIDGet">
            <summary>Establecer el shim de ExtendedUnixData.get_TagID()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Zip.FastZip</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.#ctor(ICSharpCode.SharpZipLib.Zip.FastZip)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.AddFileContentsStringStream">
            <summary>Establecer el shim de FastZip.AddFileContents(String name, Stream stream)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.Constructor">
            <summary>Establecer el shim de FastZip.FastZip()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.ConstructorFastZipEvents">
            <summary>Establecer el shim de FastZip.FastZip(FastZipEvents events)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.CreateEmptyDirectoriesGet">
            <summary>Establecer el shim de FastZip.get_CreateEmptyDirectories()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.CreateEmptyDirectoriesSetBoolean">
            <summary>Establecer el shim de FastZip.set_CreateEmptyDirectories(Boolean value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.CreateZipStreamStringBooleanStringString">
            <summary>Establecer el shim de FastZip.CreateZip(Stream outputStream, String sourceDirectory, Boolean recurse, String fileFilter, String directoryFilter)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.CreateZipStringStringBooleanString">
            <summary>Establecer el shim de FastZip.CreateZip(String zipFileName, String sourceDirectory, Boolean recurse, String fileFilter)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.CreateZipStringStringBooleanStringString">
            <summary>Establecer el shim de FastZip.CreateZip(String zipFileName, String sourceDirectory, Boolean recurse, String fileFilter, String directoryFilter)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.EntryFactoryGet">
            <summary>Establecer el shim de FastZip.get_EntryFactory()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.EntryFactorySetIEntryFactory">
            <summary>Establecer el shim de FastZip.set_EntryFactory(IEntryFactory value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.ExtractEntryZipEntry">
            <summary>Establecer el shim de FastZip.ExtractEntry(ZipEntry entry)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.ExtractFileEntryZipEntryString">
            <summary>Establecer el shim de FastZip.ExtractFileEntry(ZipEntry entry, String targetName)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.ExtractZipStringStringFastZipOverwriteFastZipConfirmOverwriteDelegateStringStringBoolean">
            <summary>Establecer el shim de FastZip.ExtractZip(String zipFileName, String targetDirectory, Overwrite overwrite, ConfirmOverwriteDelegate confirmDelegate, String fileFilter, String directoryFilter, Boolean restoreDateTime)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.ExtractZipStringStringString">
            <summary>Establecer el shim de FastZip.ExtractZip(String zipFileName, String targetDirectory, String fileFilter)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.MakeExternalAttributesFileInfo">
            <summary>Establecer el shim de FastZip.MakeExternalAttributes(FileInfo info)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.NameIsValidString">
            <summary>Establecer el shim de FastZip.NameIsValid(String name)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.NameTransformGet">
            <summary>Establecer el shim de FastZip.get_NameTransform()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.NameTransformSetINameTransform">
            <summary>Establecer el shim de FastZip.set_NameTransform(INameTransform value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.PasswordGet">
            <summary>Establecer el shim de FastZip.get_Password()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.PasswordSetString">
            <summary>Establecer el shim de FastZip.set_Password(String value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.ProcessDirectoryObjectDirectoryEventArgs">
            <summary>Establecer el shim de FastZip.ProcessDirectory(Object sender, DirectoryEventArgs e)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.ProcessFileObjectScanEventArgs">
            <summary>Establecer el shim de FastZip.ProcessFile(Object sender, ScanEventArgs e)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.RestoreAttributesOnExtractGet">
            <summary>Establecer el shim de FastZip.get_RestoreAttributesOnExtract()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.RestoreAttributesOnExtractSetBoolean">
            <summary>Establecer el shim de FastZip.set_RestoreAttributesOnExtract(Boolean value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.RestoreDateTimeOnExtractGet">
            <summary>Establecer el shim de FastZip.get_RestoreDateTimeOnExtract()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.RestoreDateTimeOnExtractSetBoolean">
            <summary>Establecer el shim de FastZip.set_RestoreDateTimeOnExtract(Boolean value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.UseZip64Get">
            <summary>Establecer el shim de FastZip.get_UseZip64()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.UseZip64SetUseZip64">
            <summary>Establecer el shim de FastZip.set_UseZip64(UseZip64 value)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.AllInstances.AddFileContentsStringStream">
            <summary>Establecer el shim de FastZip.AddFileContents(String name, Stream stream)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.AllInstances.CreateEmptyDirectoriesGet">
            <summary>Establecer el shim de FastZip.get_CreateEmptyDirectories()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.AllInstances.CreateEmptyDirectoriesSetBoolean">
            <summary>Establecer el shim de FastZip.set_CreateEmptyDirectories(Boolean value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.AllInstances.CreateZipStreamStringBooleanStringString">
            <summary>Establecer el shim de FastZip.CreateZip(Stream outputStream, String sourceDirectory, Boolean recurse, String fileFilter, String directoryFilter)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.AllInstances.CreateZipStringStringBooleanString">
            <summary>Establecer el shim de FastZip.CreateZip(String zipFileName, String sourceDirectory, Boolean recurse, String fileFilter)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.AllInstances.CreateZipStringStringBooleanStringString">
            <summary>Establecer el shim de FastZip.CreateZip(String zipFileName, String sourceDirectory, Boolean recurse, String fileFilter, String directoryFilter)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.AllInstances.EntryFactoryGet">
            <summary>Establecer el shim de FastZip.get_EntryFactory()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.AllInstances.EntryFactorySetIEntryFactory">
            <summary>Establecer el shim de FastZip.set_EntryFactory(IEntryFactory value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.AllInstances.ExtractEntryZipEntry">
            <summary>Establecer el shim de FastZip.ExtractEntry(ZipEntry entry)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.AllInstances.ExtractFileEntryZipEntryString">
            <summary>Establecer el shim de FastZip.ExtractFileEntry(ZipEntry entry, String targetName)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.AllInstances.ExtractZipStringStringFastZipOverwriteFastZipConfirmOverwriteDelegateStringStringBoolean">
            <summary>Establecer el shim de FastZip.ExtractZip(String zipFileName, String targetDirectory, Overwrite overwrite, ConfirmOverwriteDelegate confirmDelegate, String fileFilter, String directoryFilter, Boolean restoreDateTime)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.AllInstances.ExtractZipStringStringString">
            <summary>Establecer el shim de FastZip.ExtractZip(String zipFileName, String targetDirectory, String fileFilter)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.AllInstances.NameTransformGet">
            <summary>Establecer el shim de FastZip.get_NameTransform()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.AllInstances.NameTransformSetINameTransform">
            <summary>Establecer el shim de FastZip.set_NameTransform(INameTransform value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.AllInstances.PasswordGet">
            <summary>Establecer el shim de FastZip.get_Password()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.AllInstances.PasswordSetString">
            <summary>Establecer el shim de FastZip.set_Password(String value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.AllInstances.ProcessDirectoryObjectDirectoryEventArgs">
            <summary>Establecer el shim de FastZip.ProcessDirectory(Object sender, DirectoryEventArgs e)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.AllInstances.ProcessFileObjectScanEventArgs">
            <summary>Establecer el shim de FastZip.ProcessFile(Object sender, ScanEventArgs e)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.AllInstances.RestoreAttributesOnExtractGet">
            <summary>Establecer el shim de FastZip.get_RestoreAttributesOnExtract()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.AllInstances.RestoreAttributesOnExtractSetBoolean">
            <summary>Establecer el shim de FastZip.set_RestoreAttributesOnExtract(Boolean value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.AllInstances.RestoreDateTimeOnExtractGet">
            <summary>Establecer el shim de FastZip.get_RestoreDateTimeOnExtract()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.AllInstances.RestoreDateTimeOnExtractSetBoolean">
            <summary>Establecer el shim de FastZip.set_RestoreDateTimeOnExtract(Boolean value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.AllInstances.UseZip64Get">
            <summary>Establecer el shim de FastZip.get_UseZip64()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZip.AllInstances.UseZip64SetUseZip64">
            <summary>Establecer el shim de FastZip.set_UseZip64(UseZip64 value)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZipEvents">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Zip.FastZipEvents</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZipEvents.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZipEvents.#ctor(ICSharpCode.SharpZipLib.Zip.FastZipEvents)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZipEvents.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZipEvents.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZipEvents.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZipEvents.Constructor">
            <summary>Establecer el shim de FastZipEvents.FastZipEvents()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZipEvents.OnCompletedFileString">
            <summary>Establecer el shim de FastZipEvents.OnCompletedFile(String file)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZipEvents.OnDirectoryFailureStringException">
            <summary>Establecer el shim de FastZipEvents.OnDirectoryFailure(String directory, Exception e)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZipEvents.OnFileFailureStringException">
            <summary>Establecer el shim de FastZipEvents.OnFileFailure(String file, Exception e)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZipEvents.OnProcessDirectoryStringBoolean">
            <summary>Establecer el shim de FastZipEvents.OnProcessDirectory(String directory, Boolean hasMatchingFiles)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZipEvents.OnProcessFileString">
            <summary>Establecer el shim de FastZipEvents.OnProcessFile(String file)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZipEvents.ProgressIntervalGet">
            <summary>Establecer el shim de FastZipEvents.get_ProgressInterval()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZipEvents.ProgressIntervalSetTimeSpan">
            <summary>Establecer el shim de FastZipEvents.set_ProgressInterval(TimeSpan value)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZipEvents.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZipEvents.AllInstances.OnCompletedFileString">
            <summary>Establecer el shim de FastZipEvents.OnCompletedFile(String file)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZipEvents.AllInstances.OnDirectoryFailureStringException">
            <summary>Establecer el shim de FastZipEvents.OnDirectoryFailure(String directory, Exception e)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZipEvents.AllInstances.OnFileFailureStringException">
            <summary>Establecer el shim de FastZipEvents.OnFileFailure(String file, Exception e)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZipEvents.AllInstances.OnProcessDirectoryStringBoolean">
            <summary>Establecer el shim de FastZipEvents.OnProcessDirectory(String directory, Boolean hasMatchingFiles)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZipEvents.AllInstances.OnProcessFileString">
            <summary>Establecer el shim de FastZipEvents.OnProcessFile(String file)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZipEvents.AllInstances.ProgressIntervalGet">
            <summary>Establecer el shim de FastZipEvents.get_ProgressInterval()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimFastZipEvents.AllInstances.ProgressIntervalSetTimeSpan">
            <summary>Establecer el shim de FastZipEvents.set_ProgressInterval(TimeSpan value)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimKeysRequiredEventArgs">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimKeysRequiredEventArgs.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimKeysRequiredEventArgs.#ctor(ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimKeysRequiredEventArgs.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimKeysRequiredEventArgs.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimKeysRequiredEventArgs.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimKeysRequiredEventArgs.ConstructorString">
            <summary>Establecer el shim de KeysRequiredEventArgs.KeysRequiredEventArgs(String name)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimKeysRequiredEventArgs.ConstructorStringByteArray">
            <summary>Establecer el shim de KeysRequiredEventArgs.KeysRequiredEventArgs(String name, Byte[] keyValue)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimKeysRequiredEventArgs.FileNameGet">
            <summary>Establecer el shim de KeysRequiredEventArgs.get_FileName()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimKeysRequiredEventArgs.KeyGet">
            <summary>Establecer el shim de KeysRequiredEventArgs.get_Key()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimKeysRequiredEventArgs.KeySetByteArray">
            <summary>Establecer el shim de KeysRequiredEventArgs.set_Key(Byte[] value)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimKeysRequiredEventArgs.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimKeysRequiredEventArgs.AllInstances.FileNameGet">
            <summary>Establecer el shim de KeysRequiredEventArgs.get_FileName()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimKeysRequiredEventArgs.AllInstances.KeyGet">
            <summary>Establecer el shim de KeysRequiredEventArgs.get_Key()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimKeysRequiredEventArgs.AllInstances.KeySetByteArray">
            <summary>Establecer el shim de KeysRequiredEventArgs.set_Key(Byte[] value)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimMemoryArchiveStorage">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimMemoryArchiveStorage.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimMemoryArchiveStorage.#ctor(ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimMemoryArchiveStorage.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimMemoryArchiveStorage.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimMemoryArchiveStorage.Bind(ICSharpCode.SharpZipLib.Zip.IArchiveStorage)">
            <summary>Asocia los miembros de la interfaz a las correcciones de compatibilidad (shim).</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimMemoryArchiveStorage.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimMemoryArchiveStorage.Constructor">
            <summary>Establecer el shim de MemoryArchiveStorage.MemoryArchiveStorage()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimMemoryArchiveStorage.ConstructorFileUpdateMode">
            <summary>Establecer el shim de MemoryArchiveStorage.MemoryArchiveStorage(FileUpdateMode updateMode)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimMemoryArchiveStorage.ConvertTemporaryToFinal">
            <summary>Establecer el shim de MemoryArchiveStorage.ConvertTemporaryToFinal()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimMemoryArchiveStorage.Dispose">
            <summary>Establecer el shim de MemoryArchiveStorage.Dispose()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimMemoryArchiveStorage.FinalStreamGet">
            <summary>Establecer el shim de MemoryArchiveStorage.get_FinalStream()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimMemoryArchiveStorage.GetTemporaryOutput">
            <summary>Establecer el shim de MemoryArchiveStorage.GetTemporaryOutput()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimMemoryArchiveStorage.MakeTemporaryCopyStream">
            <summary>Establecer el shim de MemoryArchiveStorage.MakeTemporaryCopy(Stream stream)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimMemoryArchiveStorage.OpenForDirectUpdateStream">
            <summary>Establecer el shim de MemoryArchiveStorage.OpenForDirectUpdate(Stream stream)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimMemoryArchiveStorage.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimMemoryArchiveStorage.AllInstances.ConvertTemporaryToFinal">
            <summary>Establecer el shim de MemoryArchiveStorage.ConvertTemporaryToFinal()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimMemoryArchiveStorage.AllInstances.Dispose">
            <summary>Establecer el shim de MemoryArchiveStorage.Dispose()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimMemoryArchiveStorage.AllInstances.FinalStreamGet">
            <summary>Establecer el shim de MemoryArchiveStorage.get_FinalStream()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimMemoryArchiveStorage.AllInstances.GetTemporaryOutput">
            <summary>Establecer el shim de MemoryArchiveStorage.GetTemporaryOutput()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimMemoryArchiveStorage.AllInstances.MakeTemporaryCopyStream">
            <summary>Establecer el shim de MemoryArchiveStorage.MakeTemporaryCopy(Stream stream)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimMemoryArchiveStorage.AllInstances.OpenForDirectUpdateStream">
            <summary>Establecer el shim de MemoryArchiveStorage.OpenForDirectUpdate(Stream stream)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimNTTaggedData">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Zip.NTTaggedData</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimNTTaggedData.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimNTTaggedData.#ctor(ICSharpCode.SharpZipLib.Zip.NTTaggedData)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimNTTaggedData.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimNTTaggedData.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimNTTaggedData.Bind(ICSharpCode.SharpZipLib.Zip.ITaggedData)">
            <summary>Asocia los miembros de la interfaz a las correcciones de compatibilidad (shim).</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimNTTaggedData.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimNTTaggedData.Constructor">
            <summary>Establecer el shim de NTTaggedData.NTTaggedData()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimNTTaggedData.CreateTimeGet">
            <summary>Establecer el shim de NTTaggedData.get_CreateTime()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimNTTaggedData.CreateTimeSetDateTime">
            <summary>Establecer el shim de NTTaggedData.set_CreateTime(DateTime value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimNTTaggedData.GetData">
            <summary>Establecer el shim de NTTaggedData.GetData()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimNTTaggedData.IsValidValueDateTime">
            <summary>Establecer el shim de NTTaggedData.IsValidValue(DateTime value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimNTTaggedData.LastAccessTimeGet">
            <summary>Establecer el shim de NTTaggedData.get_LastAccessTime()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimNTTaggedData.LastAccessTimeSetDateTime">
            <summary>Establecer el shim de NTTaggedData.set_LastAccessTime(DateTime value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimNTTaggedData.LastModificationTimeGet">
            <summary>Establecer el shim de NTTaggedData.get_LastModificationTime()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimNTTaggedData.LastModificationTimeSetDateTime">
            <summary>Establecer el shim de NTTaggedData.set_LastModificationTime(DateTime value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimNTTaggedData.SetDataByteArrayInt32Int32">
            <summary>Establecer el shim de NTTaggedData.SetData(Byte[] data, Int32 index, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimNTTaggedData.TagIDGet">
            <summary>Establecer el shim de NTTaggedData.get_TagID()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimNTTaggedData.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimNTTaggedData.AllInstances.CreateTimeGet">
            <summary>Establecer el shim de NTTaggedData.get_CreateTime()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimNTTaggedData.AllInstances.CreateTimeSetDateTime">
            <summary>Establecer el shim de NTTaggedData.set_CreateTime(DateTime value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimNTTaggedData.AllInstances.GetData">
            <summary>Establecer el shim de NTTaggedData.GetData()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimNTTaggedData.AllInstances.LastAccessTimeGet">
            <summary>Establecer el shim de NTTaggedData.get_LastAccessTime()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimNTTaggedData.AllInstances.LastAccessTimeSetDateTime">
            <summary>Establecer el shim de NTTaggedData.set_LastAccessTime(DateTime value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimNTTaggedData.AllInstances.LastModificationTimeGet">
            <summary>Establecer el shim de NTTaggedData.get_LastModificationTime()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimNTTaggedData.AllInstances.LastModificationTimeSetDateTime">
            <summary>Establecer el shim de NTTaggedData.set_LastModificationTime(DateTime value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimNTTaggedData.AllInstances.SetDataByteArrayInt32Int32">
            <summary>Establecer el shim de NTTaggedData.SetData(Byte[] data, Int32 index, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimNTTaggedData.AllInstances.TagIDGet">
            <summary>Establecer el shim de NTTaggedData.get_TagID()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimRawTaggedData">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Zip.RawTaggedData</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimRawTaggedData.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimRawTaggedData.#ctor(ICSharpCode.SharpZipLib.Zip.RawTaggedData)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimRawTaggedData.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimRawTaggedData.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimRawTaggedData.Bind(ICSharpCode.SharpZipLib.Zip.ITaggedData)">
            <summary>Asocia los miembros de la interfaz a las correcciones de compatibilidad (shim).</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimRawTaggedData.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimRawTaggedData.ConstructorInt16">
            <summary>Establecer el shim de RawTaggedData.RawTaggedData(Int16 tag)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimRawTaggedData.DataGet">
            <summary>Establecer el shim de RawTaggedData.get_Data()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimRawTaggedData.DataSetByteArray">
            <summary>Establecer el shim de RawTaggedData.set_Data(Byte[] value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimRawTaggedData.GetData">
            <summary>Establecer el shim de RawTaggedData.GetData()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimRawTaggedData.SetDataByteArrayInt32Int32">
            <summary>Establecer el shim de RawTaggedData.SetData(Byte[] data, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimRawTaggedData.TagIDGet">
            <summary>Establecer el shim de RawTaggedData.get_TagID()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimRawTaggedData.TagIDSetInt16">
            <summary>Establecer el shim de RawTaggedData.set_TagID(Int16 value)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimRawTaggedData.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimRawTaggedData.AllInstances.DataGet">
            <summary>Establecer el shim de RawTaggedData.get_Data()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimRawTaggedData.AllInstances.DataSetByteArray">
            <summary>Establecer el shim de RawTaggedData.set_Data(Byte[] value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimRawTaggedData.AllInstances.GetData">
            <summary>Establecer el shim de RawTaggedData.GetData()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimRawTaggedData.AllInstances.SetDataByteArrayInt32Int32">
            <summary>Establecer el shim de RawTaggedData.SetData(Byte[] data, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimRawTaggedData.AllInstances.TagIDGet">
            <summary>Establecer el shim de RawTaggedData.get_TagID()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimRawTaggedData.AllInstances.TagIDSetInt16">
            <summary>Establecer el shim de RawTaggedData.set_TagID(Int16 value)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimStaticDiskDataSource">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Zip.StaticDiskDataSource</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimStaticDiskDataSource.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimStaticDiskDataSource.#ctor(ICSharpCode.SharpZipLib.Zip.StaticDiskDataSource)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimStaticDiskDataSource.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimStaticDiskDataSource.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimStaticDiskDataSource.Bind(ICSharpCode.SharpZipLib.Zip.IStaticDataSource)">
            <summary>Asocia los miembros de la interfaz a las correcciones de compatibilidad (shim).</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimStaticDiskDataSource.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimStaticDiskDataSource.ConstructorString">
            <summary>Establecer el shim de StaticDiskDataSource.StaticDiskDataSource(String fileName)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimStaticDiskDataSource.GetSource">
            <summary>Establecer el shim de StaticDiskDataSource.GetSource()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimStaticDiskDataSource.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimStaticDiskDataSource.AllInstances.GetSource">
            <summary>Establecer el shim de StaticDiskDataSource.GetSource()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimTestStatus">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Zip.TestStatus</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimTestStatus.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimTestStatus.#ctor(ICSharpCode.SharpZipLib.Zip.TestStatus)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimTestStatus.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimTestStatus.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimTestStatus.AddError">
            <summary>Establecer el shim de TestStatus.AddError()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimTestStatus.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimTestStatus.BytesTestedGet">
            <summary>Establecer el shim de TestStatus.get_BytesTested()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimTestStatus.ConstructorZipFile">
            <summary>Establecer el shim de TestStatus.TestStatus(ZipFile file)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimTestStatus.EntryGet">
            <summary>Establecer el shim de TestStatus.get_Entry()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimTestStatus.EntryValidGet">
            <summary>Establecer el shim de TestStatus.get_EntryValid()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimTestStatus.ErrorCountGet">
            <summary>Establecer el shim de TestStatus.get_ErrorCount()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimTestStatus.FileGet">
            <summary>Establecer el shim de TestStatus.get_File()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimTestStatus.OperationGet">
            <summary>Establecer el shim de TestStatus.get_Operation()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimTestStatus.SetBytesTestedInt64">
            <summary>Establecer el shim de TestStatus.SetBytesTested(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimTestStatus.SetEntryZipEntry">
            <summary>Establecer el shim de TestStatus.SetEntry(ZipEntry entry)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimTestStatus.SetOperationTestOperation">
            <summary>Establecer el shim de TestStatus.SetOperation(TestOperation operation)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimTestStatus.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimTestStatus.AllInstances.AddError">
            <summary>Establecer el shim de TestStatus.AddError()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimTestStatus.AllInstances.BytesTestedGet">
            <summary>Establecer el shim de TestStatus.get_BytesTested()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimTestStatus.AllInstances.EntryGet">
            <summary>Establecer el shim de TestStatus.get_Entry()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimTestStatus.AllInstances.EntryValidGet">
            <summary>Establecer el shim de TestStatus.get_EntryValid()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimTestStatus.AllInstances.ErrorCountGet">
            <summary>Establecer el shim de TestStatus.get_ErrorCount()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimTestStatus.AllInstances.FileGet">
            <summary>Establecer el shim de TestStatus.get_File()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimTestStatus.AllInstances.OperationGet">
            <summary>Establecer el shim de TestStatus.get_Operation()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimTestStatus.AllInstances.SetBytesTestedInt64">
            <summary>Establecer el shim de TestStatus.SetBytesTested(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimTestStatus.AllInstances.SetEntryZipEntry">
            <summary>Establecer el shim de TestStatus.SetEntry(ZipEntry entry)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimTestStatus.AllInstances.SetOperationTestOperation">
            <summary>Establecer el shim de TestStatus.SetOperation(TestOperation operation)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimWindowsNameTransform">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Zip.WindowsNameTransform</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimWindowsNameTransform.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimWindowsNameTransform.#ctor(ICSharpCode.SharpZipLib.Zip.WindowsNameTransform)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimWindowsNameTransform.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimWindowsNameTransform.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimWindowsNameTransform.Bind(ICSharpCode.SharpZipLib.Core.INameTransform)">
            <summary>Asocia los miembros de la interfaz a las correcciones de compatibilidad (shim).</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimWindowsNameTransform.BaseDirectoryGet">
            <summary>Establecer el shim de WindowsNameTransform.get_BaseDirectory()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimWindowsNameTransform.BaseDirectorySetString">
            <summary>Establecer el shim de WindowsNameTransform.set_BaseDirectory(String value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimWindowsNameTransform.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimWindowsNameTransform.Constructor">
            <summary>Establecer el shim de WindowsNameTransform.WindowsNameTransform()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimWindowsNameTransform.ConstructorString">
            <summary>Establecer el shim de WindowsNameTransform.WindowsNameTransform(String baseDirectory)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimWindowsNameTransform.IsValidNameString">
            <summary>Establecer el shim de WindowsNameTransform.IsValidName(String name)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimWindowsNameTransform.MakeValidNameStringChar">
            <summary>Establecer el shim de WindowsNameTransform.MakeValidName(String name, Char replacement)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimWindowsNameTransform.ReplacementGet">
            <summary>Establecer el shim de WindowsNameTransform.get_Replacement()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimWindowsNameTransform.ReplacementSetChar">
            <summary>Establecer el shim de WindowsNameTransform.set_Replacement(Char value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimWindowsNameTransform.StaticConstructor">
            <summary>Establecer el shim de WindowsNameTransform.WindowsNameTransform()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimWindowsNameTransform.TransformDirectoryString">
            <summary>Establecer el shim de WindowsNameTransform.TransformDirectory(String name)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimWindowsNameTransform.TransformFileString">
            <summary>Establecer el shim de WindowsNameTransform.TransformFile(String name)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimWindowsNameTransform.TrimIncomingPathsGet">
            <summary>Establecer el shim de WindowsNameTransform.get_TrimIncomingPaths()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimWindowsNameTransform.TrimIncomingPathsSetBoolean">
            <summary>Establecer el shim de WindowsNameTransform.set_TrimIncomingPaths(Boolean value)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimWindowsNameTransform.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimWindowsNameTransform.AllInstances.BaseDirectoryGet">
            <summary>Establecer el shim de WindowsNameTransform.get_BaseDirectory()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimWindowsNameTransform.AllInstances.BaseDirectorySetString">
            <summary>Establecer el shim de WindowsNameTransform.set_BaseDirectory(String value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimWindowsNameTransform.AllInstances.ReplacementGet">
            <summary>Establecer el shim de WindowsNameTransform.get_Replacement()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimWindowsNameTransform.AllInstances.ReplacementSetChar">
            <summary>Establecer el shim de WindowsNameTransform.set_Replacement(Char value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimWindowsNameTransform.AllInstances.TransformDirectoryString">
            <summary>Establecer el shim de WindowsNameTransform.TransformDirectory(String name)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimWindowsNameTransform.AllInstances.TransformFileString">
            <summary>Establecer el shim de WindowsNameTransform.TransformFile(String name)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimWindowsNameTransform.AllInstances.TrimIncomingPathsGet">
            <summary>Establecer el shim de WindowsNameTransform.get_TrimIncomingPaths()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimWindowsNameTransform.AllInstances.TrimIncomingPathsSetBoolean">
            <summary>Establecer el shim de WindowsNameTransform.set_TrimIncomingPaths(Boolean value)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipConstants">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Zip.ZipConstants</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipConstants.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipConstants.#ctor(ICSharpCode.SharpZipLib.Zip.ZipConstants)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipConstants.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipConstants.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipConstants.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipConstants.Constructor">
            <summary>Establecer el shim de ZipConstants.ZipConstants()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipConstants.ConvertToArrayInt32String">
            <summary>Establecer el shim de ZipConstants.ConvertToArray(Int32 flags, String str)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipConstants.ConvertToArrayString">
            <summary>Establecer el shim de ZipConstants.ConvertToArray(String str)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipConstants.ConvertToStringByteArray">
            <summary>Establecer el shim de ZipConstants.ConvertToString(Byte[] data)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipConstants.ConvertToStringByteArrayInt32">
            <summary>Establecer el shim de ZipConstants.ConvertToString(Byte[] data, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipConstants.ConvertToStringExtInt32ByteArray">
            <summary>Establecer el shim de ZipConstants.ConvertToStringExt(Int32 flags, Byte[] data)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipConstants.ConvertToStringExtInt32ByteArrayInt32">
            <summary>Establecer el shim de ZipConstants.ConvertToStringExt(Int32 flags, Byte[] data, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipConstants.DefaultCodePageGet">
            <summary>Establecer el shim de ZipConstants.get_DefaultCodePage()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipConstants.DefaultCodePageSetInt32">
            <summary>Establecer el shim de ZipConstants.set_DefaultCodePage(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipConstants.StaticConstructor">
            <summary>Establecer el shim de ZipConstants.ZipConstants()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipConstants.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Zip.ZipEntry</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.#ctor(ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.Bind(System.ICloneable)">
            <summary>Asocia los miembros de la interfaz a las correcciones de compatibilidad (shim).</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.CanDecompressGet">
            <summary>Establecer el shim de ZipEntry.get_CanDecompress()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.CentralHeaderRequiresZip64Get">
            <summary>Establecer el shim de ZipEntry.get_CentralHeaderRequiresZip64()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.CleanNameString">
            <summary>Establecer el shim de ZipEntry.CleanName(String name)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.Clone">
            <summary>Establecer el shim de ZipEntry.Clone()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.CommentGet">
            <summary>Establecer el shim de ZipEntry.get_Comment()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.CommentSetString">
            <summary>Establecer el shim de ZipEntry.set_Comment(String value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.CompressedSizeGet">
            <summary>Establecer el shim de ZipEntry.get_CompressedSize()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.CompressedSizeSetInt64">
            <summary>Establecer el shim de ZipEntry.set_CompressedSize(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.CompressionMethodGet">
            <summary>Establecer el shim de ZipEntry.get_CompressionMethod()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.CompressionMethodSetCompressionMethod">
            <summary>Establecer el shim de ZipEntry.set_CompressionMethod(CompressionMethod value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.ConstructorString">
            <summary>Establecer el shim de ZipEntry.ZipEntry(String name)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.ConstructorStringInt32">
            <summary>Establecer el shim de ZipEntry.ZipEntry(String name, Int32 versionRequiredToExtract)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.ConstructorStringInt32Int32CompressionMethod">
            <summary>Establecer el shim de ZipEntry.ZipEntry(String name, Int32 versionRequiredToExtract, Int32 madeByInfo, CompressionMethod method)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.ConstructorZipEntry">
            <summary>Establecer el shim de ZipEntry.ZipEntry(ZipEntry entry)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.CrcGet">
            <summary>Establecer el shim de ZipEntry.get_Crc()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.CrcSetInt64">
            <summary>Establecer el shim de ZipEntry.set_Crc(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.CryptoCheckValueGet">
            <summary>Establecer el shim de ZipEntry.get_CryptoCheckValue()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.CryptoCheckValueSetByte">
            <summary>Establecer el shim de ZipEntry.set_CryptoCheckValue(Byte value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.DateTimeGet">
            <summary>Establecer el shim de ZipEntry.get_DateTime()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.DateTimeSetDateTime">
            <summary>Establecer el shim de ZipEntry.set_DateTime(DateTime value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.DosTimeGet">
            <summary>Establecer el shim de ZipEntry.get_DosTime()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.DosTimeSetInt64">
            <summary>Establecer el shim de ZipEntry.set_DosTime(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.ExternalFileAttributesGet">
            <summary>Establecer el shim de ZipEntry.get_ExternalFileAttributes()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.ExternalFileAttributesSetInt32">
            <summary>Establecer el shim de ZipEntry.set_ExternalFileAttributes(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.ExtraDataGet">
            <summary>Establecer el shim de ZipEntry.get_ExtraData()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.ExtraDataSetByteArray">
            <summary>Establecer el shim de ZipEntry.set_ExtraData(Byte[] value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.FlagsGet">
            <summary>Establecer el shim de ZipEntry.get_Flags()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.FlagsSetInt32">
            <summary>Establecer el shim de ZipEntry.set_Flags(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.ForceZip64">
            <summary>Establecer el shim de ZipEntry.ForceZip64()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.HasCrcGet">
            <summary>Establecer el shim de ZipEntry.get_HasCrc()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.HasDosAttributesInt32">
            <summary>Establecer el shim de ZipEntry.HasDosAttributes(Int32 attributes)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.HostSystemGet">
            <summary>Establecer el shim de ZipEntry.get_HostSystem()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.HostSystemSetInt32">
            <summary>Establecer el shim de ZipEntry.set_HostSystem(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.IsCompressionMethodSupported">
            <summary>Establecer el shim de ZipEntry.IsCompressionMethodSupported()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.IsCompressionMethodSupportedCompressionMethod">
            <summary>Establecer el shim de ZipEntry.IsCompressionMethodSupported(CompressionMethod method)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.IsCryptedGet">
            <summary>Establecer el shim de ZipEntry.get_IsCrypted()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.IsCryptedSetBoolean">
            <summary>Establecer el shim de ZipEntry.set_IsCrypted(Boolean value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.IsDOSEntryGet">
            <summary>Establecer el shim de ZipEntry.get_IsDOSEntry()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.IsDirectoryGet">
            <summary>Establecer el shim de ZipEntry.get_IsDirectory()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.IsFileGet">
            <summary>Establecer el shim de ZipEntry.get_IsFile()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.IsUnicodeTextGet">
            <summary>Establecer el shim de ZipEntry.get_IsUnicodeText()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.IsUnicodeTextSetBoolean">
            <summary>Establecer el shim de ZipEntry.set_IsUnicodeText(Boolean value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.IsZip64Forced">
            <summary>Establecer el shim de ZipEntry.IsZip64Forced()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.LocalHeaderRequiresZip64Get">
            <summary>Establecer el shim de ZipEntry.get_LocalHeaderRequiresZip64()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.NameGet">
            <summary>Establecer el shim de ZipEntry.get_Name()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.OffsetGet">
            <summary>Establecer el shim de ZipEntry.get_Offset()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.OffsetSetInt64">
            <summary>Establecer el shim de ZipEntry.set_Offset(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.ProcessExtraDataBoolean">
            <summary>Establecer el shim de ZipEntry.ProcessExtraData(Boolean localHeader)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.SizeGet">
            <summary>Establecer el shim de ZipEntry.get_Size()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.SizeSetInt64">
            <summary>Establecer el shim de ZipEntry.set_Size(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.ToString">
            <summary>Establecer el shim de ZipEntry.ToString()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.VersionGet">
            <summary>Establecer el shim de ZipEntry.get_Version()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.VersionMadeByGet">
            <summary>Establecer el shim de ZipEntry.get_VersionMadeBy()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.ZipFileIndexGet">
            <summary>Establecer el shim de ZipEntry.get_ZipFileIndex()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.ZipFileIndexSetInt64">
            <summary>Establecer el shim de ZipEntry.set_ZipFileIndex(Int64 value)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.CanDecompressGet">
            <summary>Establecer el shim de ZipEntry.get_CanDecompress()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.CentralHeaderRequiresZip64Get">
            <summary>Establecer el shim de ZipEntry.get_CentralHeaderRequiresZip64()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.Clone">
            <summary>Establecer el shim de ZipEntry.Clone()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.CommentGet">
            <summary>Establecer el shim de ZipEntry.get_Comment()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.CommentSetString">
            <summary>Establecer el shim de ZipEntry.set_Comment(String value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.CompressedSizeGet">
            <summary>Establecer el shim de ZipEntry.get_CompressedSize()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.CompressedSizeSetInt64">
            <summary>Establecer el shim de ZipEntry.set_CompressedSize(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.CompressionMethodGet">
            <summary>Establecer el shim de ZipEntry.get_CompressionMethod()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.CompressionMethodSetCompressionMethod">
            <summary>Establecer el shim de ZipEntry.set_CompressionMethod(CompressionMethod value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.CrcGet">
            <summary>Establecer el shim de ZipEntry.get_Crc()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.CrcSetInt64">
            <summary>Establecer el shim de ZipEntry.set_Crc(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.CryptoCheckValueGet">
            <summary>Establecer el shim de ZipEntry.get_CryptoCheckValue()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.CryptoCheckValueSetByte">
            <summary>Establecer el shim de ZipEntry.set_CryptoCheckValue(Byte value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.DateTimeGet">
            <summary>Establecer el shim de ZipEntry.get_DateTime()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.DateTimeSetDateTime">
            <summary>Establecer el shim de ZipEntry.set_DateTime(DateTime value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.DosTimeGet">
            <summary>Establecer el shim de ZipEntry.get_DosTime()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.DosTimeSetInt64">
            <summary>Establecer el shim de ZipEntry.set_DosTime(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.ExternalFileAttributesGet">
            <summary>Establecer el shim de ZipEntry.get_ExternalFileAttributes()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.ExternalFileAttributesSetInt32">
            <summary>Establecer el shim de ZipEntry.set_ExternalFileAttributes(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.ExtraDataGet">
            <summary>Establecer el shim de ZipEntry.get_ExtraData()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.ExtraDataSetByteArray">
            <summary>Establecer el shim de ZipEntry.set_ExtraData(Byte[] value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.FlagsGet">
            <summary>Establecer el shim de ZipEntry.get_Flags()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.FlagsSetInt32">
            <summary>Establecer el shim de ZipEntry.set_Flags(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.ForceZip64">
            <summary>Establecer el shim de ZipEntry.ForceZip64()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.HasCrcGet">
            <summary>Establecer el shim de ZipEntry.get_HasCrc()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.HasDosAttributesInt32">
            <summary>Establecer el shim de ZipEntry.HasDosAttributes(Int32 attributes)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.HostSystemGet">
            <summary>Establecer el shim de ZipEntry.get_HostSystem()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.HostSystemSetInt32">
            <summary>Establecer el shim de ZipEntry.set_HostSystem(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.IsCompressionMethodSupported">
            <summary>Establecer el shim de ZipEntry.IsCompressionMethodSupported()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.IsCryptedGet">
            <summary>Establecer el shim de ZipEntry.get_IsCrypted()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.IsCryptedSetBoolean">
            <summary>Establecer el shim de ZipEntry.set_IsCrypted(Boolean value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.IsDOSEntryGet">
            <summary>Establecer el shim de ZipEntry.get_IsDOSEntry()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.IsDirectoryGet">
            <summary>Establecer el shim de ZipEntry.get_IsDirectory()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.IsFileGet">
            <summary>Establecer el shim de ZipEntry.get_IsFile()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.IsUnicodeTextGet">
            <summary>Establecer el shim de ZipEntry.get_IsUnicodeText()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.IsUnicodeTextSetBoolean">
            <summary>Establecer el shim de ZipEntry.set_IsUnicodeText(Boolean value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.IsZip64Forced">
            <summary>Establecer el shim de ZipEntry.IsZip64Forced()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.LocalHeaderRequiresZip64Get">
            <summary>Establecer el shim de ZipEntry.get_LocalHeaderRequiresZip64()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.NameGet">
            <summary>Establecer el shim de ZipEntry.get_Name()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.OffsetGet">
            <summary>Establecer el shim de ZipEntry.get_Offset()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.OffsetSetInt64">
            <summary>Establecer el shim de ZipEntry.set_Offset(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.ProcessExtraDataBoolean">
            <summary>Establecer el shim de ZipEntry.ProcessExtraData(Boolean localHeader)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.SizeGet">
            <summary>Establecer el shim de ZipEntry.get_Size()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.SizeSetInt64">
            <summary>Establecer el shim de ZipEntry.set_Size(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.ToString01">
            <summary>Establecer el shim de ZipEntry.ToString()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.VersionGet">
            <summary>Establecer el shim de ZipEntry.get_Version()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.VersionMadeByGet">
            <summary>Establecer el shim de ZipEntry.get_VersionMadeBy()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.ZipFileIndexGet">
            <summary>Establecer el shim de ZipEntry.get_ZipFileIndex()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntry.AllInstances.ZipFileIndexSetInt64">
            <summary>Establecer el shim de ZipEntry.set_ZipFileIndex(Int64 value)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntryFactory">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Zip.ZipEntryFactory</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntryFactory.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntryFactory.#ctor(ICSharpCode.SharpZipLib.Zip.ZipEntryFactory)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntryFactory.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntryFactory.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntryFactory.Bind(ICSharpCode.SharpZipLib.Zip.IEntryFactory)">
            <summary>Asocia los miembros de la interfaz a las correcciones de compatibilidad (shim).</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntryFactory.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntryFactory.Constructor">
            <summary>Establecer el shim de ZipEntryFactory.ZipEntryFactory()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntryFactory.ConstructorDateTime">
            <summary>Establecer el shim de ZipEntryFactory.ZipEntryFactory(DateTime time)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntryFactory.ConstructorZipEntryFactoryTimeSetting">
            <summary>Establecer el shim de ZipEntryFactory.ZipEntryFactory(TimeSetting timeSetting)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntryFactory.FixedDateTimeGet">
            <summary>Establecer el shim de ZipEntryFactory.get_FixedDateTime()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntryFactory.FixedDateTimeSetDateTime">
            <summary>Establecer el shim de ZipEntryFactory.set_FixedDateTime(DateTime value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntryFactory.GetAttributesGet">
            <summary>Establecer el shim de ZipEntryFactory.get_GetAttributes()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntryFactory.GetAttributesSetInt32">
            <summary>Establecer el shim de ZipEntryFactory.set_GetAttributes(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntryFactory.IsUnicodeTextGet">
            <summary>Establecer el shim de ZipEntryFactory.get_IsUnicodeText()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntryFactory.IsUnicodeTextSetBoolean">
            <summary>Establecer el shim de ZipEntryFactory.set_IsUnicodeText(Boolean value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntryFactory.MakeDirectoryEntryString">
            <summary>Establecer el shim de ZipEntryFactory.MakeDirectoryEntry(String directoryName)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntryFactory.MakeDirectoryEntryStringBoolean">
            <summary>Establecer el shim de ZipEntryFactory.MakeDirectoryEntry(String directoryName, Boolean useFileSystem)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntryFactory.MakeFileEntryString">
            <summary>Establecer el shim de ZipEntryFactory.MakeFileEntry(String fileName)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntryFactory.MakeFileEntryStringBoolean">
            <summary>Establecer el shim de ZipEntryFactory.MakeFileEntry(String fileName, Boolean useFileSystem)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntryFactory.NameTransformGet">
            <summary>Establecer el shim de ZipEntryFactory.get_NameTransform()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntryFactory.NameTransformSetINameTransform">
            <summary>Establecer el shim de ZipEntryFactory.set_NameTransform(INameTransform value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntryFactory.SetAttributesGet">
            <summary>Establecer el shim de ZipEntryFactory.get_SetAttributes()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntryFactory.SetAttributesSetInt32">
            <summary>Establecer el shim de ZipEntryFactory.set_SetAttributes(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntryFactory.SettingGet">
            <summary>Establecer el shim de ZipEntryFactory.get_Setting()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntryFactory.SettingSetZipEntryFactoryTimeSetting">
            <summary>Establecer el shim de ZipEntryFactory.set_Setting(TimeSetting value)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntryFactory.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntryFactory.AllInstances.FixedDateTimeGet">
            <summary>Establecer el shim de ZipEntryFactory.get_FixedDateTime()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntryFactory.AllInstances.FixedDateTimeSetDateTime">
            <summary>Establecer el shim de ZipEntryFactory.set_FixedDateTime(DateTime value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntryFactory.AllInstances.GetAttributesGet">
            <summary>Establecer el shim de ZipEntryFactory.get_GetAttributes()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntryFactory.AllInstances.GetAttributesSetInt32">
            <summary>Establecer el shim de ZipEntryFactory.set_GetAttributes(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntryFactory.AllInstances.IsUnicodeTextGet">
            <summary>Establecer el shim de ZipEntryFactory.get_IsUnicodeText()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntryFactory.AllInstances.IsUnicodeTextSetBoolean">
            <summary>Establecer el shim de ZipEntryFactory.set_IsUnicodeText(Boolean value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntryFactory.AllInstances.MakeDirectoryEntryString">
            <summary>Establecer el shim de ZipEntryFactory.MakeDirectoryEntry(String directoryName)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntryFactory.AllInstances.MakeDirectoryEntryStringBoolean">
            <summary>Establecer el shim de ZipEntryFactory.MakeDirectoryEntry(String directoryName, Boolean useFileSystem)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntryFactory.AllInstances.MakeFileEntryString">
            <summary>Establecer el shim de ZipEntryFactory.MakeFileEntry(String fileName)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntryFactory.AllInstances.MakeFileEntryStringBoolean">
            <summary>Establecer el shim de ZipEntryFactory.MakeFileEntry(String fileName, Boolean useFileSystem)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntryFactory.AllInstances.NameTransformGet">
            <summary>Establecer el shim de ZipEntryFactory.get_NameTransform()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntryFactory.AllInstances.NameTransformSetINameTransform">
            <summary>Establecer el shim de ZipEntryFactory.set_NameTransform(INameTransform value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntryFactory.AllInstances.SetAttributesGet">
            <summary>Establecer el shim de ZipEntryFactory.get_SetAttributes()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntryFactory.AllInstances.SetAttributesSetInt32">
            <summary>Establecer el shim de ZipEntryFactory.set_SetAttributes(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntryFactory.AllInstances.SettingGet">
            <summary>Establecer el shim de ZipEntryFactory.get_Setting()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipEntryFactory.AllInstances.SettingSetZipEntryFactoryTimeSetting">
            <summary>Establecer el shim de ZipEntryFactory.set_Setting(TimeSetting value)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipException">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Zip.ZipException</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipException.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipException.#ctor(ICSharpCode.SharpZipLib.Zip.ZipException)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipException.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipException.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Asocia los miembros de la interfaz a las correcciones de compatibilidad (shim).</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipException.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipException.Constructor">
            <summary>Establecer el shim de ZipException.ZipException()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipException.ConstructorSerializationInfoStreamingContext">
            <summary>Establecer el shim de ZipException.ZipException(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipException.ConstructorString">
            <summary>Establecer el shim de ZipException.ZipException(String message)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipException.ConstructorStringException">
            <summary>Establecer el shim de ZipException.ZipException(String message, Exception exception)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipException.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Zip.ZipExtraData</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.#ctor(ICSharpCode.SharpZipLib.Zip.ZipExtraData)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.Bind(System.IDisposable)">
            <summary>Asocia los miembros de la interfaz a las correcciones de compatibilidad (shim).</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.AddDataByte">
            <summary>Establecer el shim de ZipExtraData.AddData(Byte data)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.AddDataByteArray">
            <summary>Establecer el shim de ZipExtraData.AddData(Byte[] data)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.AddEntryITaggedData">
            <summary>Establecer el shim de ZipExtraData.AddEntry(ITaggedData taggedData)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.AddEntryInt32ByteArray">
            <summary>Establecer el shim de ZipExtraData.AddEntry(Int32 headerID, Byte[] fieldData)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.AddLeIntInt32">
            <summary>Establecer el shim de ZipExtraData.AddLeInt(Int32 toAdd)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.AddLeLongInt64">
            <summary>Establecer el shim de ZipExtraData.AddLeLong(Int64 toAdd)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.AddLeShortInt32">
            <summary>Establecer el shim de ZipExtraData.AddLeShort(Int32 toAdd)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.AddNewEntryInt32">
            <summary>Establecer el shim de ZipExtraData.AddNewEntry(Int32 headerID)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.Clear">
            <summary>Establecer el shim de ZipExtraData.Clear()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.Constructor">
            <summary>Establecer el shim de ZipExtraData.ZipExtraData()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.ConstructorByteArray">
            <summary>Establecer el shim de ZipExtraData.ZipExtraData(Byte[] data)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.CreateInt16ByteArrayInt32Int32">
            <summary>Establecer el shim de ZipExtraData.Create(Int16 tag, Byte[] data, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.CurrentReadIndexGet">
            <summary>Establecer el shim de ZipExtraData.get_CurrentReadIndex()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.DeleteInt32">
            <summary>Establecer el shim de ZipExtraData.Delete(Int32 headerID)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.Dispose">
            <summary>Establecer el shim de ZipExtraData.Dispose()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.FindInt32">
            <summary>Establecer el shim de ZipExtraData.Find(Int32 headerID)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.GetDataInt16">
            <summary>Establecer el shim de ZipExtraData.GetData(Int16 tag)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.GetEntryData">
            <summary>Establecer el shim de ZipExtraData.GetEntryData()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.GetStreamForTagInt32">
            <summary>Establecer el shim de ZipExtraData.GetStreamForTag(Int32 tag)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.LengthGet">
            <summary>Establecer el shim de ZipExtraData.get_Length()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.ReadByte">
            <summary>Establecer el shim de ZipExtraData.ReadByte()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.ReadCheckInt32">
            <summary>Establecer el shim de ZipExtraData.ReadCheck(Int32 length)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.ReadInt">
            <summary>Establecer el shim de ZipExtraData.ReadInt()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.ReadLong">
            <summary>Establecer el shim de ZipExtraData.ReadLong()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.ReadShort">
            <summary>Establecer el shim de ZipExtraData.ReadShort()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.ReadShortInternal">
            <summary>Establecer el shim de ZipExtraData.ReadShortInternal()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.SkipInt32">
            <summary>Establecer el shim de ZipExtraData.Skip(Int32 amount)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.StartNewEntry">
            <summary>Establecer el shim de ZipExtraData.StartNewEntry()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.UnreadCountGet">
            <summary>Establecer el shim de ZipExtraData.get_UnreadCount()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.ValueLengthGet">
            <summary>Establecer el shim de ZipExtraData.get_ValueLength()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.AllInstances.AddDataByte">
            <summary>Establecer el shim de ZipExtraData.AddData(Byte data)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.AllInstances.AddDataByteArray">
            <summary>Establecer el shim de ZipExtraData.AddData(Byte[] data)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.AllInstances.AddEntryITaggedData">
            <summary>Establecer el shim de ZipExtraData.AddEntry(ITaggedData taggedData)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.AllInstances.AddEntryInt32ByteArray">
            <summary>Establecer el shim de ZipExtraData.AddEntry(Int32 headerID, Byte[] fieldData)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.AllInstances.AddLeIntInt32">
            <summary>Establecer el shim de ZipExtraData.AddLeInt(Int32 toAdd)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.AllInstances.AddLeLongInt64">
            <summary>Establecer el shim de ZipExtraData.AddLeLong(Int64 toAdd)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.AllInstances.AddLeShortInt32">
            <summary>Establecer el shim de ZipExtraData.AddLeShort(Int32 toAdd)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.AllInstances.AddNewEntryInt32">
            <summary>Establecer el shim de ZipExtraData.AddNewEntry(Int32 headerID)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.AllInstances.Clear">
            <summary>Establecer el shim de ZipExtraData.Clear()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.AllInstances.CurrentReadIndexGet">
            <summary>Establecer el shim de ZipExtraData.get_CurrentReadIndex()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.AllInstances.DeleteInt32">
            <summary>Establecer el shim de ZipExtraData.Delete(Int32 headerID)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.AllInstances.Dispose">
            <summary>Establecer el shim de ZipExtraData.Dispose()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.AllInstances.FindInt32">
            <summary>Establecer el shim de ZipExtraData.Find(Int32 headerID)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.AllInstances.GetDataInt16">
            <summary>Establecer el shim de ZipExtraData.GetData(Int16 tag)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.AllInstances.GetEntryData">
            <summary>Establecer el shim de ZipExtraData.GetEntryData()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.AllInstances.GetStreamForTagInt32">
            <summary>Establecer el shim de ZipExtraData.GetStreamForTag(Int32 tag)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.AllInstances.LengthGet">
            <summary>Establecer el shim de ZipExtraData.get_Length()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.AllInstances.ReadByte">
            <summary>Establecer el shim de ZipExtraData.ReadByte()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.AllInstances.ReadCheckInt32">
            <summary>Establecer el shim de ZipExtraData.ReadCheck(Int32 length)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.AllInstances.ReadInt">
            <summary>Establecer el shim de ZipExtraData.ReadInt()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.AllInstances.ReadLong">
            <summary>Establecer el shim de ZipExtraData.ReadLong()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.AllInstances.ReadShort">
            <summary>Establecer el shim de ZipExtraData.ReadShort()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.AllInstances.ReadShortInternal">
            <summary>Establecer el shim de ZipExtraData.ReadShortInternal()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.AllInstances.SkipInt32">
            <summary>Establecer el shim de ZipExtraData.Skip(Int32 amount)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.AllInstances.StartNewEntry">
            <summary>Establecer el shim de ZipExtraData.StartNewEntry()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.AllInstances.UnreadCountGet">
            <summary>Establecer el shim de ZipExtraData.get_UnreadCount()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipExtraData.AllInstances.ValueLengthGet">
            <summary>Establecer el shim de ZipExtraData.get_ValueLength()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Zip.ZipFile</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.#ctor(ICSharpCode.SharpZipLib.Zip.ZipFile)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.Bind(System.IDisposable)">
            <summary>Asocia los miembros de la interfaz a las correcciones de compatibilidad (shim).</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.Bind(System.Collections.IEnumerable)">
            <summary>Asocia los miembros de la interfaz a las correcciones de compatibilidad (shim).</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AbortUpdate">
            <summary>Establecer el shim de ZipFile.AbortUpdate()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AddDirectoryString">
            <summary>Establecer el shim de ZipFile.AddDirectory(String directoryName)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AddIStaticDataSourceString">
            <summary>Establecer el shim de ZipFile.Add(IStaticDataSource dataSource, String entryName)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AddIStaticDataSourceStringCompressionMethod">
            <summary>Establecer el shim de ZipFile.Add(IStaticDataSource dataSource, String entryName, CompressionMethod compressionMethod)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AddIStaticDataSourceStringCompressionMethodBoolean">
            <summary>Establecer el shim de ZipFile.Add(IStaticDataSource dataSource, String entryName, CompressionMethod compressionMethod, Boolean useUnicodeText)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AddString">
            <summary>Establecer el shim de ZipFile.Add(String fileName)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AddStringCompressionMethod">
            <summary>Establecer el shim de ZipFile.Add(String fileName, CompressionMethod compressionMethod)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AddStringCompressionMethodBoolean">
            <summary>Establecer el shim de ZipFile.Add(String fileName, CompressionMethod compressionMethod, Boolean useUnicodeText)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AddStringString">
            <summary>Establecer el shim de ZipFile.Add(String fileName, String entryName)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AddZipEntry">
            <summary>Establecer el shim de ZipFile.Add(ZipEntry entry)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.BeginUpdate">
            <summary>Establecer el shim de ZipFile.BeginUpdate()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.BeginUpdateIArchiveStorage">
            <summary>Establecer el shim de ZipFile.BeginUpdate(IArchiveStorage archiveStorage)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.BeginUpdateIArchiveStorageIDynamicDataSource">
            <summary>Establecer el shim de ZipFile.BeginUpdate(IArchiveStorage archiveStorage, IDynamicDataSource dataSource)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.BufferSizeGet">
            <summary>Establecer el shim de ZipFile.get_BufferSize()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.BufferSizeSetInt32">
            <summary>Establecer el shim de ZipFile.set_BufferSize(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.CheckClassicPasswordCryptoStreamZipEntry">
            <summary>Establecer el shim de ZipFile.CheckClassicPassword(CryptoStream classicCryptoStream, ZipEntry entry)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.CheckUpdating">
            <summary>Establecer el shim de ZipFile.CheckUpdating()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.Close">
            <summary>Establecer el shim de ZipFile.Close()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.CommitUpdate">
            <summary>Establecer el shim de ZipFile.CommitUpdate()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.Constructor">
            <summary>Establecer el shim de ZipFile.ZipFile()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.ConstructorFileStream">
            <summary>Establecer el shim de ZipFile.ZipFile(FileStream file)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.ConstructorStream">
            <summary>Establecer el shim de ZipFile.ZipFile(Stream stream)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.ConstructorString">
            <summary>Establecer el shim de ZipFile.ZipFile(String name)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.CountGet">
            <summary>Establecer el shim de ZipFile.get_Count()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.CreateAndInitDecryptionStreamStreamZipEntry">
            <summary>Establecer el shim de ZipFile.CreateAndInitDecryptionStream(Stream baseStream, ZipEntry entry)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.CreateAndInitEncryptionStreamStreamZipEntry">
            <summary>Establecer el shim de ZipFile.CreateAndInitEncryptionStream(Stream baseStream, ZipEntry entry)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.CreateStream">
            <summary>Establecer el shim de ZipFile.Create(Stream outStream)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.CreateString">
            <summary>Establecer el shim de ZipFile.Create(String fileName)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.DeleteString">
            <summary>Establecer el shim de ZipFile.Delete(String fileName)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.DeleteZipEntry">
            <summary>Establecer el shim de ZipFile.Delete(ZipEntry entry)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.DisposeBoolean">
            <summary>Establecer el shim de ZipFile.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.DisposeInternalBoolean">
            <summary>Establecer el shim de ZipFile.DisposeInternal(Boolean disposing)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.EntryByIndexGetInt32">
            <summary>Establecer el shim de ZipFile.get_EntryByIndex(Int32 index)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.EntryFactoryGet">
            <summary>Establecer el shim de ZipFile.get_EntryFactory()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.EntryFactorySetIEntryFactory">
            <summary>Establecer el shim de ZipFile.set_EntryFactory(IEntryFactory value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.FindEntryStringBoolean">
            <summary>Establecer el shim de ZipFile.FindEntry(String name, Boolean ignoreCase)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.FindExistingUpdateString">
            <summary>Establecer el shim de ZipFile.FindExistingUpdate(String fileName)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.FindExistingUpdateZipEntry">
            <summary>Establecer el shim de ZipFile.FindExistingUpdate(ZipEntry entry)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.GetBuffer">
            <summary>Establecer el shim de ZipFile.GetBuffer()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.GetEntryString">
            <summary>Establecer el shim de ZipFile.GetEntry(String name)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.GetEnumerator">
            <summary>Establecer el shim de ZipFile.GetEnumerator()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.GetInputStreamInt64">
            <summary>Establecer el shim de ZipFile.GetInputStream(Int64 entryIndex)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.GetInputStreamZipEntry">
            <summary>Establecer el shim de ZipFile.GetInputStream(ZipEntry entry)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.GetOutputStreamZipEntry">
            <summary>Establecer el shim de ZipFile.GetOutputStream(ZipEntry entry)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.GetTransformedDirectoryNameString">
            <summary>Establecer el shim de ZipFile.GetTransformedDirectoryName(String name)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.GetTransformedFileNameString">
            <summary>Establecer el shim de ZipFile.GetTransformedFileName(String name)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.HaveKeysGet">
            <summary>Establecer el shim de ZipFile.get_HaveKeys()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.IsEmbeddedArchiveGet">
            <summary>Establecer el shim de ZipFile.get_IsEmbeddedArchive()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.IsNewArchiveGet">
            <summary>Establecer el shim de ZipFile.get_IsNewArchive()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.IsStreamOwnerGet">
            <summary>Establecer el shim de ZipFile.get_IsStreamOwner()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.IsStreamOwnerSetBoolean">
            <summary>Establecer el shim de ZipFile.set_IsStreamOwner(Boolean value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.IsUpdatingGet">
            <summary>Establecer el shim de ZipFile.get_IsUpdating()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.KeyGet">
            <summary>Establecer el shim de ZipFile.get_Key()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.KeySetByteArray">
            <summary>Establecer el shim de ZipFile.set_Key(Byte[] value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.LocateBlockWithSignatureInt32Int64Int32Int32">
            <summary>Establecer el shim de ZipFile.LocateBlockWithSignature(Int32 signature, Int64 endLocation, Int32 minimumBlockSize, Int32 maximumVariableData)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.LocateEntryZipEntry">
            <summary>Establecer el shim de ZipFile.LocateEntry(ZipEntry entry)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.NameGet">
            <summary>Establecer el shim de ZipFile.get_Name()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.NameTransformGet">
            <summary>Establecer el shim de ZipFile.get_NameTransform()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.NameTransformSetINameTransform">
            <summary>Establecer el shim de ZipFile.set_NameTransform(INameTransform value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.OnKeysRequiredString">
            <summary>Establecer el shim de ZipFile.OnKeysRequired(String fileName)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.PasswordSetString">
            <summary>Establecer el shim de ZipFile.set_Password(String value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.PostUpdateCleanup">
            <summary>Establecer el shim de ZipFile.PostUpdateCleanup()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.ReadEntries">
            <summary>Establecer el shim de ZipFile.ReadEntries()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.ReadLEUint">
            <summary>Establecer el shim de ZipFile.ReadLEUint()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.ReadLEUlong">
            <summary>Establecer el shim de ZipFile.ReadLEUlong()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.ReadLEUshort">
            <summary>Establecer el shim de ZipFile.ReadLEUshort()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.Reopen">
            <summary>Establecer el shim de ZipFile.Reopen()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.ReopenStream">
            <summary>Establecer el shim de ZipFile.Reopen(Stream source)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.RunUpdates">
            <summary>Establecer el shim de ZipFile.RunUpdates()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.SetCommentString">
            <summary>Establecer el shim de ZipFile.SetComment(String comment)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.SizeGet">
            <summary>Establecer el shim de ZipFile.get_Size()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.SystemIDisposableDispose">
            <summary>Establecer el shim de ZipFile.System.IDisposable.Dispose()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.TestArchiveBoolean">
            <summary>Establecer el shim de ZipFile.TestArchive(Boolean testData)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.TestArchiveBooleanTestStrategyZipTestResultHandler">
            <summary>Establecer el shim de ZipFile.TestArchive(Boolean testData, TestStrategy strategy, ZipTestResultHandler resultHandler)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.UpdateCommentOnly">
            <summary>Establecer el shim de ZipFile.UpdateCommentOnly()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.UseZip64Get">
            <summary>Establecer el shim de ZipFile.get_UseZip64()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.UseZip64SetUseZip64">
            <summary>Establecer el shim de ZipFile.set_UseZip64(UseZip64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.WriteCentralDirectoryHeaderZipEntry">
            <summary>Establecer el shim de ZipFile.WriteCentralDirectoryHeader(ZipEntry entry)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.WriteEncryptionHeaderStreamInt64">
            <summary>Establecer el shim de ZipFile.WriteEncryptionHeader(Stream stream, Int64 crcValue)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.WriteLEIntInt32">
            <summary>Establecer el shim de ZipFile.WriteLEInt(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.WriteLEShortInt32">
            <summary>Establecer el shim de ZipFile.WriteLEShort(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.WriteLEUintUInt32">
            <summary>Establecer el shim de ZipFile.WriteLEUint(UInt32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.WriteLEUlongUInt64">
            <summary>Establecer el shim de ZipFile.WriteLEUlong(UInt64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.WriteLEUshortUInt16">
            <summary>Establecer el shim de ZipFile.WriteLEUshort(UInt16 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.WriteLeLongInt64">
            <summary>Establecer el shim de ZipFile.WriteLeLong(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.ZipFileCommentGet">
            <summary>Establecer el shim de ZipFile.get_ZipFileComment()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.AbortUpdate">
            <summary>Establecer el shim de ZipFile.AbortUpdate()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.AddDirectoryString">
            <summary>Establecer el shim de ZipFile.AddDirectory(String directoryName)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.AddIStaticDataSourceString">
            <summary>Establecer el shim de ZipFile.Add(IStaticDataSource dataSource, String entryName)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.AddIStaticDataSourceStringCompressionMethod">
            <summary>Establecer el shim de ZipFile.Add(IStaticDataSource dataSource, String entryName, CompressionMethod compressionMethod)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.AddIStaticDataSourceStringCompressionMethodBoolean">
            <summary>Establecer el shim de ZipFile.Add(IStaticDataSource dataSource, String entryName, CompressionMethod compressionMethod, Boolean useUnicodeText)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.AddString">
            <summary>Establecer el shim de ZipFile.Add(String fileName)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.AddStringCompressionMethod">
            <summary>Establecer el shim de ZipFile.Add(String fileName, CompressionMethod compressionMethod)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.AddStringCompressionMethodBoolean">
            <summary>Establecer el shim de ZipFile.Add(String fileName, CompressionMethod compressionMethod, Boolean useUnicodeText)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.AddStringString">
            <summary>Establecer el shim de ZipFile.Add(String fileName, String entryName)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.AddZipEntry">
            <summary>Establecer el shim de ZipFile.Add(ZipEntry entry)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.BeginUpdate">
            <summary>Establecer el shim de ZipFile.BeginUpdate()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.BeginUpdateIArchiveStorage">
            <summary>Establecer el shim de ZipFile.BeginUpdate(IArchiveStorage archiveStorage)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.BeginUpdateIArchiveStorageIDynamicDataSource">
            <summary>Establecer el shim de ZipFile.BeginUpdate(IArchiveStorage archiveStorage, IDynamicDataSource dataSource)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.BufferSizeGet">
            <summary>Establecer el shim de ZipFile.get_BufferSize()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.BufferSizeSetInt32">
            <summary>Establecer el shim de ZipFile.set_BufferSize(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.CheckUpdating">
            <summary>Establecer el shim de ZipFile.CheckUpdating()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.Close">
            <summary>Establecer el shim de ZipFile.Close()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.CommitUpdate">
            <summary>Establecer el shim de ZipFile.CommitUpdate()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.CountGet">
            <summary>Establecer el shim de ZipFile.get_Count()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.CreateAndInitDecryptionStreamStreamZipEntry">
            <summary>Establecer el shim de ZipFile.CreateAndInitDecryptionStream(Stream baseStream, ZipEntry entry)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.CreateAndInitEncryptionStreamStreamZipEntry">
            <summary>Establecer el shim de ZipFile.CreateAndInitEncryptionStream(Stream baseStream, ZipEntry entry)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.DeleteString">
            <summary>Establecer el shim de ZipFile.Delete(String fileName)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.DeleteZipEntry">
            <summary>Establecer el shim de ZipFile.Delete(ZipEntry entry)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.DisposeBoolean">
            <summary>Establecer el shim de ZipFile.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.DisposeInternalBoolean">
            <summary>Establecer el shim de ZipFile.DisposeInternal(Boolean disposing)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.EntryByIndexGetInt32">
            <summary>Establecer el shim de ZipFile.get_EntryByIndex(Int32 index)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.EntryFactoryGet">
            <summary>Establecer el shim de ZipFile.get_EntryFactory()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.EntryFactorySetIEntryFactory">
            <summary>Establecer el shim de ZipFile.set_EntryFactory(IEntryFactory value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.FindEntryStringBoolean">
            <summary>Establecer el shim de ZipFile.FindEntry(String name, Boolean ignoreCase)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.FindExistingUpdateString">
            <summary>Establecer el shim de ZipFile.FindExistingUpdate(String fileName)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.FindExistingUpdateZipEntry">
            <summary>Establecer el shim de ZipFile.FindExistingUpdate(ZipEntry entry)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.GetBuffer">
            <summary>Establecer el shim de ZipFile.GetBuffer()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.GetEntryString">
            <summary>Establecer el shim de ZipFile.GetEntry(String name)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.GetEnumerator">
            <summary>Establecer el shim de ZipFile.GetEnumerator()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.GetInputStreamInt64">
            <summary>Establecer el shim de ZipFile.GetInputStream(Int64 entryIndex)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.GetInputStreamZipEntry">
            <summary>Establecer el shim de ZipFile.GetInputStream(ZipEntry entry)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.GetOutputStreamZipEntry">
            <summary>Establecer el shim de ZipFile.GetOutputStream(ZipEntry entry)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.GetTransformedDirectoryNameString">
            <summary>Establecer el shim de ZipFile.GetTransformedDirectoryName(String name)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.GetTransformedFileNameString">
            <summary>Establecer el shim de ZipFile.GetTransformedFileName(String name)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.HaveKeysGet">
            <summary>Establecer el shim de ZipFile.get_HaveKeys()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.IsEmbeddedArchiveGet">
            <summary>Establecer el shim de ZipFile.get_IsEmbeddedArchive()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.IsNewArchiveGet">
            <summary>Establecer el shim de ZipFile.get_IsNewArchive()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.IsStreamOwnerGet">
            <summary>Establecer el shim de ZipFile.get_IsStreamOwner()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.IsStreamOwnerSetBoolean">
            <summary>Establecer el shim de ZipFile.set_IsStreamOwner(Boolean value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.IsUpdatingGet">
            <summary>Establecer el shim de ZipFile.get_IsUpdating()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.KeyGet">
            <summary>Establecer el shim de ZipFile.get_Key()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.KeySetByteArray">
            <summary>Establecer el shim de ZipFile.set_Key(Byte[] value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.LocateBlockWithSignatureInt32Int64Int32Int32">
            <summary>Establecer el shim de ZipFile.LocateBlockWithSignature(Int32 signature, Int64 endLocation, Int32 minimumBlockSize, Int32 maximumVariableData)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.LocateEntryZipEntry">
            <summary>Establecer el shim de ZipFile.LocateEntry(ZipEntry entry)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.NameGet">
            <summary>Establecer el shim de ZipFile.get_Name()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.NameTransformGet">
            <summary>Establecer el shim de ZipFile.get_NameTransform()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.NameTransformSetINameTransform">
            <summary>Establecer el shim de ZipFile.set_NameTransform(INameTransform value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.OnKeysRequiredString">
            <summary>Establecer el shim de ZipFile.OnKeysRequired(String fileName)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.PasswordSetString">
            <summary>Establecer el shim de ZipFile.set_Password(String value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.PostUpdateCleanup">
            <summary>Establecer el shim de ZipFile.PostUpdateCleanup()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.ReadEntries">
            <summary>Establecer el shim de ZipFile.ReadEntries()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.ReadLEUint">
            <summary>Establecer el shim de ZipFile.ReadLEUint()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.ReadLEUlong">
            <summary>Establecer el shim de ZipFile.ReadLEUlong()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.ReadLEUshort">
            <summary>Establecer el shim de ZipFile.ReadLEUshort()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.Reopen">
            <summary>Establecer el shim de ZipFile.Reopen()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.ReopenStream">
            <summary>Establecer el shim de ZipFile.Reopen(Stream source)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.RunUpdates">
            <summary>Establecer el shim de ZipFile.RunUpdates()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.SetCommentString">
            <summary>Establecer el shim de ZipFile.SetComment(String comment)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.SizeGet">
            <summary>Establecer el shim de ZipFile.get_Size()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.SystemIDisposableDispose">
            <summary>Establecer el shim de ZipFile.System.IDisposable.Dispose()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.TestArchiveBoolean">
            <summary>Establecer el shim de ZipFile.TestArchive(Boolean testData)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.TestArchiveBooleanTestStrategyZipTestResultHandler">
            <summary>Establecer el shim de ZipFile.TestArchive(Boolean testData, TestStrategy strategy, ZipTestResultHandler resultHandler)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.UpdateCommentOnly">
            <summary>Establecer el shim de ZipFile.UpdateCommentOnly()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.UseZip64Get">
            <summary>Establecer el shim de ZipFile.get_UseZip64()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.UseZip64SetUseZip64">
            <summary>Establecer el shim de ZipFile.set_UseZip64(UseZip64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.WriteCentralDirectoryHeaderZipEntry">
            <summary>Establecer el shim de ZipFile.WriteCentralDirectoryHeader(ZipEntry entry)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.WriteLEIntInt32">
            <summary>Establecer el shim de ZipFile.WriteLEInt(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.WriteLEShortInt32">
            <summary>Establecer el shim de ZipFile.WriteLEShort(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.WriteLEUintUInt32">
            <summary>Establecer el shim de ZipFile.WriteLEUint(UInt32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.WriteLEUlongUInt64">
            <summary>Establecer el shim de ZipFile.WriteLEUlong(UInt64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.WriteLEUshortUInt16">
            <summary>Establecer el shim de ZipFile.WriteLEUshort(UInt16 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.WriteLeLongInt64">
            <summary>Establecer el shim de ZipFile.WriteLeLong(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipFile.AllInstances.ZipFileCommentGet">
            <summary>Establecer el shim de ZipFile.get_ZipFileComment()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipInputStream">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Zip.ZipInputStream</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipInputStream.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipInputStream.#ctor(ICSharpCode.SharpZipLib.Zip.ZipInputStream)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipInputStream.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipInputStream.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipInputStream.Bind(System.IDisposable)">
            <summary>Asocia los miembros de la interfaz a las correcciones de compatibilidad (shim).</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipInputStream.AvailableGet">
            <summary>Establecer el shim de ZipInputStream.get_Available()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipInputStream.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipInputStream.BodyReadByteArrayInt32Int32">
            <summary>Establecer el shim de ZipInputStream.BodyRead(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipInputStream.CanDecompressEntryGet">
            <summary>Establecer el shim de ZipInputStream.get_CanDecompressEntry()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipInputStream.Close">
            <summary>Establecer el shim de ZipInputStream.Close()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipInputStream.CloseEntry">
            <summary>Establecer el shim de ZipInputStream.CloseEntry()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipInputStream.CompleteCloseEntryBoolean">
            <summary>Establecer el shim de ZipInputStream.CompleteCloseEntry(Boolean testCrc)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipInputStream.ConstructorStream">
            <summary>Establecer el shim de ZipInputStream.ZipInputStream(Stream baseInputStream)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipInputStream.GetNextEntry">
            <summary>Establecer el shim de ZipInputStream.GetNextEntry()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipInputStream.InitialReadByteArrayInt32Int32">
            <summary>Establecer el shim de ZipInputStream.InitialRead(Byte[] destination, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipInputStream.LengthGet">
            <summary>Establecer el shim de ZipInputStream.get_Length()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipInputStream.PasswordGet">
            <summary>Establecer el shim de ZipInputStream.get_Password()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipInputStream.PasswordSetString">
            <summary>Establecer el shim de ZipInputStream.set_Password(String value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipInputStream.ReadByte">
            <summary>Establecer el shim de ZipInputStream.ReadByte()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipInputStream.ReadByteArrayInt32Int32">
            <summary>Establecer el shim de ZipInputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipInputStream.ReadDataDescriptor">
            <summary>Establecer el shim de ZipInputStream.ReadDataDescriptor()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipInputStream.ReadingNotAvailableByteArrayInt32Int32">
            <summary>Establecer el shim de ZipInputStream.ReadingNotAvailable(Byte[] destination, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipInputStream.ReadingNotSupportedByteArrayInt32Int32">
            <summary>Establecer el shim de ZipInputStream.ReadingNotSupported(Byte[] destination, Int32 offset, Int32 count)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipInputStream.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipInputStream.AllInstances.AvailableGet">
            <summary>Establecer el shim de ZipInputStream.get_Available()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipInputStream.AllInstances.BodyReadByteArrayInt32Int32">
            <summary>Establecer el shim de ZipInputStream.BodyRead(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipInputStream.AllInstances.CanDecompressEntryGet">
            <summary>Establecer el shim de ZipInputStream.get_CanDecompressEntry()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipInputStream.AllInstances.Close">
            <summary>Establecer el shim de ZipInputStream.Close()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipInputStream.AllInstances.CloseEntry">
            <summary>Establecer el shim de ZipInputStream.CloseEntry()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipInputStream.AllInstances.CompleteCloseEntryBoolean">
            <summary>Establecer el shim de ZipInputStream.CompleteCloseEntry(Boolean testCrc)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipInputStream.AllInstances.GetNextEntry">
            <summary>Establecer el shim de ZipInputStream.GetNextEntry()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipInputStream.AllInstances.InitialReadByteArrayInt32Int32">
            <summary>Establecer el shim de ZipInputStream.InitialRead(Byte[] destination, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipInputStream.AllInstances.LengthGet">
            <summary>Establecer el shim de ZipInputStream.get_Length()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipInputStream.AllInstances.PasswordGet">
            <summary>Establecer el shim de ZipInputStream.get_Password()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipInputStream.AllInstances.PasswordSetString">
            <summary>Establecer el shim de ZipInputStream.set_Password(String value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipInputStream.AllInstances.ReadByte">
            <summary>Establecer el shim de ZipInputStream.ReadByte()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipInputStream.AllInstances.ReadByteArrayInt32Int32">
            <summary>Establecer el shim de ZipInputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipInputStream.AllInstances.ReadDataDescriptor">
            <summary>Establecer el shim de ZipInputStream.ReadDataDescriptor()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipInputStream.AllInstances.ReadingNotAvailableByteArrayInt32Int32">
            <summary>Establecer el shim de ZipInputStream.ReadingNotAvailable(Byte[] destination, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipInputStream.AllInstances.ReadingNotSupportedByteArrayInt32Int32">
            <summary>Establecer el shim de ZipInputStream.ReadingNotSupported(Byte[] destination, Int32 offset, Int32 count)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipNameTransform">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Zip.ZipNameTransform</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipNameTransform.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipNameTransform.#ctor(ICSharpCode.SharpZipLib.Zip.ZipNameTransform)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipNameTransform.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipNameTransform.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipNameTransform.Bind(ICSharpCode.SharpZipLib.Core.INameTransform)">
            <summary>Asocia los miembros de la interfaz a las correcciones de compatibilidad (shim).</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipNameTransform.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipNameTransform.Constructor">
            <summary>Establecer el shim de ZipNameTransform.ZipNameTransform()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipNameTransform.ConstructorString">
            <summary>Establecer el shim de ZipNameTransform.ZipNameTransform(String trimPrefix)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipNameTransform.IsValidNameString">
            <summary>Establecer el shim de ZipNameTransform.IsValidName(String name)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipNameTransform.IsValidNameStringBoolean">
            <summary>Establecer el shim de ZipNameTransform.IsValidName(String name, Boolean relaxed)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipNameTransform.MakeValidNameStringChar">
            <summary>Establecer el shim de ZipNameTransform.MakeValidName(String name, Char replacement)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipNameTransform.StaticConstructor">
            <summary>Establecer el shim de ZipNameTransform.ZipNameTransform()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipNameTransform.TransformDirectoryString">
            <summary>Establecer el shim de ZipNameTransform.TransformDirectory(String name)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipNameTransform.TransformFileString">
            <summary>Establecer el shim de ZipNameTransform.TransformFile(String name)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipNameTransform.TrimPrefixGet">
            <summary>Establecer el shim de ZipNameTransform.get_TrimPrefix()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipNameTransform.TrimPrefixSetString">
            <summary>Establecer el shim de ZipNameTransform.set_TrimPrefix(String value)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipNameTransform.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipNameTransform.AllInstances.TransformDirectoryString">
            <summary>Establecer el shim de ZipNameTransform.TransformDirectory(String name)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipNameTransform.AllInstances.TransformFileString">
            <summary>Establecer el shim de ZipNameTransform.TransformFile(String name)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipNameTransform.AllInstances.TrimPrefixGet">
            <summary>Establecer el shim de ZipNameTransform.get_TrimPrefix()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipNameTransform.AllInstances.TrimPrefixSetString">
            <summary>Establecer el shim de ZipNameTransform.set_TrimPrefix(String value)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipOutputStream">
            <summary>Tipo de correcciones de compatibilidad (shim) de ICSharpCode.SharpZipLib.Zip.ZipOutputStream</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipOutputStream.#ctor">
            <summary>Inicializa una nueva instancia de correcciones de compatibilidad (shim)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipOutputStream.#ctor(ICSharpCode.SharpZipLib.Zip.ZipOutputStream)">
            <summary>Inicializa nuevas correcciones de compatibilidad (shim) para la instancia especificada</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipOutputStream.BehaveAsCurrent">
            <summary>Asigna el comportamiento &apos;Current&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipOutputStream.BehaveAsNotImplemented">
            <summary>Asigna el comportamiento &apos;NotImplemented&apos; a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipOutputStream.Bind(System.IDisposable)">
            <summary>Asocia los miembros de la interfaz a las correcciones de compatibilidad (shim).</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipOutputStream.Behavior">
            <summary>Asigna el comportamiento a todos los métodos del tipo corregido para compatibilidad</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipOutputStream.CloseEntry">
            <summary>Establecer el shim de ZipOutputStream.CloseEntry()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipOutputStream.ConstructorStream">
            <summary>Establecer el shim de ZipOutputStream.ZipOutputStream(Stream baseOutputStream)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipOutputStream.CopyAndEncryptByteArrayInt32Int32">
            <summary>Establecer el shim de ZipOutputStream.CopyAndEncrypt(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipOutputStream.Finish">
            <summary>Establecer el shim de ZipOutputStream.Finish()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipOutputStream.GetLevel">
            <summary>Establecer el shim de ZipOutputStream.GetLevel()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipOutputStream.IsFinishedGet">
            <summary>Establecer el shim de ZipOutputStream.get_IsFinished()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipOutputStream.PutNextEntryZipEntry">
            <summary>Establecer el shim de ZipOutputStream.PutNextEntry(ZipEntry entry)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipOutputStream.SetCommentString">
            <summary>Establecer el shim de ZipOutputStream.SetComment(String comment)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipOutputStream.SetLevelInt32">
            <summary>Establecer el shim de ZipOutputStream.SetLevel(Int32 level)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipOutputStream.UseZip64Get">
            <summary>Establecer el shim de ZipOutputStream.get_UseZip64()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipOutputStream.UseZip64SetUseZip64">
            <summary>Establecer el shim de ZipOutputStream.set_UseZip64(UseZip64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipOutputStream.WriteByteArrayInt32Int32">
            <summary>Establecer el shim de ZipOutputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipOutputStream.WriteEncryptionHeaderInt64">
            <summary>Establecer el shim de ZipOutputStream.WriteEncryptionHeader(Int64 crcValue)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipOutputStream.WriteLeIntInt32">
            <summary>Establecer el shim de ZipOutputStream.WriteLeInt(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipOutputStream.WriteLeLongInt64">
            <summary>Establecer el shim de ZipOutputStream.WriteLeLong(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipOutputStream.WriteLeShortInt32">
            <summary>Establecer el shim de ZipOutputStream.WriteLeShort(Int32 value)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipOutputStream.AllInstances">
            <summary>Definir correcciones de compatibilidad (shim) para todos los miembros de instancia</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipOutputStream.AllInstances.CloseEntry">
            <summary>Establecer el shim de ZipOutputStream.CloseEntry()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipOutputStream.AllInstances.CopyAndEncryptByteArrayInt32Int32">
            <summary>Establecer el shim de ZipOutputStream.CopyAndEncrypt(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipOutputStream.AllInstances.Finish">
            <summary>Establecer el shim de ZipOutputStream.Finish()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipOutputStream.AllInstances.GetLevel">
            <summary>Establecer el shim de ZipOutputStream.GetLevel()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipOutputStream.AllInstances.IsFinishedGet">
            <summary>Establecer el shim de ZipOutputStream.get_IsFinished()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipOutputStream.AllInstances.PutNextEntryZipEntry">
            <summary>Establecer el shim de ZipOutputStream.PutNextEntry(ZipEntry entry)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipOutputStream.AllInstances.SetCommentString">
            <summary>Establecer el shim de ZipOutputStream.SetComment(String comment)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipOutputStream.AllInstances.SetLevelInt32">
            <summary>Establecer el shim de ZipOutputStream.SetLevel(Int32 level)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipOutputStream.AllInstances.UseZip64Get">
            <summary>Establecer el shim de ZipOutputStream.get_UseZip64()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipOutputStream.AllInstances.UseZip64SetUseZip64">
            <summary>Establecer el shim de ZipOutputStream.set_UseZip64(UseZip64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipOutputStream.AllInstances.WriteByteArrayInt32Int32">
            <summary>Establecer el shim de ZipOutputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipOutputStream.AllInstances.WriteEncryptionHeaderInt64">
            <summary>Establecer el shim de ZipOutputStream.WriteEncryptionHeader(Int64 crcValue)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipOutputStream.AllInstances.WriteLeIntInt32">
            <summary>Establecer el shim de ZipOutputStream.WriteLeInt(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipOutputStream.AllInstances.WriteLeLongInt64">
            <summary>Establecer el shim de ZipOutputStream.WriteLeLong(Int64 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.ShimZipOutputStream.AllInstances.WriteLeShortInt32">
            <summary>Establecer el shim de ZipOutputStream.WriteLeShort(Int32 value)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.StubBaseArchiveStorage">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubBaseArchiveStorage.#ctor(ICSharpCode.SharpZipLib.Zip.FileUpdateMode)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubBaseArchiveStorage.ConvertTemporaryToFinal">
            <summary>Establecer el stub de BaseArchiveStorage.ConvertTemporaryToFinal()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubBaseArchiveStorage.ConvertTemporaryToFinal01">
            <summary>Establecer el stub de BaseArchiveStorage.ConvertTemporaryToFinal()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubBaseArchiveStorage.Dispose">
            <summary>Establecer el stub de BaseArchiveStorage.Dispose()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubBaseArchiveStorage.Dispose01">
            <summary>Establecer el stub de BaseArchiveStorage.Dispose()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubBaseArchiveStorage.GetTemporaryOutput">
            <summary>Establecer el stub de BaseArchiveStorage.GetTemporaryOutput()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubBaseArchiveStorage.GetTemporaryOutput01">
            <summary>Establecer el stub de BaseArchiveStorage.GetTemporaryOutput()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubBaseArchiveStorage.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubBaseArchiveStorage</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubBaseArchiveStorage.MakeTemporaryCopy(System.IO.Stream)">
            <summary>Establecer el stub de BaseArchiveStorage.MakeTemporaryCopy(Stream stream)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubBaseArchiveStorage.MakeTemporaryCopyStream">
            <summary>Establecer el stub de BaseArchiveStorage.MakeTemporaryCopy(Stream stream)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubBaseArchiveStorage.OpenForDirectUpdate(System.IO.Stream)">
            <summary>Establecer el stub de BaseArchiveStorage.OpenForDirectUpdate(Stream stream)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubBaseArchiveStorage.OpenForDirectUpdateStream">
            <summary>Establecer el stub de BaseArchiveStorage.OpenForDirectUpdate(Stream stream)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubBaseArchiveStorage.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubBaseArchiveStorage.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubBaseArchiveStorage.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.StubDescriptorData">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Zip.DescriptorData</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubDescriptorData.#ctor">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubDescriptorData.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubDescriptorData</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubDescriptorData.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubDescriptorData.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubDescriptorData.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.StubDiskArchiveStorage">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Zip.DiskArchiveStorage</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubDiskArchiveStorage.#ctor(ICSharpCode.SharpZipLib.Zip.ZipFile)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubDiskArchiveStorage.#ctor(ICSharpCode.SharpZipLib.Zip.ZipFile,ICSharpCode.SharpZipLib.Zip.FileUpdateMode)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubDiskArchiveStorage.ConvertTemporaryToFinal">
            <summary>Establecer el stub de DiskArchiveStorage.ConvertTemporaryToFinal()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubDiskArchiveStorage.ConvertTemporaryToFinal01">
            <summary>Establecer el stub de DiskArchiveStorage.ConvertTemporaryToFinal()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubDiskArchiveStorage.Dispose">
            <summary>Establecer el stub de DiskArchiveStorage.Dispose()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubDiskArchiveStorage.Dispose01">
            <summary>Establecer el stub de DiskArchiveStorage.Dispose()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubDiskArchiveStorage.GetTemporaryOutput">
            <summary>Establecer el stub de DiskArchiveStorage.GetTemporaryOutput()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubDiskArchiveStorage.GetTemporaryOutput01">
            <summary>Establecer el stub de DiskArchiveStorage.GetTemporaryOutput()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubDiskArchiveStorage.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubDiskArchiveStorage</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubDiskArchiveStorage.MakeTemporaryCopy(System.IO.Stream)">
            <summary>Establecer el stub de DiskArchiveStorage.MakeTemporaryCopy(Stream stream)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubDiskArchiveStorage.MakeTemporaryCopyStream">
            <summary>Establecer el stub de DiskArchiveStorage.MakeTemporaryCopy(Stream stream)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubDiskArchiveStorage.OpenForDirectUpdate(System.IO.Stream)">
            <summary>Establecer el stub de DiskArchiveStorage.OpenForDirectUpdate(Stream stream)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubDiskArchiveStorage.OpenForDirectUpdateStream">
            <summary>Establecer el stub de DiskArchiveStorage.OpenForDirectUpdate(Stream stream)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubDiskArchiveStorage.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubDiskArchiveStorage.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubDiskArchiveStorage.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.StubDynamicDiskDataSource">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Zip.DynamicDiskDataSource</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubDynamicDiskDataSource.#ctor">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubDynamicDiskDataSource.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubDynamicDiskDataSource</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubDynamicDiskDataSource.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubDynamicDiskDataSource.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubDynamicDiskDataSource.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.StubExtendedUnixData">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Zip.ExtendedUnixData</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubExtendedUnixData.#ctor">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubExtendedUnixData.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubExtendedUnixData</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubExtendedUnixData.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubExtendedUnixData.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubExtendedUnixData.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.StubFastZip">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Zip.FastZip</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubFastZip.#ctor">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubFastZip.#ctor(ICSharpCode.SharpZipLib.Zip.FastZipEvents)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubFastZip.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubFastZip</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubFastZip.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubFastZip.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubFastZip.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.StubFastZipEvents">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Zip.FastZipEvents</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubFastZipEvents.#ctor">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubFastZipEvents.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubFastZipEvents</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubFastZipEvents.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubFastZipEvents.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubFastZipEvents.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.StubIArchiveStorage">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Zip.IArchiveStorage</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubIArchiveStorage.#ctor">
            <summary>Inicializa una nueva instancia de type StubIArchiveStorage</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubIArchiveStorage.ConvertTemporaryToFinal">
            <summary>Establecer el stub de IArchiveStorage.ConvertTemporaryToFinal()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubIArchiveStorage.Dispose">
            <summary>Establecer el stub de IArchiveStorage.Dispose()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubIArchiveStorage.GetTemporaryOutput">
            <summary>Establecer el stub de IArchiveStorage.GetTemporaryOutput()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubIArchiveStorage.icscszl::ICSharpCode#SharpZipLib#Zip#IArchiveStorage#ConvertTemporaryToFinal">
            <summary>Establecer el stub de IArchiveStorage.ConvertTemporaryToFinal()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubIArchiveStorage.icscszl::ICSharpCode#SharpZipLib#Zip#IArchiveStorage#Dispose">
            <summary>Establecer el stub de IArchiveStorage.Dispose()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubIArchiveStorage.icscszl::ICSharpCode#SharpZipLib#Zip#IArchiveStorage#GetTemporaryOutput">
            <summary>Establecer el stub de IArchiveStorage.GetTemporaryOutput()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubIArchiveStorage.icscszl::ICSharpCode#SharpZipLib#Zip#IArchiveStorage#MakeTemporaryCopy(System.IO.Stream)">
            <summary>Establecer el stub de IArchiveStorage.MakeTemporaryCopy(Stream stream)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubIArchiveStorage.icscszl::ICSharpCode#SharpZipLib#Zip#IArchiveStorage#OpenForDirectUpdate(System.IO.Stream)">
            <summary>Establecer el stub de IArchiveStorage.OpenForDirectUpdate(Stream stream)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubIArchiveStorage.MakeTemporaryCopyStream">
            <summary>Establecer el stub de IArchiveStorage.MakeTemporaryCopy(Stream stream)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubIArchiveStorage.OpenForDirectUpdateStream">
            <summary>Establecer el stub de IArchiveStorage.OpenForDirectUpdate(Stream stream)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubIArchiveStorage.UpdateModeGet">
            <summary>Establecer el stub de IArchiveStorage.get_UpdateMode()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubIArchiveStorage.icscszl::ICSharpCode#SharpZipLib#Zip#IArchiveStorage#UpdateMode">
            <summary>Establecer el stub de IArchiveStorage.get_UpdateMode()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.StubIDynamicDataSource">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Zip.IDynamicDataSource</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubIDynamicDataSource.#ctor">
            <summary>Inicializa una nueva instancia de type StubIDynamicDataSource</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubIDynamicDataSource.GetSourceZipEntryString">
            <summary>Establecer el stub de IDynamicDataSource.GetSource(ZipEntry entry, String name)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubIDynamicDataSource.icscszl::ICSharpCode#SharpZipLib#Zip#IDynamicDataSource#GetSource(ICSharpCode.SharpZipLib.Zip.ZipEntry,System.String)">
            <summary>Establecer el stub de IDynamicDataSource.GetSource(ZipEntry entry, String name)</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.StubIEntryFactory">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Zip.IEntryFactory</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubIEntryFactory.#ctor">
            <summary>Inicializa una nueva instancia de type StubIEntryFactory</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubIEntryFactory.AttachBackingFieldToNameTransform">
            <summary>Asocia delegados para emular StubIEntryFactory.NameTransform como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubIEntryFactory.icscszl::ICSharpCode#SharpZipLib#Zip#IEntryFactory#MakeDirectoryEntry(System.String)">
            <summary>Establecer el stub de IEntryFactory.MakeDirectoryEntry(String directoryName)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubIEntryFactory.icscszl::ICSharpCode#SharpZipLib#Zip#IEntryFactory#MakeDirectoryEntry(System.String,System.Boolean)">
            <summary>Establecer el stub de IEntryFactory.MakeDirectoryEntry(String directoryName, Boolean useFileSystem)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubIEntryFactory.icscszl::ICSharpCode#SharpZipLib#Zip#IEntryFactory#MakeFileEntry(System.String)">
            <summary>Establecer el stub de IEntryFactory.MakeFileEntry(String fileName)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubIEntryFactory.icscszl::ICSharpCode#SharpZipLib#Zip#IEntryFactory#MakeFileEntry(System.String,System.Boolean)">
            <summary>Establecer el stub de IEntryFactory.MakeFileEntry(String fileName, Boolean useFileSystem)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubIEntryFactory.MakeDirectoryEntryString">
            <summary>Establecer el stub de IEntryFactory.MakeDirectoryEntry(String directoryName)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubIEntryFactory.MakeDirectoryEntryStringBoolean">
            <summary>Establecer el stub de IEntryFactory.MakeDirectoryEntry(String directoryName, Boolean useFileSystem)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubIEntryFactory.MakeFileEntryString">
            <summary>Establecer el stub de IEntryFactory.MakeFileEntry(String fileName)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubIEntryFactory.MakeFileEntryStringBoolean">
            <summary>Establecer el stub de IEntryFactory.MakeFileEntry(String fileName, Boolean useFileSystem)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubIEntryFactory.NameTransformGet">
            <summary>Establecer el stub de IEntryFactory.get_NameTransform()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubIEntryFactory.NameTransformSetINameTransform">
            <summary>Establecer el stub de IEntryFactory.set_NameTransform(INameTransform value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubIEntryFactory.icscszl::ICSharpCode#SharpZipLib#Zip#IEntryFactory#NameTransform">
            <summary>Establecer el stub de IEntryFactory.get_NameTransform()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.StubIStaticDataSource">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Zip.IStaticDataSource</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubIStaticDataSource.#ctor">
            <summary>Inicializa una nueva instancia de type StubIStaticDataSource</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubIStaticDataSource.GetSource">
            <summary>Establecer el stub de IStaticDataSource.GetSource()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubIStaticDataSource.icscszl::ICSharpCode#SharpZipLib#Zip#IStaticDataSource#GetSource">
            <summary>Establecer el stub de IStaticDataSource.GetSource()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.StubITaggedData">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Zip.ITaggedData</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubITaggedData.#ctor">
            <summary>Inicializa una nueva instancia de type StubITaggedData</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubITaggedData.GetData">
            <summary>Establecer el stub de ITaggedData.GetData()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubITaggedData.icscszl::ICSharpCode#SharpZipLib#Zip#ITaggedData#GetData">
            <summary>Establecer el stub de ITaggedData.GetData()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubITaggedData.icscszl::ICSharpCode#SharpZipLib#Zip#ITaggedData#SetData(System.Byte[],System.Int32,System.Int32)">
            <summary>Establecer el stub de ITaggedData.SetData(Byte[] data, Int32 offset, Int32 count)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubITaggedData.SetDataByteArrayInt32Int32">
            <summary>Establecer el stub de ITaggedData.SetData(Byte[] data, Int32 offset, Int32 count)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubITaggedData.TagIDGet">
            <summary>Establecer el stub de ITaggedData.get_TagID()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubITaggedData.icscszl::ICSharpCode#SharpZipLib#Zip#ITaggedData#TagID">
            <summary>Establecer el stub de ITaggedData.get_TagID()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.StubKeysRequiredEventArgs">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubKeysRequiredEventArgs.#ctor(System.String)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubKeysRequiredEventArgs.#ctor(System.String,System.Byte[])">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubKeysRequiredEventArgs.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubKeysRequiredEventArgs</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubKeysRequiredEventArgs.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubKeysRequiredEventArgs.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubKeysRequiredEventArgs.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.StubMemoryArchiveStorage">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubMemoryArchiveStorage.#ctor">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubMemoryArchiveStorage.#ctor(ICSharpCode.SharpZipLib.Zip.FileUpdateMode)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubMemoryArchiveStorage.ConvertTemporaryToFinal">
            <summary>Establecer el stub de MemoryArchiveStorage.ConvertTemporaryToFinal()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubMemoryArchiveStorage.ConvertTemporaryToFinal01">
            <summary>Establecer el stub de MemoryArchiveStorage.ConvertTemporaryToFinal()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubMemoryArchiveStorage.Dispose">
            <summary>Establecer el stub de MemoryArchiveStorage.Dispose()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubMemoryArchiveStorage.Dispose01">
            <summary>Establecer el stub de MemoryArchiveStorage.Dispose()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubMemoryArchiveStorage.GetTemporaryOutput">
            <summary>Establecer el stub de MemoryArchiveStorage.GetTemporaryOutput()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubMemoryArchiveStorage.GetTemporaryOutput01">
            <summary>Establecer el stub de MemoryArchiveStorage.GetTemporaryOutput()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubMemoryArchiveStorage.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubMemoryArchiveStorage</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubMemoryArchiveStorage.MakeTemporaryCopy(System.IO.Stream)">
            <summary>Establecer el stub de MemoryArchiveStorage.MakeTemporaryCopy(Stream stream)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubMemoryArchiveStorage.MakeTemporaryCopyStream">
            <summary>Establecer el stub de MemoryArchiveStorage.MakeTemporaryCopy(Stream stream)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubMemoryArchiveStorage.OpenForDirectUpdate(System.IO.Stream)">
            <summary>Establecer el stub de MemoryArchiveStorage.OpenForDirectUpdate(Stream stream)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubMemoryArchiveStorage.OpenForDirectUpdateStream">
            <summary>Establecer el stub de MemoryArchiveStorage.OpenForDirectUpdate(Stream stream)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubMemoryArchiveStorage.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubMemoryArchiveStorage.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubMemoryArchiveStorage.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.StubNTTaggedData">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Zip.NTTaggedData</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubNTTaggedData.#ctor">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubNTTaggedData.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubNTTaggedData</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubNTTaggedData.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubNTTaggedData.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubNTTaggedData.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.StubRawTaggedData">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Zip.RawTaggedData</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubRawTaggedData.#ctor(System.Int16)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubRawTaggedData.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubRawTaggedData</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubRawTaggedData.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubRawTaggedData.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubRawTaggedData.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.StubStaticDiskDataSource">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Zip.StaticDiskDataSource</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubStaticDiskDataSource.#ctor(System.String)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubStaticDiskDataSource.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubStaticDiskDataSource</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubStaticDiskDataSource.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubStaticDiskDataSource.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubStaticDiskDataSource.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.StubTestStatus">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Zip.TestStatus</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubTestStatus.#ctor(ICSharpCode.SharpZipLib.Zip.ZipFile)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubTestStatus.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubTestStatus</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubTestStatus.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubTestStatus.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubTestStatus.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.StubWindowsNameTransform">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Zip.WindowsNameTransform</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubWindowsNameTransform.#ctor">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubWindowsNameTransform.#ctor(System.String)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubWindowsNameTransform.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubWindowsNameTransform</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubWindowsNameTransform.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubWindowsNameTransform.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubWindowsNameTransform.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipEntry">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Zip.ZipEntry</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipEntry.#ctor(ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipEntry.#ctor(System.String)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipEntry.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubZipEntry</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipEntry.ToString">
            <summary>Establecer el stub de ZipEntry.ToString()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipEntry.ToString01">
            <summary>Establecer el stub de ZipEntry.ToString()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipEntry.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipEntry.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipEntry.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipEntryFactory">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Zip.ZipEntryFactory</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipEntryFactory.#ctor">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipEntryFactory.#ctor(System.DateTime)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipEntryFactory.#ctor(ICSharpCode.SharpZipLib.Zip.ZipEntryFactory.TimeSetting)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipEntryFactory.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubZipEntryFactory</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipEntryFactory.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipEntryFactory.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipEntryFactory.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipException">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Zip.ZipException</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipException.#ctor">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipException.#ctor(System.String)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipException.#ctor(System.String,System.Exception)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipException.AttachBackingFieldToHelpLink">
            <summary>Asocia delegados para emular StubZipException.HelpLink como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipException.AttachBackingFieldToSource">
            <summary>Asocia delegados para emular StubZipException.Source como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipException.DataGet">
            <summary>Establecer el stub de Exception.get_Data()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipException.GetBaseException">
            <summary>Establecer el stub de Exception.GetBaseException()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipException.GetBaseException01">
            <summary>Establecer el stub de Exception.GetBaseException()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Establecer el stub de Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Establecer el stub de Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipException.HelpLinkGet">
            <summary>Establecer el stub de Exception.get_HelpLink()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipException.HelpLinkSetString">
            <summary>Establecer el stub de Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipException.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubZipException</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipException.MessageGet">
            <summary>Establecer el stub de Exception.get_Message()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipException.SourceGet">
            <summary>Establecer el stub de Exception.get_Source()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipException.SourceSetString">
            <summary>Establecer el stub de Exception.set_Source(String value)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipException.StackTraceGet">
            <summary>Establecer el stub de Exception.get_StackTrace()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipException.ToString">
            <summary>Establecer el stub de Exception.ToString()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipException.ToString01">
            <summary>Establecer el stub de Exception.ToString()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipException.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipException.Data">
            <summary>Establecer el stub de Exception.get_Data()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipException.HelpLink">
            <summary>Establecer el stub de Exception.get_HelpLink()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipException.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipException.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipException.Message">
            <summary>Establecer el stub de Exception.get_Message()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipException.Source">
            <summary>Establecer el stub de Exception.get_Source()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipException.StackTrace">
            <summary>Establecer el stub de Exception.get_StackTrace()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipFile">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Zip.ZipFile</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipFile.#ctor(System.String)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipFile.#ctor(System.IO.FileStream)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipFile.#ctor(System.IO.Stream)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipFile.Dispose(System.Boolean)">
            <summary>Establecer el stub de ZipFile.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipFile.DisposeBoolean">
            <summary>Establecer el stub de ZipFile.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipFile.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubZipFile</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipFile.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipFile.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipFile.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Zip.ZipInputStream</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.#ctor(System.IO.Stream)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.AttachBackingFieldToPosition">
            <summary>Asocia delegados para emular StubZipInputStream.Position como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.AttachBackingFieldToReadTimeout">
            <summary>Asocia delegados para emular StubZipInputStream.ReadTimeout como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.AttachBackingFieldToWriteTimeout">
            <summary>Asocia delegados para emular StubZipInputStream.WriteTimeout como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.AvailableGet">
            <summary>Establecer el stub de ZipInputStream.get_Available()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Establecer el stub de Stream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.BeginReadByteArrayInt32Int32AsyncCallbackObject">
            <summary>Establecer el stub de Stream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Establecer el stub de InflaterInputStream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.BeginWriteByteArrayInt32Int32AsyncCallbackObject">
            <summary>Establecer el stub de InflaterInputStream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.CanReadGet">
            <summary>Establecer el stub de InflaterInputStream.get_CanRead()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.CanSeekGet">
            <summary>Establecer el stub de InflaterInputStream.get_CanSeek()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.CanTimeoutGet">
            <summary>Establecer el stub de Stream.get_CanTimeout()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.CanWriteGet">
            <summary>Establecer el stub de InflaterInputStream.get_CanWrite()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.Close">
            <summary>Establecer el stub de ZipInputStream.Close()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.Close01">
            <summary>Establecer el stub de ZipInputStream.Close()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.CreateWaitHandle">
            <summary>Establecer el stub de Stream.CreateWaitHandle()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.CreateWaitHandle01">
            <summary>Establecer el stub de Stream.CreateWaitHandle()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.Dispose(System.Boolean)">
            <summary>Establecer el stub de Stream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.DisposeBoolean">
            <summary>Establecer el stub de Stream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.EndRead(System.IAsyncResult)">
            <summary>Establecer el stub de Stream.EndRead(IAsyncResult asyncResult)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.EndReadIAsyncResult">
            <summary>Establecer el stub de Stream.EndRead(IAsyncResult asyncResult)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.EndWrite(System.IAsyncResult)">
            <summary>Establecer el stub de Stream.EndWrite(IAsyncResult asyncResult)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.EndWriteIAsyncResult">
            <summary>Establecer el stub de Stream.EndWrite(IAsyncResult asyncResult)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.Flush">
            <summary>Establecer el stub de InflaterInputStream.Flush()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.Flush01">
            <summary>Establecer el stub de InflaterInputStream.Flush()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubZipInputStream</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.LengthGet">
            <summary>Establecer el stub de ZipInputStream.get_Length()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.ObjectInvariant">
            <summary>Establecer el stub de Stream.ObjectInvariant()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.ObjectInvariant01">
            <summary>Establecer el stub de Stream.ObjectInvariant()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.PositionGet">
            <summary>Establecer el stub de InflaterInputStream.get_Position()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.PositionSetInt64">
            <summary>Establecer el stub de InflaterInputStream.set_Position(Int64 value)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>Establecer el stub de ZipInputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.ReadByte">
            <summary>Establecer el stub de ZipInputStream.ReadByte()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.ReadByte01">
            <summary>Establecer el stub de ZipInputStream.ReadByte()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.ReadByteArrayInt32Int32">
            <summary>Establecer el stub de ZipInputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.ReadTimeoutGet">
            <summary>Establecer el stub de Stream.get_ReadTimeout()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.ReadTimeoutSetInt32">
            <summary>Establecer el stub de Stream.set_ReadTimeout(Int32 value)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>Establecer el stub de InflaterInputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.SeekInt64SeekOrigin">
            <summary>Establecer el stub de InflaterInputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.SetLength(System.Int64)">
            <summary>Establecer el stub de InflaterInputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.SetLengthInt64">
            <summary>Establecer el stub de InflaterInputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Establecer el stub de InflaterInputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.WriteByte(System.Byte)">
            <summary>Establecer el stub de InflaterInputStream.WriteByte(Byte value)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.WriteByteArrayInt32Int32">
            <summary>Establecer el stub de InflaterInputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.WriteByteByte">
            <summary>Establecer el stub de InflaterInputStream.WriteByte(Byte value)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.WriteTimeoutGet">
            <summary>Establecer el stub de Stream.get_WriteTimeout()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.WriteTimeoutSetInt32">
            <summary>Establecer el stub de Stream.set_WriteTimeout(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.Available">
            <summary>Establecer el stub de ZipInputStream.get_Available()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.CanRead">
            <summary>Establecer el stub de InflaterInputStream.get_CanRead()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.CanSeek">
            <summary>Establecer el stub de InflaterInputStream.get_CanSeek()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.CanTimeout">
            <summary>Establecer el stub de Stream.get_CanTimeout()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.CanWrite">
            <summary>Establecer el stub de InflaterInputStream.get_CanWrite()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.Length">
            <summary>Establecer el stub de ZipInputStream.get_Length()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.Position">
            <summary>Establecer el stub de InflaterInputStream.get_Position()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.ReadTimeout">
            <summary>Establecer el stub de Stream.get_ReadTimeout()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipInputStream.WriteTimeout">
            <summary>Establecer el stub de Stream.get_WriteTimeout()</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipNameTransform">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Zip.ZipNameTransform</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipNameTransform.#ctor">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipNameTransform.#ctor(System.String)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipNameTransform.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubZipNameTransform</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipNameTransform.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipNameTransform.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipNameTransform.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream">
            <summary>Tipo stub de ICSharpCode.SharpZipLib.Zip.ZipOutputStream</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.#ctor(System.IO.Stream)">
            <summary>Inicializa una nueva instancia</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.AttachBackingFieldToPosition">
            <summary>Asocia delegados para emular StubZipOutputStream.Position como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.AttachBackingFieldToReadTimeout">
            <summary>Asocia delegados para emular StubZipOutputStream.ReadTimeout como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.AttachBackingFieldToWriteTimeout">
            <summary>Asocia delegados para emular StubZipOutputStream.WriteTimeout como una propiedad con un campo de respaldo.</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Establecer el stub de DeflaterOutputStream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.BeginReadByteArrayInt32Int32AsyncCallbackObject">
            <summary>Establecer el stub de DeflaterOutputStream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Establecer el stub de DeflaterOutputStream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.BeginWriteByteArrayInt32Int32AsyncCallbackObject">
            <summary>Establecer el stub de DeflaterOutputStream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.CanReadGet">
            <summary>Establecer el stub de DeflaterOutputStream.get_CanRead()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.CanSeekGet">
            <summary>Establecer el stub de DeflaterOutputStream.get_CanSeek()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.CanTimeoutGet">
            <summary>Establecer el stub de Stream.get_CanTimeout()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.CanWriteGet">
            <summary>Establecer el stub de DeflaterOutputStream.get_CanWrite()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.Close">
            <summary>Establecer el stub de DeflaterOutputStream.Close()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.Close01">
            <summary>Establecer el stub de DeflaterOutputStream.Close()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.CreateWaitHandle">
            <summary>Establecer el stub de Stream.CreateWaitHandle()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.CreateWaitHandle01">
            <summary>Establecer el stub de Stream.CreateWaitHandle()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.Dispose(System.Boolean)">
            <summary>Establecer el stub de Stream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.DisposeBoolean">
            <summary>Establecer el stub de Stream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.EndRead(System.IAsyncResult)">
            <summary>Establecer el stub de Stream.EndRead(IAsyncResult asyncResult)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.EndReadIAsyncResult">
            <summary>Establecer el stub de Stream.EndRead(IAsyncResult asyncResult)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.EndWrite(System.IAsyncResult)">
            <summary>Establecer el stub de Stream.EndWrite(IAsyncResult asyncResult)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.EndWriteIAsyncResult">
            <summary>Establecer el stub de Stream.EndWrite(IAsyncResult asyncResult)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.Finish">
            <summary>Establecer el stub de ZipOutputStream.Finish()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.Finish01">
            <summary>Establecer el stub de ZipOutputStream.Finish()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.Flush">
            <summary>Establecer el stub de DeflaterOutputStream.Flush()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.Flush01">
            <summary>Establecer el stub de DeflaterOutputStream.Flush()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.InitializeStub">
            <summary>Inicializa una nueva instancia de type StubZipOutputStream</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.LengthGet">
            <summary>Establecer el stub de DeflaterOutputStream.get_Length()</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.ObjectInvariant">
            <summary>Establecer el stub de Stream.ObjectInvariant()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.ObjectInvariant01">
            <summary>Establecer el stub de Stream.ObjectInvariant()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.PositionGet">
            <summary>Establecer el stub de DeflaterOutputStream.get_Position()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.PositionSetInt64">
            <summary>Establecer el stub de DeflaterOutputStream.set_Position(Int64 value)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>Establecer el stub de DeflaterOutputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.ReadByte">
            <summary>Establecer el stub de DeflaterOutputStream.ReadByte()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.ReadByte01">
            <summary>Establecer el stub de DeflaterOutputStream.ReadByte()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.ReadByteArrayInt32Int32">
            <summary>Establecer el stub de DeflaterOutputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.ReadTimeoutGet">
            <summary>Establecer el stub de Stream.get_ReadTimeout()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.ReadTimeoutSetInt32">
            <summary>Establecer el stub de Stream.set_ReadTimeout(Int32 value)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>Establecer el stub de DeflaterOutputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.SeekInt64SeekOrigin">
            <summary>Establecer el stub de DeflaterOutputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.SetLength(System.Int64)">
            <summary>Establecer el stub de DeflaterOutputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.SetLengthInt64">
            <summary>Establecer el stub de DeflaterOutputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Establecer el stub de ZipOutputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.WriteByte(System.Byte)">
            <summary>Establecer el stub de DeflaterOutputStream.WriteByte(Byte value)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.WriteByteArrayInt32Int32">
            <summary>Establecer el stub de ZipOutputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.WriteByteByte">
            <summary>Establecer el stub de DeflaterOutputStream.WriteByte(Byte value)</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.WriteTimeoutGet">
            <summary>Establecer el stub de Stream.get_WriteTimeout()</summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.WriteTimeoutSetInt32">
            <summary>Establecer el stub de Stream.set_WriteTimeout(Int32 value)</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.CallBase">
            <summary>Obtiene o establece un valor que indica si debe llamarse al método base en lugar del comportamiento de reserva</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.CanRead">
            <summary>Establecer el stub de DeflaterOutputStream.get_CanRead()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.CanSeek">
            <summary>Establecer el stub de DeflaterOutputStream.get_CanSeek()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.CanTimeout">
            <summary>Establecer el stub de Stream.get_CanTimeout()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.CanWrite">
            <summary>Establecer el stub de DeflaterOutputStream.get_CanWrite()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.InstanceBehavior">
            <summary>Obtiene o establece el comportamiento de instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.InstanceObserver">
            <summary>Obtiene o establece el observador de la instancia.</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.Length">
            <summary>Establecer el stub de DeflaterOutputStream.get_Length()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.Position">
            <summary>Establecer el stub de DeflaterOutputStream.get_Position()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.ReadTimeout">
            <summary>Establecer el stub de Stream.get_ReadTimeout()</summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Fakes.StubZipOutputStream.WriteTimeout">
            <summary>Establecer el stub de Stream.get_WriteTimeout()</summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Delegates.ICSharpCodeSharpZipLibDelegates">
            <summary>Contiene delegados personalizados usados para los stubs y shims de ICSharpCode.SharpZipLib</summary>
        </member>
    </members>
</doc>
